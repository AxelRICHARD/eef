[comment 
 *******************************************************************************
 * Copyright (c) 2008-2009 Obeo.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Obeo - initial API and implementation
 *******************************************************************************
 /]
[module viewFormUtils('http://www.eclipse.org/emf/eef/views/1.0.0', 'http://www.eclipse.org/emf/eef/components/1.0.0', 'http://www.eclipse.org/emf/2002/Ecore')/]
[import common /]
[import naming /]
[import viewCommon /]

[comment --------------- Views related queries --------------- /]

[query public editionPart(editor : ViewElement) : String =
	if (editor.container.oclIsTypeOf(Container)) then editor.container.editionPart()
	else editor.container.oclAsType(View).pepFormClass()
	endif /]
[comment ===== imports management ===== /]

[template public manageImports(widget : Widget, pec : PropertiesEditionComponent, view : View, basePackage : String) ? (widget.name = 'EObjectFlatComboViewer')]
import org.eclipse.emf.eef.runtime.ui.widgets.EObjectFlatComboViewer;
import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider;
import org.eclipse.jface.viewers.StructuredSelection;
import org.eclipse.jface.viewers.Viewer;
import org.eclipse.jface.viewers.ViewerFilter;
import org.eclipse.jface.viewers.ISelectionChangedListener;
import org.eclipse.jface.viewers.SelectionChangedEvent;
[for (pee : PropertiesEditionElement | view.eAllContents(views::ElementEditor).oclAsType(views::ElementEditor)->select(representation.name->includes('EObjectFlatComboViewer')).propertiesEditionElement(pec) )]
import [pee.model.eType.qualifiedName(basePackage).trim()/];	
[/for]
[/template]

[template public manageImports(widget : Widget, pec : PropertiesEditionComponent, view : View, basePackage : String) ? (widget.name = 'AdvancedEObjectFlatComboViewer')]
import org.eclipse.emf.eef.runtime.ui.widgets.AdvancedEObjectFlatComboViewer;
import org.eclipse.emf.eef.runtime.ui.widgets.AdvancedEObjectFlatComboViewer.EObjectFlatComboViewerListener;
import org.eclipse.emf.eef.runtime.impl.filters.EObjectFilter;
import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider;
import org.eclipse.jface.viewers.StructuredSelection;
import org.eclipse.jface.viewers.Viewer;
import org.eclipse.jface.viewers.ViewerFilter;
import org.eclipse.jface.viewers.ISelectionChangedListener;
import org.eclipse.jface.viewers.SelectionChangedEvent;
[for (pee : PropertiesEditionElement | view.eAllContents(views::ElementEditor).oclAsType(views::ElementEditor)->select(representation.name->includes('AdvancedEObjectFlatComboViewer')).propertiesEditionElement(pec) )]
import [pee.model.eType.qualifiedName(basePackage).trim()/];
[/for]
[/template]

[template public manageImports(widget : Widget, pec : PropertiesEditionComponent, view : View, basePackage : String) ? (widget.name = 'EENumViewer')]
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.emf.ecore.EEnum;
import org.eclipse.emf.ecore.EEnumLiteral;
import org.eclipse.emf.ecore.util.EcoreAdapterFactory;
import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider;
import org.eclipse.jface.viewers.ArrayContentProvider;
import org.eclipse.jface.viewers.StructuredSelection;
import org.eclipse.emf.eef.runtime.ui.widgets.EENumViewer;
import org.eclipse.jface.viewers.ISelectionChangedListener;
import org.eclipse.jface.viewers.SelectionChangedEvent;
[/template]

[template public manageImports(widget : Widget, pec : PropertiesEditionComponent, view : View, basePackage : String) ? (widget.name = 'Table')]
[/template]

[template public manageImports(widget : Widget, pec : PropertiesEditionComponent, view : View, basePackage : String) ? (widget.name = 'MultiValuedEditor')]
import java.util.ArrayList;
import java.util.List;

import org.eclipse.emf.common.util.BasicEList;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.emf.ecore.EEnum;
import org.eclipse.emf.ecore.EEnumLiteral;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EStructuralFeature;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.emf.ecore.util.EcoreAdapterFactory;
import org.eclipse.emf.edit.ui.celleditor.FeatureEditorDialog;
import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider;
import org.eclipse.emf.eef.runtime.ui.widgets.EENumViewer;
import org.eclipse.jface.viewers.ArrayContentProvider;
import org.eclipse.jface.viewers.StructuredSelection;
import org.eclipse.jface.window.Window;
import org.eclipse.swt.SWT;
import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Group;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.Text;
[/template]

[template public manageImports(widget : Widget, pec : PropertiesEditionComponent, view : View, basePackage : String) ? (widget.name = 'ReferencesTable')]
import org.eclipse.emf.eef.runtime.impl.utils.EMFListEditUtil;
import org.eclipse.jface.viewers.TableViewer;
import org.eclipse.jface.viewers.ViewerFilter;
import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider;
import org.eclipse.swt.widgets.TableColumn;
import org.eclipse.jface.viewers.ArrayContentProvider;
import org.eclipse.jface.viewers.ITableLabelProvider;
import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.jface.viewers.StructuredSelection;
import java.util.Iterator;
import org.eclipse.emf.common.notify.AdapterFactory;
import org.eclipse.jface.viewers.ILabelProviderListener;
import org.eclipse.jface.viewers.IStructuredSelection;
import org.eclipse.jface.viewers.Viewer;
import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.graphics.Image;
import org.eclipse.emf.eef.runtime.ui.widgets.EMFModelViewerDialog;
[for (pee : PropertiesEditionElement | view.eAllContents(views::ElementEditor).oclAsType(views::ElementEditor)->select(representation.name->includes('ReferencesTable')).propertiesEditionElement(pec) )]
import [pee.model.eType.qualifiedName(basePackage).trim()/];	
[/for]
[/template]

[template public manageImports(widget : Widget, pec : PropertiesEditionComponent, view : View, basePackage : String) ? (widget.name = 'AdvancedReferencesTable')]
import org.eclipse.emf.eef.runtime.impl.utils.EMFListEditUtil;
import org.eclipse.jface.viewers.TableViewer;
import org.eclipse.jface.viewers.ViewerFilter;
import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider;
import org.eclipse.swt.widgets.TableColumn;
import org.eclipse.jface.viewers.ArrayContentProvider;
import org.eclipse.jface.viewers.ITableLabelProvider;
import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.jface.viewers.StructuredSelection;
import java.util.Iterator;
import org.eclipse.emf.common.notify.AdapterFactory;
import org.eclipse.jface.viewers.ILabelProviderListener;
import org.eclipse.jface.viewers.IStructuredSelection;
import org.eclipse.jface.viewers.Viewer;
import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.emf.eef.runtime.ui.widgets.EMFModelViewerDialog;
import org.eclipse.emf.eef.runtime.ui.widgets.TabElementTreeSelectionDialog;
import org.eclipse.emf.eef.runtime.api.providers.IPropertiesEditionPolicyProvider;
[for (pee : PropertiesEditionElement | view.eAllContents(views::ElementEditor).oclAsType(views::ElementEditor)->select(representation.name->includes('AdvancedReferencesTable')).propertiesEditionElement(pec) )]
import [pee.model.eType.qualifiedName(basePackage).trim()/];	
[/for]
import org.eclipse.emf.eef.runtime.ui.widgets.ReferencesTable;
import org.eclipse.emf.eef.runtime.ui.widgets.ReferencesTable.ReferencesTableListener;
import org.eclipse.emf.eef.runtime.impl.filters.EObjectFilter;
[/template]

[template public manageImports(widget : Widget, pec : PropertiesEditionComponent, view : View, basePackage : String) ? (widget.name = 'TableComposition')]
import java.util.Map;

import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider;
import org.eclipse.emf.eef.runtime.impl.utils.EMFListEditUtil;
import org.eclipse.emf.eef.runtime.ui.wizards.AbstractPropertyWizard;
import org.eclipse.jface.viewers.ArrayContentProvider;
import org.eclipse.jface.viewers.ILabelProviderListener;
import org.eclipse.jface.viewers.IStructuredSelection;
import org.eclipse.jface.viewers.ITableLabelProvider;
import org.eclipse.jface.viewers.TableViewer;
import org.eclipse.jface.window.Window;
import org.eclipse.jface.wizard.WizardDialog;

import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.graphics.Image;

import org.eclipse.swt.widgets.Event;

import org.eclipse.swt.widgets.Listener;
import org.eclipse.swt.widgets.TableColumn;

[for (ePackage : EPackage | view.eAllContents(views::ElementEditor).oclAsType(views::ElementEditor)->select(representation.name->includes('TableComposition')).propertiesEditionElement(pec).model.eType.ePackage->asSet() )]
import [pec.model.completePackage()/].[ePackage.metamodelFactory()/];
[/for]
[for (pee : PropertiesEditionElement | view.eAllContents(views::ElementEditor).oclAsType(views::ElementEditor)->select(representation.name->includes('TableComposition')).propertiesEditionElement(pec) )]
import [pee.model.eType.qualifiedName(basePackage).trim()/];
[/for]
[/template]

[template public manageImports(widget : Widget, pec : PropertiesEditionComponent, view : View, basePackage : String) ? (widget.name = 'AdvancedTableComposition')]
import java.util.Map;
import org.eclipse.emf.eef.runtime.impl.utils.EMFListEditUtil;
import org.eclipse.emf.eef.runtime.ui.widgets.ReferencesTable;
import org.eclipse.emf.eef.runtime.ui.widgets.ReferencesTable.ReferencesTableListener;
[for (ePackage : EPackage | view.eAllContents(views::ElementEditor).oclAsType(views::ElementEditor)->select(representation.name->includes('AdvancedTableComposition')).propertiesEditionElement(pec).model.eType.ePackage->asSet() )]
import [pec.model.completePackage()/].[ePackage.metamodelFactory()/];
[/for]
[for (pee : PropertiesEditionElement | view.eAllContents(views::ElementEditor).oclAsType(views::ElementEditor)->select(representation.name->includes('AdvancedTableComposition')).propertiesEditionElement(pec) )]
import [pee.model.eType.qualifiedName(basePackage).trim()/];	
[/for]
[/template]

[template public manageImports(widget : Widget, pec : PropertiesEditionComponent, view : View, basePackage : String) ? (widget.name = 'VerticalBox')]
import org.eclipse.emf.eef.runtime.ui.widgets.VerticalBox;
[/template]

[template public manageImports(widget : Widget, pec : PropertiesEditionComponent, view : View, basePackage : String) ? (widget.name = 'HorizontalBox')]
import org.eclipse.emf.eef.runtime.ui.widgets.HorizontalBox;
[/template]


[comment ====== Widgets declaration ====== /]
[template public widgetDeclaration(editor : SpecificElementEditor)]
	// [protected (' for '.concat(editor.name).concat(' widgets declarations'))]
	
	// [/protected]
[/template]

[template public widgetDeclaration(editor : ElementEditor) ? (not (editor.oclIsTypeOf(SpecificElementEditor)) and editor.representation.toolkit.name = 'SWT' and editor.representation.name <> 'Table')]
private [editor.implementationClass().trim()/] [editor.name.toJavaIdentifier().trim()/];
[/template]

[template public widgetDeclaration(editor : ElementEditor) ? (not (editor.oclIsTypeOf(SpecificElementEditor)) and editor.representation.name = 'EObjectFlatComboViewer')]
private EObjectFlatComboViewer [editor.name.toJavaIdentifier().trim()/];
[/template]

[template public widgetDeclaration(editor : ElementEditor) ? (not (editor.oclIsTypeOf(SpecificElementEditor)) and editor.representation.name = 'AdvancedEObjectFlatComboViewer')]
private AdvancedEObjectFlatComboViewer [editor.name.toJavaIdentifier().trim()/];
[/template]

[template public widgetDeclaration(editor : ElementEditor) ? (not (editor.oclIsTypeOf(SpecificElementEditor)) and editor.representation.name = 'ReferencesTable')]
protected EMFListEditUtil [editor.name.toJavaIdentifier().trim()/]EditUtil;
	private TableViewer [editor.name.toJavaIdentifier().trim()/];
	private Button add[editor.name.toJavaIdentifier().trim().toUpperFirst()/];
	private Button remove[editor.name.toJavaIdentifier().trim().toUpperFirst()/];
[/template]

[template public widgetDeclaration(editor : ElementEditor) ? (not (editor.oclIsTypeOf(SpecificElementEditor)) and editor.representation.name = 'AdvancedReferencesTable')]
private EMFListEditUtil [editor.name.toJavaIdentifier().trim()/]EditUtil;
	private ReferencesTable<?[comment editor.propertiesEditionElement(pec).model.eType.name/]> [editor.name.toJavaIdentifier().trim()/];
[/template]


[template public widgetDeclaration(editor : ElementEditor) ? (not (editor.oclIsTypeOf(SpecificElementEditor)) and editor.representation.name = 'EENumViewer')]
private EENumViewer [editor.name.toJavaIdentifier().trim()/];
[/template]

[template public widgetDeclaration(editor : ElementEditor) ? (not (editor.oclIsTypeOf(SpecificElementEditor)) and editor.representation.name = 'MultiValuedEditor')]
private Text [editor.name.toJavaIdentifier().trim()/]Text;
	private Button edit[editor.name.toJavaClassifier().trim()/];
	private EList [editor.name.toJavaIdentifier().trim()/]List;
[/template]

[template public widgetDeclaration(editor : ElementEditor) ? (not (editor.oclIsTypeOf(SpecificElementEditor)) and editor.representation.name = 'TableComposition')]
private EMFListEditUtil [editor.name.toJavaIdentifier().trim()/]EditUtil;
	private TableViewer [editor.name.toJavaIdentifier().trim()/];
[/template]

[template public widgetDeclaration(editor : ElementEditor) ? (not (editor.oclIsTypeOf(SpecificElementEditor)) and editor.representation.name = 'AdvancedTableComposition')]
private EMFListEditUtil [editor.name.toJavaIdentifier().trim()/]EditUtil;
	private ReferencesTable<?[comment editor.propertiesEditionElement(pec).model.eType.name/]> [editor.name.toJavaIdentifier().trim()/];
[/template]

[template public widgetDeclaration(reference : ViewReference)]
private [reference.view.name.toJavaClassifier().trim().toUpperFirst()/]PropertiesEditionPartForm  [reference.view.name.toJavaClassifier().trim().toLowerFirst()/]PropertiesEditionPart;
[/template] 

[comment ====== Widgets implementation ====== /]


[template public implementation(editor : ViewElement, pec : PropertiesEditionComponent)/]

[template public additionalImplementation(editor : ViewElement, pec : PropertiesEditionComponent, inputPEC : PropertiesEditionComponent)/]

[template public implementation(reference : ViewReference, pec : PropertiesEditionComponent)]
	create[reference.view.name.toJavaClassifier().trim()/](widgetFactory, [reference.widgetContainer().trim()/]);
[/template] 

[template public additionalImplementation(reference : ViewReference, pec : PropertiesEditionComponent, inputPEC: PropertiesEditionComponent)]
private void create[reference.view.name.toJavaClassifier().trim().toUpperFirst()/](FormToolkit widgetFactory, Composite container) {
	[reference.view.name.toJavaClassifier().trim().toLowerFirst()/]PropertiesEditionPart = new [reference.view.name.toJavaClassifier().trim().toUpperFirst()/]PropertiesEditionPartForm(super.propertiesEditionComponent);
	[reference.view.name.toJavaClassifier().trim().toLowerFirst()/]PropertiesEditionPart.createControls(widgetFactory, container, messageManager);
}
[/template] 

[template public implementation(editor : SpecificElementEditor, pec : PropertiesEditionComponent)]
// [protected ('for '.concat(editor.name).concat(' widgets implementation'))]
	
		// [/protected]
[/template] 

[comment  TODO: Manage multiple group name after Unedic non-reg/]
[template public implementation(editor : Container, pec : PropertiesEditionComponent) ? (not (editor.oclIsTypeOf(SpecificElementEditor)) and editor.representation.name = 'Group')]
		create[editor.name.toJavaClassifier().trim()/]Group(widgetFactory, [editor.widgetContainer().trim()/]);
[/template]

[template public additionalImplementation(editor : Container, pec : PropertiesEditionComponent, inputPEC: PropertiesEditionComponent) ? (editor.representation.name = 'Group')]
	private void create[editor.name.toJavaClassifier().trim()/]Group(FormToolkit widgetFactory, final Composite [editor.widgetContainer().trim()/]) {
		Section [editor.name.toJavaIdentifier().trim()/]Section = widgetFactory.createSection([editor.widgetContainer().trim()/], Section.TITLE_BAR | Section.TWISTIE | Section.EXPANDED);
		[editor.name.toJavaIdentifier().trim()/]Section.setText([pec.editionContext().messagesProvider()/].[editor.groupKey(editor.owningView()).trim()/]);
		GridData [editor.name.toJavaIdentifier().trim()/]SectionData = new GridData(GridData.FILL_HORIZONTAL);
		[editor.name.toJavaIdentifier().trim()/]SectionData.horizontalSpan = 3;
		[editor.name.toJavaIdentifier().trim()/]Section.setLayoutData([editor.name.toJavaIdentifier().trim()/]SectionData);
		Composite [editor.name.toJavaIdentifier().trim()/]Group = widgetFactory.createComposite([editor.name.toJavaIdentifier().trim()/]Section);
		GridLayout [editor.name.toJavaIdentifier().trim()/]GroupLayout = new GridLayout();
		[editor.name.toJavaIdentifier().trim()/]GroupLayout.numColumns = 3;
		[editor.name.toJavaIdentifier().trim()/]Group.setLayout([editor.name.toJavaIdentifier().trim()/]GroupLayout);
   		[for (element : ViewElement | editor.elements)]
		[element.implementation(pec).trim()/]
   		[/for]
		[editor.name.toJavaIdentifier().trim()/]Section.setClient([editor.name.toJavaIdentifier().trim()/]Group);
	}   		
[/template]

[template public implementation(editor : ElementEditor, pec : PropertiesEditionComponent) ? (not (editor.oclIsTypeOf(SpecificElementEditor)) and editor.representation.name = 'Text')]
		create[editor.name.toJavaClassifier().trim()/]Text(widgetFactory, [editor.widgetContainer().trim()/]);
[/template]

[template public additionalImplementation(editor : ElementEditor, pec : PropertiesEditionComponent, inputPEC: PropertiesEditionComponent) ? (not (editor.oclIsTypeOf(SpecificElementEditor)) and editor.representation.name = 'Text')]
	private void create[editor.name.toJavaClassifier().trim()/]Text(FormToolkit widgetFactory, Composite parent) {
		FormUtils.createPartLabel(widgetFactory, parent, [pec.editionContext().messagesProvider()/].[editor.editorKey(editor.owningView()).trim()/], [if (editor.involvedPropertiesEditionElement(pec).model.required)]true[else]false[/if]);
		[editor.name.toJavaIdentifier().trim()/] = widgetFactory.createText(parent, "");  //$NON-NLS-1$
		[editor.name.toJavaIdentifier().trim()/].setData(FormToolkit.KEY_DRAW_BORDER, FormToolkit.TEXT_BORDER);
		widgetFactory.paintBordersFor(parent);
		GridData [editor.name.toJavaIdentifier().trim()/]Data = new GridData(GridData.FILL_HORIZONTAL);
		[editor.name.toJavaIdentifier().trim()/].setLayoutData([editor.name.toJavaIdentifier().trim()/]Data);
		[editor.name.toJavaIdentifier().trim()/].addModifyListener(new ModifyListener() {

			/**
			 * {@inheritDoc}
			 * 
			 * @see org.eclipse.swt.events.ModifyListener#modifyText(org.eclipse.swt.events.ModifyEvent)
			 */
			public void modifyText(ModifyEvent e) {
				if (propertiesEditionComponent != null)
					propertiesEditionComponent.firePropertiesChanged(new PathedPropertiesEditionEvent([editor.editionPart().trim()/].this, [editor.editorID()/], PathedPropertiesEditionEvent.CHANGE, PathedPropertiesEditionEvent.SET, null, [editor.name.toJavaIdentifier().trim()/].getText()));
			}
			
		});
		[editor.name.toJavaIdentifier().trim()/].addFocusListener(new FocusAdapter() {

			/**
			 * {@inheritDoc}
			 * 
			 * @see org.eclipse.swt.events.FocusAdapter#focusLost(org.eclipse.swt.events.FocusEvent)
			 */
			public void focusLost(FocusEvent e) {
				if (propertiesEditionComponent != null)
					propertiesEditionComponent.firePropertiesChanged(new PathedPropertiesEditionEvent([editor.editionPart().trim()/].this, [editor.editorID()/], PathedPropertiesEditionEvent.COMMIT, PathedPropertiesEditionEvent.SET, null, [editor.name.toJavaIdentifier().trim()/].getText()));
			}
			
		});
		[editor.name.toJavaIdentifier().trim()/].addKeyListener(new KeyAdapter() {

			/**
			 * {@inheritDoc}
			 * 
			 * @see org.eclipse.swt.events.KeyAdapter#keyPressed(org.eclipse.swt.events.KeyEvent)
			 */
			public void keyPressed(KeyEvent e) {
				if (e.character == SWT.CR) {
					if (propertiesEditionComponent != null)
						propertiesEditionComponent.firePropertiesChanged(new PathedPropertiesEditionEvent([editor.editionPart().trim()/].this, [editor.editorID()/], PathedPropertiesEditionEvent.COMMIT, PathedPropertiesEditionEvent.SET, null, [editor.name.toJavaIdentifier().trim()/].getText()));
				}
			}
			
		});
		FormUtils.createHelpButton(widgetFactory, parent, [editor.helpText(pec)/], null); //$NON-NLS-1$
	}
[/template]

[template public implementation(editor : ElementEditor, pec : PropertiesEditionComponent) ? (not (editor.oclIsTypeOf(SpecificElementEditor)) and editor.representation.name = 'Checkbox')]
	create[editor.name.toJavaClassifier().trim()/]Checkbox(widgetFactory, [editor.widgetContainer().trim()/]);
[/template]

[template public additionalImplementation(editor : ElementEditor, pec : PropertiesEditionComponent, inputPEC: PropertiesEditionComponent) ? (not (editor.oclIsTypeOf(SpecificElementEditor)) and editor.representation.name = 'Checkbox' and editor.container.representation.name='HorizontalBox')]
	private void create[editor.name.toJavaClassifier().trim()/]Checkbox(FormToolkit widgetFactory, Composite parent) {
		[editor.name.toJavaIdentifier().trim()/] = widgetFactory.createButton(parent, [pec.editionContext().messagesProvider()/].[editor.editorKey(editor.owningView()).trim()/], SWT.CHECK);
   		[editor.name.toJavaIdentifier().trim()/].addSelectionListener(new SelectionAdapter() {

			/**
			 * {@inheritDoc}
			 *
			 * @see org.eclipse.swt.events.SelectionAdapter#widgetSelected(org.eclipse.swt.events.SelectionEvent)
			 */
			public void widgetSelected(SelectionEvent e) {
				if (propertiesEditionComponent != null)
					propertiesEditionComponent.firePropertiesChanged(new PathedPropertiesEditionEvent([editor.editionPart().trim()/].this, [editor.editorID()/], PathedPropertiesEditionEvent.COMMIT, PathedPropertiesEditionEvent.SET, null, new Boolean([editor.name.toJavaIdentifier().trim()/].getSelection())));
			}
   			
   			
   		});
		GridData [editor.name.toJavaIdentifier().trim()/]Data = new GridData(GridData.FILL_HORIZONTAL);
		//[editor.name.toJavaIdentifier().trim()/]Data.horizontalSpan = 2;
		[editor.name.toJavaIdentifier().trim()/].setLayoutData([editor.name.toJavaIdentifier().trim()/]Data);
		FormUtils.createHelpButton(widgetFactory, parent, [editor.helpText(pec)/], null); //$NON-NLS-1$
	}
[/template]

[template public additionalImplementation(editor : ElementEditor, pec : PropertiesEditionComponent, inputPEC: PropertiesEditionComponent) ? (not (editor.oclIsTypeOf(SpecificElementEditor)) and editor.representation.name = 'Checkbox')]
	private void create[editor.name.toJavaClassifier().trim()/]Checkbox(FormToolkit widgetFactory, Composite parent) {
		[editor.name.toJavaIdentifier().trim()/] = widgetFactory.createButton(parent, [pec.editionContext().messagesProvider()/].[editor.editorKey(editor.owningView()).trim()/], SWT.CHECK);
   		[editor.name.toJavaIdentifier().trim()/].addSelectionListener(new SelectionAdapter() {

			/**
			 * {@inheritDoc}
			 *
			 * @see org.eclipse.swt.events.SelectionAdapter#widgetSelected(org.eclipse.swt.events.SelectionEvent)
			 */
			public void widgetSelected(SelectionEvent e) {
				if (propertiesEditionComponent != null)
					propertiesEditionComponent.firePropertiesChanged(new PathedPropertiesEditionEvent([editor.editionPart().trim()/].this, [editor.editorID()/], PathedPropertiesEditionEvent.COMMIT, PathedPropertiesEditionEvent.SET, null, new Boolean([editor.name.toJavaIdentifier().trim()/].getSelection())));
			}
   			
   			
   		});
		GridData [editor.name.toJavaIdentifier().trim()/]Data = new GridData(GridData.FILL_HORIZONTAL);
		[editor.name.toJavaIdentifier().trim()/]Data.horizontalSpan = 2;
		[editor.name.toJavaIdentifier().trim()/].setLayoutData([editor.name.toJavaIdentifier().trim()/]Data);
		FormUtils.createHelpButton(widgetFactory, parent, [editor.helpText(pec)/], null); //$NON-NLS-1$
	}
[/template]

[template public implementation(editor : ElementEditor, pec : PropertiesEditionComponent) ? (not (editor.oclIsTypeOf(SpecificElementEditor)) and editor.representation.name = 'Textarea')]
	create[editor.name.toJavaClassifier().trim()/]Textarea(widgetFactory, [editor.widgetContainer().trim()/]);
[/template]

[template public additionalImplementation(editor : ElementEditor, pec : PropertiesEditionComponent, inputPEC: PropertiesEditionComponent) ? (not (editor.oclIsTypeOf(SpecificElementEditor)) and editor.representation.name = 'Textarea')]
	private void create[editor.name.toJavaClassifier().trim()/]Textarea(FormToolkit widgetFactory, Composite parent) {
		Label [editor.name.toJavaIdentifier().trim()/]Label = FormUtils.createPartLabel(widgetFactory, parent, [pec.editionContext().messagesProvider()/].[editor.editorKey(editor.owningView()).trim()/], [if (editor.involvedPropertiesEditionElement(pec).model.required)]true[else]false[/if]);
		GridData [editor.name.toJavaIdentifier().trim()/]LabelData = new GridData(GridData.FILL_HORIZONTAL);
		[editor.name.toJavaIdentifier().trim()/]LabelData.horizontalSpan = 3;
		[editor.name.toJavaIdentifier().trim()/]Label.setLayoutData([editor.name.toJavaIdentifier().trim()/]LabelData);
		[editor.name.toJavaIdentifier().trim()/] = widgetFactory.createText(parent, "", SWT.BORDER | SWT.WRAP | SWT.MULTI); //$NON-NLS-1$
		GridData [editor.name.toJavaIdentifier().trim()/]Data = new GridData(GridData.FILL_HORIZONTAL);
		[editor.name.toJavaIdentifier().trim()/]Data.horizontalSpan = 3;
		[editor.name.toJavaIdentifier().trim()/]Data.heightHint = 80;
		[editor.name.toJavaIdentifier().trim()/].setLayoutData([editor.name.toJavaIdentifier().trim()/]Data);		
		[editor.name.toJavaIdentifier().trim()/].addFocusListener(new FocusAdapter() {

			/**
			 * {@inheritDoc}
			 * 
			 * @see org.eclipse.swt.events.FocusAdapter#focusLost(org.eclipse.swt.events.FocusEvent)
			 */
			public void focusLost(FocusEvent e) {
				if (propertiesEditionComponent != null)
					propertiesEditionComponent.firePropertiesChanged(new PathedPropertiesEditionEvent([editor.editionPart().trim()/].this, [editor.editorID()/], PathedPropertiesEditionEvent.COMMIT, PathedPropertiesEditionEvent.SET, null, [editor.name.toJavaIdentifier().trim()/].getText()));
			}
			
		});
		[editor.name.toJavaIdentifier().trim()/].addKeyListener(new KeyAdapter() {

			/**
			 * {@inheritDoc}
			 * 
			 * @see org.eclipse.swt.events.KeyAdapter#keyPressed(org.eclipse.swt.events.KeyEvent)
			 */
			public void keyPressed(KeyEvent e) {
				if (e.character == SWT.CR) {
					if (propertiesEditionComponent != null)
						propertiesEditionComponent.firePropertiesChanged(new PathedPropertiesEditionEvent([editor.editionPart().trim()/].this, [editor.editorID()/], PathedPropertiesEditionEvent.COMMIT, PathedPropertiesEditionEvent.SET, null, [editor.name.toJavaIdentifier().trim()/].getText()));
				}
			}
			
		});
	}
[/template]

[template public implementation(editor : ElementEditor, pec : PropertiesEditionComponent) ? (not (editor.oclIsTypeOf(SpecificElementEditor)) and editor.representation.name = 'EObjectFlatComboViewer')]
		create[editor.name.toJavaClassifier().trim()/]FlatComboViewer([editor.widgetContainer().trim()/], widgetFactory);
[/template]

[template public additionalImplementation(editor : ElementEditor, pec : PropertiesEditionComponent, inputPEC: PropertiesEditionComponent) ? (not (editor.oclIsTypeOf(SpecificElementEditor)) and editor.representation.name = 'EObjectFlatComboViewer')]
	/**
	 * @param [editor.widgetContainer().trim()/]
	 */
	protected void create[editor.name.toJavaClassifier().trim()/]FlatComboViewer(Composite parent, FormToolkit widgetFactory) {
	
		FormUtils.createPartLabel(widgetFactory, parent, [pec.editionContext().messagesProvider()/].[editor.editorKey(editor.owningView()).trim()/], [if (editor.involvedPropertiesEditionElement(pec).model.required)]true[else]false[/if]);
		[editor.name.toJavaIdentifier().trim()/] = new EObjectFlatComboViewer(parent, [editor.involvedPropertiesEditionElement(pec).model.lowerBound = 0/]);
		[editor.name.toJavaIdentifier().trim()/].setLabelProvider(new AdapterFactoryLabelProvider(adapterFactory));
		[editor.name.toJavaIdentifier().trim()/].addFilter(new ViewerFilter() {

			/*
			 * (non-Javadoc)
			 * 
			 * @see org.eclipse.jface.viewers.ViewerFilter#select(org.eclipse.jface.viewers.Viewer, java.lang.Object, java.lang.Object)
			 */
			public boolean select(Viewer viewer, Object parentElement, Object element) {
				return [if (editor.involvedPropertiesEditionElement(pec).model.lowerBound = 0)](element instanceof String && element.equals("")) || [/if](element instanceof [editor.propertiesEditionElement(pec).model.eType.name/]); [if (editor.involvedPropertiesEditionElement(pec).model.lowerBound = 0)] //$NON-NLS-1$ [/if]
				
			}

		});

		GridData [editor.name.toJavaIdentifier().trim()/]Data = new GridData(GridData.FILL_HORIZONTAL);
		[editor.name.toJavaIdentifier().trim()/].setLayoutData([editor.name.toJavaIdentifier().trim()/]Data);
		[editor.name.toJavaIdentifier().trim()/].addSelectionChangedListener(new ISelectionChangedListener() {

			/**
			 * {@inheritDoc}
			 * 
			 * @see org.eclipse.jface.viewers.ISelectionChangedListener#selectionChanged(org.eclipse.jface.viewers.SelectionChangedEvent)
			 */
			public void selectionChanged(SelectionChangedEvent event) {
				if (propertiesEditionComponent != null)
					propertiesEditionComponent.firePropertiesChanged(new PathedPropertiesEditionEvent([editor.editionPart().trim()/].this, [editor.editorID()/], PathedPropertiesEditionEvent.COMMIT, PathedPropertiesEditionEvent.SET, null, get[editor.name.toASCII().substituteAll(' ','').toUpperFirst()/]()));
			}
			
		});
		FormUtils.createHelpButton(widgetFactory, parent, [editor.helpText(pec)/], null); //$NON-NLS-1$
	}
[/template]

[template public implementation(editor : ElementEditor, pec : PropertiesEditionComponent) ? (not (editor.oclIsTypeOf(SpecificElementEditor)) and editor.representation.name = 'AdvancedEObjectFlatComboViewer')]
		create[editor.name.toJavaClassifier().trim()/]FlatComboViewer([editor.widgetContainer().trim()/], widgetFactory);
[/template]

[template public additionalImplementation(editor : ElementEditor, pec : PropertiesEditionComponent, inputPEC: PropertiesEditionComponent) ? (not (editor.oclIsTypeOf(SpecificElementEditor)) and editor.representation.name = 'AdvancedEObjectFlatComboViewer')]	
	/**
	 * @param [editor.widgetContainer().trim()/]
	 */
	protected void create[editor.name.toJavaClassifier().trim()/]FlatComboViewer(Composite parent, FormToolkit widgetFactory) {
		Label [editor.name.toJavaIdentifier().trim()/]Label = FormUtils.createPartLabel(widgetFactory, parent, [pec.editionContext().messagesProvider()/].[editor.editorKey(editor.owningView()).trim()/], [if (editor.involvedPropertiesEditionElement(pec).model.required)]true[else]false[/if]);
		
		ViewerFilter [editor.name.toJavaIdentifier().trim()/]Filter = new EObjectFilter([editor.viewPackage(pec)/].eINSTANCE.get[editor.propertiesEditionElement(pec).model.eType.name/]());							
		[editor.name.toJavaIdentifier().trim()/] = new AdvancedEObjectFlatComboViewer<[editor.propertiesEditionElement(pec).model.eType.name/]>([inputPEC.editionContext().messagesProvider().trim()/].[editor.editorKey(editor.owningView()).trim()/], 
			resourceSet, [editor.name.toJavaIdentifier().trim()/]Filter, [editor.viewPackage(pec)/].eINSTANCE.get[editor.propertiesEditionElement(pec).model.eType.name/](), new EObjectFlatComboViewerListener<[editor.propertiesEditionElement(pec).model.eType.name/]>(){
			public void handleSet([editor.propertiesEditionElement(pec).model.eType.name/] element){
				propertiesEditionComponent.firePropertiesChanged(new PathedPropertiesEditionEvent([editor.editionPart().trim()/].this, [editor.editorID()/], PathedPropertiesEditionEvent.COMMIT, PathedPropertiesEditionEvent.SET, null, element)); 
			}
			public void navigateTo([editor.propertiesEditionElement(pec).model.eType.name/] element){ System.out.println("NavigateTo"); }
		});
		[editor.name.toJavaIdentifier().trim()/].createControls(parent, widgetFactory);
		GridData [editor.name.toJavaIdentifier().trim()/]Data = new GridData(GridData.FILL_HORIZONTAL);		
		[editor.name.toJavaIdentifier().trim()/].setLayoutData([editor.name.toJavaIdentifier().trim()/]Data);
		
		FormUtils.createHelpButton(widgetFactory, parent, [editor.helpText(pec)/], null); //$NON-NLS-1$
	}
	
[/template]

[template public implementation(editor : ElementEditor, pec : PropertiesEditionComponent) ? (not (editor.oclIsTypeOf(SpecificElementEditor)) and (editor.representation.name = 'ReferencesTable' or editor.representation.name = 'AdvancedReferencesTable'))]
		create[editor.name.toJavaClassifier().trim()/]ReferencesTable(widgetFactory, [editor.widgetContainer().trim()/]);
[/template]

[template public additionalImplementation(editor : ElementEditor, pec : PropertiesEditionComponent, inputPEC: PropertiesEditionComponent) ? (not (editor.oclIsTypeOf(SpecificElementEditor)) and editor.representation.name = 'ReferencesTable')]
	protected void create[editor.name.toJavaIdentifier().trim().toUpperFirst()/]ReferencesTable(FormToolkit widgetFactory, Composite parent) {	
		Label [editor.name.toJavaIdentifier().trim()/]Label = FormUtils.createPartLabel(widgetFactory, parent, [pec.editionContext().messagesProvider()/].[editor.editorKey(editor.owningView()).trim()/], [if (editor.involvedPropertiesEditionElement(pec).model.required)]true[else]false[/if]);
		GridData [editor.name.toJavaIdentifier().trim()/]LabelData = new GridData();
		[editor.name.toJavaIdentifier().trim()/]LabelData.horizontalSpan = 3;
		[editor.name.toJavaIdentifier().trim()/]Label.setLayoutData([editor.name.toJavaIdentifier().trim()/]LabelData);
		[editor.name.toJavaIdentifier().trim()/] = create[editor.name.toJavaIdentifier().trim().toUpperFirst()/]Viewer(parent, widgetFactory, adapterFactory);
		GridData [editor.name.toJavaIdentifier().trim()/]Data = new GridData(GridData.FILL_HORIZONTAL);
		[editor.name.toJavaIdentifier().trim()/]Data.horizontalSpan = 2;
		[editor.name.toJavaIdentifier().trim()/]Data.minimumHeight = 120;
		[editor.name.toJavaIdentifier().trim()/]Data.heightHint = 120;
		[editor.name.toJavaIdentifier().trim()/].getTable().setLayoutData([editor.name.toJavaIdentifier().trim()/]Data);
		create[editor.name.toJavaIdentifier().trim().toUpperFirst()/]ControlPanel(parent, widgetFactory);
	}

	protected TableViewer create[editor.name.toJavaIdentifier().trim().toUpperFirst()/]Viewer(Composite container, FormToolkit widgetFactory, AdapterFactory adapter) {
		org.eclipse.swt.widgets.Table table = widgetFactory.createTable(container, SWT.FULL_SELECTION);
		table.setHeaderVisible(true);
		GridData gd = new GridData();
		gd.grabExcessHorizontalSpace = true;
		gd.horizontalAlignment = GridData.FILL;
		gd.grabExcessVerticalSpace = true;
		gd.verticalAlignment = GridData.FILL;
		table.setLayoutData(gd);
		table.setLinesVisible(true);
		// [protected ('for table '.concat(editor.name).concat(' s columns definition'))]
		
		TableColumn name = new TableColumn(table, SWT.NONE);
		name.setWidth(80);
		name.setText("Label"); //$NON-NLS-1$
		// [/protected]
		
		TableViewer result = new TableViewer(table);
		result.setContentProvider(new ArrayContentProvider());
		result.setLabelProvider(new ITableLabelProvider() {
 	
			// [protected ('for table '.concat(editor.name).concat(' label provider'))]
			
			public String getColumnText(Object object, int columnIndex) {
				AdapterFactoryLabelProvider labelProvider = new AdapterFactoryLabelProvider(adapterFactory);
				if (object instanceof EObject) {
					switch (columnIndex) {
					case 0:
						return labelProvider.getText(object);
					}
				}
				return ""; //$NON-NLS-1$
			}
			// [/protected]

			public Image getColumnImage(Object element, int columnIndex) {
				return null;
			}

			public void addListener(ILabelProviderListener listener) {
			}

			public void dispose() {
			}

			public boolean isLabelProperty(Object element, String property) {
				return false;
			}

			public void removeListener(ILabelProviderListener listener) {
			}

		});
		return result;
	}

	protected void create[editor.name.toJavaIdentifier().trim().toUpperFirst()/]ControlPanel(Composite container, FormToolkit widgetFactory) {
		Composite result = widgetFactory.createComposite(container, SWT.NONE);
		GridLayout layout = new GridLayout();
		layout.numColumns = 1;
		result.setLayout(layout);
		add[editor.name.toJavaIdentifier().trim().toUpperFirst()/] = widgetFactory.createButton(result, [inputPEC.editionContext().messagesProvider().trim()/].PropertiesEditionPart_AddListViewerLabel, SWT.NONE);
		GridData addData = new GridData(GridData.FILL_HORIZONTAL);
		add[editor.name.toJavaIdentifier().trim().toUpperFirst()/].setLayoutData(addData);
		add[editor.name.toJavaIdentifier().trim().toUpperFirst()/].addSelectionListener(new SelectionAdapter() {

			/*
			 * (non-Javadoc)
			 * 
			 * @see org.eclipse.swt.events.SelectionAdapter#widgetSelected(org.eclipse.swt.events.SelectionEvent)
			 */
			public void widgetSelected(SelectionEvent e) {
				add[editor.name.toJavaClassifier().trim()/]();
				[editor.name.toJavaIdentifier().trim()/].refresh();
			}

		});
		remove[editor.name.toJavaIdentifier().trim().toUpperFirst()/] = widgetFactory.createButton(result, [inputPEC.editionContext().messagesProvider().trim()/].PropertiesEditionPart_RemoveListViewerLabel, SWT.NONE);
		GridData removeData = new GridData(GridData.FILL_HORIZONTAL);
		remove[editor.name.toJavaIdentifier().trim().toUpperFirst()/].setLayoutData(removeData);
		remove[editor.name.toJavaIdentifier().trim().toUpperFirst()/].addSelectionListener(new SelectionAdapter() {

			/*
			 * (non-Javadoc)
			 * 
			 * @see org.eclipse.swt.events.SelectionAdapter#widgetSelected(org.eclipse.swt.events.SelectionEvent)
			 */
			public void widgetSelected(SelectionEvent e) {
				if ([editor.name.toJavaIdentifier().trim()/].getSelection() instanceof IStructuredSelection) {
					IStructuredSelection selection = (IStructuredSelection) [editor.name.toJavaIdentifier().trim()/].getSelection();
					remove[editor.name.toJavaClassifier().trim()/](selection);
					[editor.name.toJavaIdentifier().trim()/].refresh();
				}
			}

		});
	}
	
	/**
	 *
	 */
	 protected void add[editor.name.toJavaClassifier().trim()/]() {
		ViewerFilter viewerFilter = new ViewerFilter() {
	
			public boolean select(Viewer viewer, Object parentElement, Object element) {
				return element instanceof [editor.propertiesEditionElement(pec).model.eType.name/]  && ![editor.name.toJavaIdentifier().trim()/]EditUtil.getVirtualList().contains(element);
			}
	
		};
		
		List filters = new ArrayList();
	
		// [protected ('for filters initialisation for '.concat(editor.propertiesEditionElement(pec).model.eType.name))]
		
		// [/protected]
	
		EMFModelViewerDialog dialog = new EMFModelViewerDialog(view.getShell(), new AdapterFactoryLabelProvider(adapterFactory), resourceSet, viewerFilter, filters, false, true) {
			public void process(IStructuredSelection selection) {
				for (Iterator iter = selection.iterator(); iter.hasNext();) {
					EObject elem = (EObject) iter.next();
					if (![editor.name.toJavaIdentifier().trim()/]EditUtil.getVirtualList().contains(elem)) {
						[editor.name.toJavaIdentifier().trim()/]EditUtil.addElement(elem);
						propertiesEditionComponent.firePropertiesChanged(new PathedPropertiesEditionEvent([editor.editionPart().trim()/].this, [editor.editorID()/], PathedPropertiesEditionEvent.COMMIT, PathedPropertiesEditionEvent.ADD, null, [editor.name.toJavaIdentifier().trim()/]EditUtil.foundCorrespondingEObject(elem)));
					}
				}
			}
	
		};
		dialog.open();
	 }
	 
	 /**
	  * @param selection the [editor.name/] to remove
	  */
	  protected void remove[editor.name.toJavaClassifier().trim()/](IStructuredSelection selection) {
			if (selection.getFirstElement() instanceof EObject) {
				EObject selectedElement = (EObject) selection.getFirstElement();
				[editor.name.toJavaIdentifier().trim()/]EditUtil.removeElement(selectedElement);
				propertiesEditionComponent.firePropertiesChanged(new PathedPropertiesEditionEvent([editor.editionPart().trim()/].this, [editor.editorID()/], PathedPropertiesEditionEvent.COMMIT, PathedPropertiesEditionEvent.REMOVE, null, [editor.name.toJavaIdentifier().trim()/]EditUtil.foundCorrespondingEObject(selectedElement)));
			}
	  }
[/template]

[template public implementation(editor : ElementEditor, pec : PropertiesEditionComponent) ? (not (editor.oclIsTypeOf(SpecificElementEditor)) and editor.representation.name = 'EENumViewer')]
	create[editor.name.toJavaClassifier().trim()/]EEnumViewer(widgetFactory, [editor.widgetContainer().trim()/]);
[/template]

[template public additionalImplementation(editor : ElementEditor, pec : PropertiesEditionComponent, inputPEC: PropertiesEditionComponent) ? (not (editor.oclIsTypeOf(SpecificElementEditor)) and editor.representation.name = 'EENumViewer')]
	private void create[editor.name.toJavaClassifier().trim()/]EEnumViewer(FormToolkit widgetFactory, Composite parent) {
		FormUtils.createPartLabel(widgetFactory, parent, [pec.editionContext().messagesProvider()/].[editor.editorKey(editor.owningView()).trim()/], [if (editor.involvedPropertiesEditionElement(pec).model.required)]true[else]false[/if]);
		[editor.name.toJavaIdentifier().trim()/] = new EENumViewer(parent);
		GridData [editor.name.toJavaIdentifier().trim()/]Data = new GridData(GridData.FILL_HORIZONTAL);
		[editor.name.toJavaIdentifier().trim()/].getCombo().setLayoutData([editor.name.toJavaIdentifier().trim()/]Data);
		[editor.name.toJavaIdentifier().trim()/].addSelectionChangedListener(new ISelectionChangedListener() {

			/**
			 * {@inheritDoc}
			 * 
			 * @see org.eclipse.jface.viewers.ISelectionChangedListener#selectionChanged(org.eclipse.jface.viewers.SelectionChangedEvent)
			 */
			public void selectionChanged(SelectionChangedEvent event) {
				if (propertiesEditionComponent != null)
					propertiesEditionComponent.firePropertiesChanged(new PathedPropertiesEditionEvent([editor.editionPart().trim()/].this, [editor.editorID()/], PathedPropertiesEditionEvent.COMMIT, PathedPropertiesEditionEvent.SET, null, get[editor.name.toUpperFirst()/]()));
			}
			
		});
		FormUtils.createHelpButton(widgetFactory, parent, [editor.helpText(pec)/], null); //$NON-NLS-1$
	}
[/template]

[template public implementation(editor : ElementEditor, pec : PropertiesEditionComponent) ? (not (editor.oclIsTypeOf(SpecificElementEditor)) and editor.representation.name = 'MultiValuedEditor')]
	create[editor.name.toJavaClassifier().trim()/]MultiValuedEditor(widgetFactory, [editor.widgetContainer().trim()/]);
[/template]

[template public additionalImplementation(editor : ElementEditor, pec : PropertiesEditionComponent, inputPEC: PropertiesEditionComponent) ? (not (editor.oclIsTypeOf(SpecificElementEditor)) and editor.representation.name = 'MultiValuedEditor')]
	private void create[editor.name.toJavaClassifier().trim()/]MultiValuedEditor(FormToolkit widgetFactory, Composite parent) {
		[editor.name.toJavaIdentifier().trim()/]Text = widgetFactory.createText(parent, "", SWT.READ_ONLY); //$NON-NLS-1$
		GridData [editor.name.toJavaIdentifier().trim()/]TextData = new GridData(GridData.FILL_HORIZONTAL);
		[editor.name.toJavaIdentifier().trim()/]TextData.horizontalSpan = 2;
		[editor.name.toJavaIdentifier().trim()/]Text.setLayoutData([editor.name.toJavaIdentifier().trim()/]TextData);
		edit[editor.name.toJavaClassifier().trim()/] = widgetFactory.createButton(parent, [pec.editionContext().messagesProvider()/].[editor.editorKey(editor.owningView()).trim()/], SWT.NONE);
		GridData edit[editor.name.toJavaClassifier().trim()/]Data = new GridData();
		edit[editor.name.toJavaClassifier().trim()/].setLayoutData(edit[editor.name.toJavaClassifier().trim()/]Data);
		edit[editor.name.toJavaClassifier().trim()/].addSelectionListener(new SelectionAdapter() {

			/*
			 * (non-Javadoc)
			 * 
			 * @see org.eclipse.swt.events.SelectionAdapter#widgetSelected(org.eclipse.swt.events.SelectionEvent)
			 */
			public void widgetSelected(SelectionEvent e) {
				FeatureEditorDialog dialog = new FeatureEditorDialog(view.getShell(), new AdapterFactoryLabelProvider(adapterFactory), [pec.model.name.toJavaIdentifier().trim()/], [editor.propertiesEditionElement(pec).metamodelGetter().trim()/].getEType(), 
						[editor.name.toJavaIdentifier().trim()/]List, "[pec.model.name/]", null, false, false); //$NON-NLS-1$
						
				if (dialog.open() == Window.OK) {
					[editor.name.toJavaIdentifier().trim()/]List = dialog.getResult();
					if ([editor.name.toJavaIdentifier().trim()/]List == null) {
						[editor.name.toJavaIdentifier().trim()/]List = new BasicEList();
					}
					[editor.name.toJavaIdentifier().trim()/]Text.setText([editor.name.toJavaIdentifier().trim()/]List.toString());
					setHasChanged(true);
				}
			}
		});
	}
[/template]

[template public additionalImplementation(editor : ElementEditor, pec : PropertiesEditionComponent, inputPEC: PropertiesEditionComponent) ? (not (editor.oclIsTypeOf(SpecificElementEditor)) and editor.representation.name = 'AdvancedReferencesTable')]
	private void create[editor.name.toJavaIdentifier().trim().toUpperFirst()/]ReferencesTable(FormToolkit widgetFactory, Composite parent) {	
		this.[editor.name.toJavaIdentifier().trim()/] = new ReferencesTable<[editor.propertiesEditionElement(pec).model.eType.name/]>([inputPEC.editionContext().messagesProvider().trim()/].[editor.editorKey(editor.owningView()).trim()/], new ReferencesTableListener<[editor.propertiesEditionElement(pec).model.eType.name/]>() {
			public void handleAdd() {				
				ViewerFilter [editor.name.toJavaIdentifier().trim()/]Filter = new EObjectFilter([editor.viewPackage(pec)/].eINSTANCE.get[editor.propertiesEditionElement(pec).model.eType.name/]());
				ViewerFilter viewerFilter = new ViewerFilter() {					
					public boolean select(Viewer viewer, Object parentElement, Object element) {
						if (element instanceof EObject)
							return (![editor.name.toJavaIdentifier().trim()/]EditUtil.contains((EObject)element));
						return false;				
					}
				};				
				ViewerFilter['[]'/] filters = { [editor.name.toJavaIdentifier().trim()/]Filter, viewerFilter };		
				TabElementTreeSelectionDialog<[editor.propertiesEditionElement(pec).model.eType.name/]> dialog = new TabElementTreeSelectionDialog<[editor.propertiesEditionElement(pec).model.eType.name/]>(view.getShell(), resourceSet, filters, 
				"[editor.propertiesEditionElement(pec).model.eType.name/]", [editor.viewPackage(pec)/].eINSTANCE.get[editor.propertiesEditionElement(pec).model.eType.name/]()) {
					@Override
					public void process(IStructuredSelection selection) {						
						for (Iterator<?> iter = selection.iterator(); iter.hasNext();) {
							EObject elem = (EObject) iter.next();
							if (![editor.name.toJavaIdentifier().trim()/]EditUtil.getVirtualList().contains(elem))
								[editor.name.toJavaIdentifier().trim()/]EditUtil.addElement(elem);
							propertiesEditionComponent.firePropertiesChanged(new PathedPropertiesEditionEvent([editor.editionPart().trim()/].this, [editor.editorID()/],
								PathedPropertiesEditionEvent.COMMIT, PathedPropertiesEditionEvent.ADD, null, elem));
						}
						[editor.name.toJavaIdentifier().trim()/].refresh();												
					}
				};
				dialog.open();
			}
			public void handleEdit([editor.propertiesEditionElement(pec).model.eType.name/] element) { edit[editor.name.toJavaIdentifier().trim().toUpperFirst()/](element); }
			public void handleMove([editor.propertiesEditionElement(pec).model.eType.name/] element, int oldIndex, int newIndex) { move[editor.name.toJavaClassifier().trim()/](element, oldIndex, newIndex); }
			public void handleRemove([editor.propertiesEditionElement(pec).model.eType.name/] element) { removeFrom[editor.name.toJavaIdentifier().trim().toUpperFirst()/](element); }
			public void navigateTo([editor.propertiesEditionElement(pec).model.eType.name/] element) { System.out.println("---> navigateTo"); }
		});
		this.[editor.name.toJavaIdentifier().trim()/].createControls(parent, widgetFactory);
		GridData [editor.name.toJavaIdentifier().trim()/]Data = new GridData(GridData.FILL_HORIZONTAL);
		[editor.name.toJavaIdentifier().trim()/]Data.horizontalSpan = 3;
		this.[editor.name.toJavaIdentifier().trim()/].setLayoutData([editor.name.toJavaIdentifier().trim()/]Data);
		this.[editor.name.toJavaIdentifier().trim()/].disableMove();
	}
	
	/**
	 * 
	 */
	private void move[editor.name.toJavaClassifier().trim()/]([editor.propertiesEditionElement(pec).model.eType.name/] element, int oldIndex, int newIndex) {
		[if (editor.propertiesEditionElement(pec).model.eType.oclIsTypeOf(ecore::EClass) and not editor.propertiesEditionElement(pec).model.eType.oclAsType(ecore::EClass).abstract)]
				
		EObject editedElement = [editor.name.toJavaIdentifier().trim()/]EditUtil.foundCorrespondingEObject(element);
		[editor.name.toJavaIdentifier().trim()/]EditUtil.moveElement(element, oldIndex, newIndex);
		[editor.name.toJavaIdentifier().trim()/].refresh();
		propertiesEditionComponent.firePropertiesChanged(new PathedPropertiesEditionEvent([editor.editionPart().trim()/].this, [editor.editorID()/], PathedPropertiesEditionEvent.COMMIT, PathedPropertiesEditionEvent.MOVE, editedElement, newIndex));
	
		
		[/if]		
	}
	
	/**
	 * 
	 */
	private void removeFrom[editor.name.toJavaClassifier().trim()/]([editor.propertiesEditionElement(pec).model.eType.name/] element) {

		// [protected(' for the removeFrom'.concat(editor.name.toJavaClassifier().trim()).concat('() method body'))]

		EObject editedElement = [editor.name.toJavaIdentifier().trim()/]EditUtil.foundCorrespondingEObject(element);
		[editor.name.toJavaIdentifier().trim()/]EditUtil.removeElement(element);
		[editor.name.toJavaIdentifier().trim()/].refresh();
		propertiesEditionComponent.firePropertiesChanged(new PathedPropertiesEditionEvent([editor.editionPart().trim()/].this, [editor.editorID()/], PathedPropertiesEditionEvent.COMMIT, PathedPropertiesEditionEvent.REMOVE, null, editedElement));

		// [/protected]

	}

	/**
	 * 
	 */
	private void edit[editor.name.toJavaClassifier().trim()/]([editor.propertiesEditionElement(pec).model.eType.name/] element) {

		// [protected('edit'.concat(editor.name.toJavaClassifier().trim()).concat('() method body'))]
				 
		EObject editedElement = [editor.name.toJavaIdentifier().trim()/]EditUtil.foundCorrespondingEObject(element);
		IPropertiesEditionPolicyProvider policyProvider = PropertiesEditionPolicyProviderService.getInstance().getProvider(element);
		IPropertiesEditionPolicy editionPolicy = policyProvider	.getEditionPolicy(editedElement);
		if (editionPolicy != null) {
			EObject propertiesEditionObject = editionPolicy.getPropertiesEditionObject(new EObjectPropertiesEditionContext(null, element,resourceSet));
			if (propertiesEditionObject != null) {
				[editor.name.toJavaIdentifier().trim()/]EditUtil.putElementToRefresh(editedElement, propertiesEditionObject);
				[editor.name.toJavaIdentifier().trim()/].refresh();
				propertiesEditionComponent.firePropertiesChanged(new PathedPropertiesEditionEvent([editor.editionPart().trim()/].this, [editor.editorID()/], PathedPropertiesEditionEvent.COMMIT, PathedPropertiesEditionEvent.SET, editedElement, propertiesEditionObject));
			}
		}

		// [/protected]

	}
[/template]

[template public implementation(container : Container, pec : PropertiesEditionComponent) ? (container.representation.name = 'VerticalBox')]
		create[container.name.toJavaClassifier().trim()/]VBox(widgetFactory, [container.widgetContainer().trim()/]);	
[/template]

[template public additionalImplementation(container : Container, pec : PropertiesEditionComponent, inputPEC: PropertiesEditionComponent) ? (container.representation.name = 'VerticalBox')]
	private void create[container.name.toJavaClassifier().trim()/]VBox(FormToolkit widgetFactory, Composite parent) {
		Composite container = widgetFactory.createComposite(parent, SWT.NONE);
		GridLayout layout = new GridLayout();
		container.setLayout(layout);
		container.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true));	
		VerticalBox [container.name.toJavaClassifier().trim().toLowerFirst()/]VBox = new VerticalBox(container);
		
		//create sub figures
		[for (editor : ElementEditor | container.elements) ]
		[editor.implementation(pec)/]
		[/for]	
		
		container.pack();		
	}
[/template]

[template public implementation(container : Container, pec : PropertiesEditionComponent) ? (container.representation.name = 'HorizontalBox')]
		create[container.name.toJavaClassifier().trim()/]HBox(widgetFactory, [container.widgetContainer().trim()/]);	
[/template]

[template public additionalImplementation(container : Container, pec : PropertiesEditionComponent, inputPEC: PropertiesEditionComponent) ? (container.representation.name = 'HorizontalBox')]
	private void create[container.name.toJavaClassifier().trim()/]HBox(FormToolkit widgetFactory, Composite parent) {	
		Composite container = widgetFactory.createComposite(parent, SWT.NONE);
		GridLayout layout = new GridLayout();
		container.setLayout(layout);
		GridData gridData = new GridData(SWT.FILL, SWT.FILL, true, true);
		gridData.horizontalSpan=3;
		container.setLayoutData(gridData);		
		HorizontalBox [container.name.toJavaClassifier().trim().toLowerFirst()/]HBox = new HorizontalBox(container);
		
		[if (container.elements->select(representation.name='Checkbox')->notEmpty())]
		//Apply constraint for checkbox
		GridData constraint = new GridData(GridData.FILL_HORIZONTAL);		
		constraint.horizontalAlignment = GridData.BEGINNING;		
		[container.name.toJavaClassifier().trim().toLowerFirst()/]HBox.setLayoutData(constraint);
		[/if]
		
		//create sub figures
		[for (editor : ElementEditor | container.elements) ]		
		[editor.implementation(pec)/]
		[/for]
		
		container.pack();		
	}
[/template]

[template public implementation(editor : ElementEditor, pec : PropertiesEditionComponent) ? (not (editor.oclIsTypeOf(SpecificElementEditor)) and (editor.representation.name = 'TableComposition' or editor.representation.name = 'AdvancedTableComposition'))]
		create[editor.name.toJavaClassifier().trim()/]TableComposition(widgetFactory, [editor.widgetContainer().trim()/]);	
[/template]

[template public additionalImplementation(editor : ElementEditor, pec : PropertiesEditionComponent, inputPEC: PropertiesEditionComponent) ? (not (editor.oclIsTypeOf(SpecificElementEditor)) and editor.representation.name = 'TableComposition')]
	/**
	 * @param container
	 */
	private void create[editor.name.toJavaClassifier().trim()/]TableComposition(FormToolkit widgetFactory, Composite container) {
		Composite tableContainer = widgetFactory.createComposite(container, SWT.NONE);
		GridLayout tableContainerLayout = new GridLayout();
		GridData tableContainerData = new GridData(GridData.FILL_BOTH);
		tableContainerData.horizontalSpan = 3;
		tableContainer.setLayoutData(tableContainerData);
		tableContainerLayout.numColumns = 2;
		tableContainer.setLayout(tableContainerLayout);
		org.eclipse.swt.widgets.Table table[editor.name.toJavaClassifier().trim()/] = widgetFactory.createTable(tableContainer, SWT.FULL_SELECTION);
		table[editor.name.toJavaClassifier().trim()/].setHeaderVisible(true);
		GridData gd[editor.name.toJavaClassifier().trim()/] = new GridData();
		gd[editor.name.toJavaClassifier().trim()/].grabExcessHorizontalSpace = true;
		gd[editor.name.toJavaClassifier().trim()/].horizontalAlignment = GridData.FILL;
		gd[editor.name.toJavaClassifier().trim()/].grabExcessVerticalSpace = true;
		gd[editor.name.toJavaClassifier().trim()/].verticalAlignment = GridData.FILL;
		table[editor.name.toJavaClassifier().trim()/].setLayoutData(gd[editor.name.toJavaClassifier().trim()/]);
		table[editor.name.toJavaClassifier().trim()/].setLinesVisible(true);
			
		// [protected ('for columns definition for '.concat(editor.name.toJavaClassifier().trim()))]

		TableColumn name = new TableColumn(table[editor.name.toJavaClassifier().trim()/], SWT.NONE);
		name.setWidth(80);
		name.setText("Label"); //$NON-NLS-1$

		// [/protected]

		[editor.name.toJavaIdentifier().trim()/] = new TableViewer(table[editor.name.toJavaClassifier().trim()/]);
		[editor.name.toJavaIdentifier().trim()/].setContentProvider(new ArrayContentProvider());
		[editor.name.toJavaIdentifier().trim()/].setLabelProvider(new ITableLabelProvider() {

			//[protected ('for label provider definition for '.concat(editor.name.toJavaClassifier().trim()))]
	
			public String getColumnText(Object object, int columnIndex) {
				AdapterFactoryLabelProvider labelProvider = new AdapterFactoryLabelProvider(adapterFactory);
				if (object instanceof EObject) {
					switch (columnIndex) {
					case 0:
						return labelProvider.getText(object);
					}
				}
				return ""; //$NON-NLS-1$
			}

			public Image getColumnImage(Object element, int columnIndex) {
				return null;
			}

			public void addListener(ILabelProviderListener listener) {
			}

			public void dispose() {
			}

			public boolean isLabelProperty(Object element, String property) {
				return false;
			}

			public void removeListener(ILabelProviderListener listener) {
			}
			//[/protected]

		});
		[editor.name.toJavaIdentifier().trim()/].getTable().addListener(SWT.MouseDoubleClick, new Listener(){

			public void handleEvent(Event event) {
				edit[editor.name.toJavaClassifier().trim()/]();
			}
	
		});

		GridData [editor.name.toJavaIdentifier().trim()/]Data = new GridData(GridData.FILL_HORIZONTAL);
		[editor.name.toJavaIdentifier().trim()/]Data.minimumHeight = 120;
		[editor.name.toJavaIdentifier().trim()/]Data.heightHint = 120;
		[editor.name.toJavaIdentifier().trim()/].getTable().setLayoutData([editor.name.toJavaIdentifier().trim()/]Data);

		create[editor.name.toJavaClassifier().trim()/]Panel(widgetFactory, tableContainer);
	}

	/**
	 * @param container
	 */
	private Composite create[editor.name.toJavaClassifier().trim()/]Panel(FormToolkit widgetFactory, Composite container) {
		Composite [editor.name.toJavaIdentifier().trim()/]Panel = widgetFactory.createComposite(container, SWT.NONE);
		GridLayout [editor.name.toJavaIdentifier().trim()/]PanelLayout = new GridLayout();
		[editor.name.toJavaIdentifier().trim()/]PanelLayout.numColumns = 1;
		[editor.name.toJavaIdentifier().trim()/]Panel.setLayout([editor.name.toJavaIdentifier().trim()/]PanelLayout);
		Button add[editor.name.toJavaClassifier().trim()/] = widgetFactory.createButton([editor.name.toJavaIdentifier().trim()/]Panel, [inputPEC.editionContext().messagesProvider().trim()/].PropertiesEditionPart_AddTableViewerLabel, SWT.NONE);
		GridData add[editor.name.toJavaClassifier().trim()/]Data = new GridData(GridData.FILL_HORIZONTAL);
		add[editor.name.toJavaClassifier().trim()/].setLayoutData(add[editor.name.toJavaClassifier().trim()/]Data);
		add[editor.name.toJavaClassifier().trim()/].addSelectionListener(new SelectionAdapter() {

			/*
			 * (non-Javadoc)
			 * 
			 * @see org.eclipse.swt.events.SelectionAdapter#widgetSelected(org.eclipse.swt.events.SelectionEvent)
			 */
			public void widgetSelected(SelectionEvent e) {
				addTo[editor.name.toJavaClassifier().trim()/]();
			}
		});
		Button remove[editor.name.toJavaClassifier().trim()/] = widgetFactory.createButton([editor.name.toJavaIdentifier().trim()/]Panel, [inputPEC.editionContext().messagesProvider().trim()/].PropertiesEditionPart_RemoveTableViewerLabel, SWT.NONE);
		GridData remove[editor.name.toJavaClassifier().trim()/]Data = new GridData(GridData.FILL_HORIZONTAL);
		remove[editor.name.toJavaClassifier().trim()/].setLayoutData(remove[editor.name.toJavaClassifier().trim()/]Data);
		remove[editor.name.toJavaClassifier().trim()/].addSelectionListener(new SelectionAdapter() {

			/*
			 * (non-Javadoc)
			 * 
			 * @see org.eclipse.swt.events.SelectionAdapter#widgetSelected(org.eclipse.swt.events.SelectionEvent)
			 */
			public void widgetSelected(SelectionEvent e) {
				removeFrom[editor.name.toJavaClassifier().trim()/]();
			}

		});
		Button edit[editor.name.toJavaClassifier().trim()/] = widgetFactory.createButton([editor.name.toJavaIdentifier().trim()/]Panel, [inputPEC.editionContext().messagesProvider().trim()/].PropertiesEditionPart_EditTableViewerLabel, SWT.NONE);
		GridData edit[editor.name.toJavaClassifier().trim()/]Data = new GridData(GridData.FILL_HORIZONTAL);
		edit[editor.name.toJavaClassifier().trim()/].setLayoutData(edit[editor.name.toJavaClassifier().trim()/]Data);
		edit[editor.name.toJavaClassifier().trim()/].addSelectionListener(new SelectionAdapter() {

			/*
			 * (non-Javadoc)
			 * 
			 * @see org.eclipse.swt.events.SelectionAdapter#widgetSelected(org.eclipse.swt.events.SelectionEvent)
			 */
			public void widgetSelected(SelectionEvent e) {
				edit[editor.name.toJavaClassifier().trim()/]();
			}

		});
		return [editor.name.toJavaIdentifier().trim()/]Panel;
	}
	
	/**
	 * 
	 */
	private void addTo[editor.name.toJavaClassifier().trim()/]() {
	
		// [protected('addTo'.concat(editor.name.toJavaClassifier().trim()).concat('() method body'))]

	[if (editor.propertiesEditionElement(pec).model.eType.oclIsTypeOf(ecore::EClass) and not editor.propertiesEditionElement(pec).model.eType.oclAsType(ecore::EClass).abstract)]

		[editor.propertiesEditionElement(pec).model.eType.name/] eObject = [editor.propertiesEditionElement(pec).metamodelFactory()/].eINSTANCE.create[editor.propertiesEditionElement(pec).model.eType.name/]();
		IPropertiesEditionPolicyProvider policyProvider = PropertiesEditionPolicyProviderService.getInstance().getProvider(eObject);
		IPropertiesEditionPolicy editionPolicy = policyProvider.getEditionPolicy(eObject);
		if (editionPolicy != null) {
			EObject propertiesEditionObject = editionPolicy.getPropertiesEditionObject(new EObjectPropertiesEditionContext(propertiesEditionComponent, eObject,resourceSet));
			if (propertiesEditionObject != null) {
				[editor.name.toJavaIdentifier().trim()/]EditUtil.addElement(propertiesEditionObject);
				[editor.name.toJavaIdentifier().trim()/].refresh();
				propertiesEditionComponent.firePropertiesChanged(new PathedPropertiesEditionEvent([editor.editionPart().trim()/].this, [editor.editorID()/], PathedPropertiesEditionEvent.COMMIT, PathedPropertiesEditionEvent.ADD, null, propertiesEditionObject));
			}
		}
	
	[/if]
		
		// [/protected]
		
	}

	/**
	 * 
	 */
	private void removeFrom[editor.name.toJavaClassifier().trim()/]() {

		// [protected(' for the removeFrom'.concat(editor.name.toJavaClassifier().trim()).concat('() method body'))]

		if ([editor.name.toJavaIdentifier().trim()/].getSelection() instanceof IStructuredSelection) {
			IStructuredSelection selection = (IStructuredSelection) [editor.name.toJavaIdentifier().trim()/].getSelection();
			EObject editedElement = null;
			if (selection.getFirstElement() instanceof EObject) {
				EObject selectedElement = (EObject) selection.getFirstElement();
				editedElement = [editor.name.toJavaIdentifier().trim()/]EditUtil.foundCorrespondingEObject(selectedElement);
				[editor.name.toJavaIdentifier().trim()/]EditUtil.removeElement(selectedElement);
			}
			[editor.name.toJavaIdentifier().trim()/].refresh();
			propertiesEditionComponent.firePropertiesChanged(new PathedPropertiesEditionEvent([editor.editionPart().trim()/].this, [editor.editorID()/], PathedPropertiesEditionEvent.COMMIT, PathedPropertiesEditionEvent.REMOVE, null, editedElement));
		}

		// [/protected]

	}

	/**
	 * 
	 */
	private void edit[editor.name.toJavaClassifier().trim()/]() {

		// [protected('edit'.concat(editor.name.toJavaClassifier().trim()).concat('() method body'))]

		if ([editor.name.toJavaIdentifier().trim()/].getSelection() instanceof IStructuredSelection) {
			IStructuredSelection selection = (IStructuredSelection) [editor.name.toJavaIdentifier().trim()/].getSelection();
			if (selection.getFirstElement() instanceof EObject) {
				EObject selectedElement = (EObject) selection.getFirstElement();
				EObject editedElement = [editor.name.toJavaIdentifier().trim()/]EditUtil.foundCorrespondingEObject(selectedElement);
				IPropertiesEditionPolicyProvider policyProvider = PropertiesEditionPolicyProviderService.getInstance().getProvider(selectedElement);
				IPropertiesEditionPolicy editionPolicy = policyProvider	.getEditionPolicy(editedElement);
				if (editionPolicy != null) {
					EObject propertiesEditionObject = editionPolicy.getPropertiesEditionObject(new EObjectPropertiesEditionContext(null, selectedElement,resourceSet));
					if (propertiesEditionObject != null) {
						[editor.name.toJavaIdentifier().trim()/]EditUtil.putElementToRefresh(editedElement, propertiesEditionObject);
						[editor.name.toJavaIdentifier().trim()/].refresh();
						propertiesEditionComponent.firePropertiesChanged(new PathedPropertiesEditionEvent([editor.editionPart().trim()/].this, [editor.editorID()/], PathedPropertiesEditionEvent.COMMIT, PathedPropertiesEditionEvent.SET, editedElement, propertiesEditionObject));
					}
				}
			}
		}

		// [/protected]

	}
[/template]

[template public additionalImplementation(editor : ElementEditor, pec : PropertiesEditionComponent, inputPEC: PropertiesEditionComponent) ? (not (editor.oclIsTypeOf(SpecificElementEditor)) and editor.representation.name = 'AdvancedTableComposition')]
	/**
	 * @param container
	 */
	private void create[editor.name.toJavaClassifier().trim()/]TableComposition(FormToolkit widgetFactory, Composite parent) {
		this.[editor.name.toJavaIdentifier().trim()/] = new ReferencesTable<[editor.propertiesEditionElement(pec).model.eType.name/]>([inputPEC.editionContext().messagesProvider().trim()/].[editor.editorKey(editor.owningView()).trim()/], new ReferencesTableListener<[editor.propertiesEditionElement(pec).model.eType.name/]>() {			
			public void handleAdd() { addTo[editor.name.toJavaClassifier().trim()/]();}
			public void handleEdit([editor.propertiesEditionElement(pec).model.eType.name/] element) { edit[editor.name.toJavaClassifier().trim()/](element); }
			public void handleMove([editor.propertiesEditionElement(pec).model.eType.name/] element, int oldIndex, int newIndex) { move[editor.name.toJavaClassifier().trim()/](element, oldIndex, newIndex); }			
			public void handleRemove([editor.propertiesEditionElement(pec).model.eType.name/] element) { removeFrom[editor.name.toJavaClassifier().trim()/](element); }
			public void navigateTo([editor.propertiesEditionElement(pec).model.eType.name/] element) { System.out.println("---> navigateTo"); }
		});
		this.[editor.name.toJavaIdentifier().trim()/].createControls(parent, widgetFactory);
		GridData [editor.name.toJavaIdentifier().trim()/]Data = new GridData(GridData.FILL_HORIZONTAL);
		[editor.name.toJavaIdentifier().trim()/]Data.horizontalSpan = 3;
		this.[editor.name.toJavaIdentifier().trim()/].setLayoutData([editor.name.toJavaIdentifier().trim()/]Data);
	}
	
	/**
	 * 
	 */
	private void move[editor.name.toJavaClassifier().trim()/]([editor.propertiesEditionElement(pec).model.eType.name/] element, int oldIndex, int newIndex) {
		[if (editor.propertiesEditionElement(pec).model.eType.oclIsTypeOf(ecore::EClass) and not editor.propertiesEditionElement(pec).model.eType.oclAsType(ecore::EClass).abstract)]
				
		EObject editedElement = [editor.name.toJavaIdentifier().trim()/]EditUtil.foundCorrespondingEObject(element);
		[editor.name.toJavaIdentifier().trim()/]EditUtil.moveElement(element, oldIndex, newIndex);
		[editor.name.toJavaIdentifier().trim()/].refresh();
		propertiesEditionComponent.firePropertiesChanged(new PathedPropertiesEditionEvent([editor.editionPart().trim()/].this, [editor.editorID()/], PathedPropertiesEditionEvent.COMMIT, PathedPropertiesEditionEvent.MOVE, editedElement, newIndex));	
		
		[/if]		
	}
	
	/**
	 * 
	 */
	private void addTo[editor.name.toJavaClassifier().trim()/]() {
	
		// [protected('addTo'.concat(editor.name.toJavaClassifier().trim()).concat('() method body'))]
		
		[if (editor.propertiesEditionElement(pec).model.eType.oclIsTypeOf(ecore::EClass) and not editor.propertiesEditionElement(pec).model.eType.oclAsType(ecore::EClass).abstract)]
		
		[editor.propertiesEditionElement(pec).model.eType.name/] eObject = [editor.propertiesEditionElement(pec).metamodelFactory()/].eINSTANCE.create[editor.propertiesEditionElement(pec).model.eType.name/]();
		IPropertiesEditionPolicyProvider policyProvider = PropertiesEditionPolicyProviderService.getInstance().getProvider(eObject);
		IPropertiesEditionPolicy editionPolicy = policyProvider.getEditionPolicy(eObject);
		if (editionPolicy != null) {
			EObject propertiesEditionObject = editionPolicy.getPropertiesEditionObject(new EObjectPropertiesEditionContext(propertiesEditionComponent, eObject,resourceSet));
			if (propertiesEditionObject != null) {
				[editor.name.toJavaIdentifier().trim()/]EditUtil.addElement(propertiesEditionObject);
				[editor.name.toJavaIdentifier().trim()/].refresh();
				propertiesEditionComponent.firePropertiesChanged(new PathedPropertiesEditionEvent([editor.editionPart().trim()/].this, [editor.editorID()/], PathedPropertiesEditionEvent.COMMIT, PathedPropertiesEditionEvent.ADD, null, propertiesEditionObject));
			}
		}
		
		[/if]
			
		// [/protected]
		
	}

	/**
	 * 
	 */
	private void removeFrom[editor.name.toJavaClassifier().trim()/]([editor.propertiesEditionElement(pec).model.eType.name/] element) {

		// [protected(' for the removeFrom'.concat(editor.name.toJavaClassifier().trim()).concat('() method body'))]

		EObject editedElement = [editor.name.toJavaIdentifier().trim()/]EditUtil.foundCorrespondingEObject(element);
		[editor.name.toJavaIdentifier().trim()/]EditUtil.removeElement(element);
		[editor.name.toJavaIdentifier().trim()/].refresh();
		propertiesEditionComponent.firePropertiesChanged(new PathedPropertiesEditionEvent([editor.editionPart().trim()/].this, [editor.editorID()/], PathedPropertiesEditionEvent.COMMIT, PathedPropertiesEditionEvent.REMOVE, null, editedElement));

		// [/protected]

	}

	/**
	 * 
	 */
	private void edit[editor.name.toJavaClassifier().trim()/]([editor.propertiesEditionElement(pec).model.eType.name/] element) {

		// [protected('edit'.concat(editor.name.toJavaClassifier().trim()).concat('() method body'))]
				 
		EObject editedElement = [editor.name.toJavaIdentifier().trim()/]EditUtil.foundCorrespondingEObject(element);
		IPropertiesEditionPolicyProvider policyProvider = PropertiesEditionPolicyProviderService.getInstance().getProvider(element);
		IPropertiesEditionPolicy editionPolicy = policyProvider	.getEditionPolicy(editedElement);
		if (editionPolicy != null) {
			EObject propertiesEditionObject = editionPolicy.getPropertiesEditionObject(new EObjectPropertiesEditionContext(null, element,resourceSet));
			if (propertiesEditionObject != null) {
				[editor.name.toJavaIdentifier().trim()/]EditUtil.putElementToRefresh(editedElement, propertiesEditionObject);
				[editor.name.toJavaIdentifier().trim()/].refresh();
				propertiesEditionComponent.firePropertiesChanged(new PathedPropertiesEditionEvent([editor.editionPart().trim()/].this, [editor.editorID()/], PathedPropertiesEditionEvent.COMMIT, PathedPropertiesEditionEvent.SET, editedElement, propertiesEditionObject));
			}
		}

		// [/protected]

	}
[/template]

