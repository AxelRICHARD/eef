[comment 
 *******************************************************************************
 * Copyright (c) 2008-2009 Obeo.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Obeo - initial API and implementation
 *******************************************************************************
 /]
[module viewGettersSetters('http://www.eclipse.org/emf/eef/views/1.0.0')/]

[import common/]
[import naming/]

[comment ====== View getters for declaration ====== /]
[template public getterForSubViewDeclaration(view : View)]
[view.getterForSubViewSignatureDocumentation()/]
	[view.getterForSubViewSignature()/];
[/template]

[template public getterForReferencedViewDeclaration(view : View)]
[view.getterForReferencedViewSignatureDocumentation()/]
	[view.getterForReferencedViewSignature()/];
[/template]

[comment ====== Widgets View getters for declaration ====== /]
[template public getterDeclaration(elementEditor : ElementEditor) ? (elementEditor.representationName('ReferencesTable') or elementEditor.representationName('AdvancedReferencesTable'))]
[elementEditor.getterAddSignatureDocumentation()/]
[elementEditor.getterAddSignature()/];

[elementEditor.getterRemoveSignatureDocumentation()/]
[elementEditor.getterRemoveSignature()/];

[elementEditor.getterTableListSignatureDocumentation()/]
[elementEditor.getterTableListSignature()/];
[/template]

[template public getterDeclaration(elementEditor : ElementEditor) ? (elementEditor.representationName('TableComposition') or elementEditor.representationName('AdvancedTableComposition'))]
[elementEditor.getterAddSignatureDocumentation()/]
[elementEditor.getterAddSignature()/];

[elementEditor.getterRemoveSignatureDocumentation()/]
[elementEditor.getterRemoveSignature()/];

[elementEditor.getterMoveSignatureDocumentation()/]
[elementEditor.getterMoveSignature()/];

[elementEditor.getterEditSignatureDocumentation()/]
[elementEditor.getterEditSignature()/];

[elementEditor.getterTableListSignatureDocumentation()/]
[elementEditor.getterTableListSignature()/];
[/template]

[template public getterDeclaration(elementEditor : ElementEditor)]
[elementEditor.getterSignatureDocumentation()/]
[elementEditor.getterSignature()/];
[/template]

[comment ====== Signatures ====== /]
[template public getterForSubViewSignature(view : View)]
	public IPropertiesEditionPart get[view.name.toJavaClassifier()/]SubView()
[/template]

[template public getterForReferencedViewSignature(view : View)]
public IPropertiesEditionPart get[view.name.toJavaClassifier()/]ReferencedView()
[/template]

[template public getterSignature(elementEditor : ElementEditor)]
	public [elementEditor.toJavaType().trim()/] [elementEditor.viewCompletePackageGetter()/]
[/template]

[template public getterAddSignature(elementEditor : ElementEditor)]
	public List [elementEditor.viewPackageGetter()/]ToAdd()
[/template]

[template public getterRemoveSignature(elementEditor : ElementEditor)]
	public List [elementEditor.viewPackageGetter()/]ToRemove()
[/template]

[template public getterMoveSignature(elementEditor : ElementEditor)]
	public List [elementEditor.viewPackageGetter()/]ToMove()
[/template]

[template public getterEditSignature(elementEditor : ElementEditor)]
	public Map [elementEditor.viewPackageGetter()/]ToEdit()
[/template]

[template public getterTableListSignature(elementEditor : ElementEditor)]
	public List [elementEditor.viewPackageGetter()/]Table()
[/template]

[template public getterForSubViewSignatureDocumentation(view : View)]
	/**
	 * @return the [view.name/] SubView
	 */
[/template]

[template public getterForReferencedViewSignatureDocumentation(view : View)]
/**
	 * @return the [view.name/] referenced view
	 */
[/template]

[template public getterSignatureDocumentation(elementEditor : ElementEditor)]
	/**
	 * @return the [elementEditor.name/]
	 */
[/template]

[template public getterAddSignatureDocumentation(elementEditor : ElementEditor)]
	/**
	 * @return the [elementEditor.name/] to add
	 */
[/template]

[template public getterRemoveSignatureDocumentation(elementEditor : ElementEditor)]
	/**
	 * @return the [elementEditor.name/] to remove
	 */
[/template]

[template public getterMoveSignatureDocumentation(elementEditor : ElementEditor)]
	/**
	 * @return the [elementEditor.name/] to move
	 */
[/template]

[template public getterEditSignatureDocumentation(elementEditor : ElementEditor)]
	/**
	 * @return the [elementEditor.name/] to edit
	 */
[/template]

[template public getterTableListSignatureDocumentation(elementEditor : ElementEditor)]
	/**
	 * @return the current [elementEditor.name/]
	 */
[/template]

[comment ===== error message handling methods ======= /]
[template public setMessageDeclaration(elementEditor : ElementEditor) ? (elementEditor.representationName('Text') or elementEditor.representationName('Textarea'))]
[elementEditor.setMessageSignature()/];
[/template]

[template public unsetMessageDeclaration(elementEditor : ElementEditor) ? (elementEditor.representationName('Text') or elementEditor.representationName('Textarea'))]
[elementEditor.unsetMessageSignature()/];
[/template]

[template public setMessageSignature(elementEditor : ElementEditor)]
	public void setMessageFor[elementEditor.name.toJavaClassifier()/](String msg, int msgLevel)
[/template]

[template public unsetMessageSignature(elementEditor : ElementEditor)]
	public void unsetMessageFor[elementEditor.name.toJavaClassifier()/]()
[/template]

[template public setMessageImplementation(elementEditor : ElementEditor, fullInterfacePath : String) ? (elementEditor.representationName('Text') or elementEditor.representationName('Textarea'))]
[elementEditor.setMessageSignature()/] {
		messageManager.addMessage("[elementEditor.name.toJavaClassifier()/]_key", msg, null, msgLevel, [elementEditor.name.toJavaIdentifier()/]);
	}
[/template]

[comment delegate implementation for ViewReference/]
[template public setMessageImplementationDelegate(elementEditor : ElementEditor, fullInterfacePath : String, referencedView : View) ? (elementEditor.representationName('Text') or elementEditor.representationName('Textarea'))]
[elementEditor.setMessageSignature()/] {
		[referencedView.name.toJavaClassifier().toLowerFirst()/]PropertiesEditionPart.setMessageFor[elementEditor.name.toJavaClassifier()/](msg, msgLevel);
	}
[/template]

[template public unsetMessageImplementation(elementEditor : ElementEditor, fullInterfacePath : String) ? (elementEditor.representationName('Text') or elementEditor.representationName('Textarea'))]
[elementEditor.unsetMessageSignature()/] {
		messageManager.removeMessage("[elementEditor.name.toJavaClassifier()/]_key", [elementEditor.name.toJavaIdentifier()/]);
	}
[/template]

[comment delegate implementation for ViewReference/]
[template public unsetMessageImplementationDelegate(elementEditor : ElementEditor, fullInterfacePath : String, referencedView : View) ? (elementEditor.representationName('Text') or elementEditor.representationName('Textarea'))]
[elementEditor.unsetMessageSignature()/] {
		[referencedView.name.toJavaIdentifier()/]PropertiesEditionPart.unsetMessageFor[elementEditor.name.toJavaClassifier()/]();
	}
[/template]

[comment ====== Widgets View setters for declaration ====== /]
[template public setterDeclaration(elementEditor : ElementEditor) ? (elementEditor.representationName('ReferencesTable') or elementEditor.representationName('AdvancedReferencesTable') or elementEditor.representationName('TableComposition') or elementEditor.representationName('AdvancedTableComposition'))]
[elementEditor.initSignatureDocumentation()/]
[elementEditor.initSignature()/];

[elementEditor.updateSignatureDocumentation()/]
[elementEditor.updateSignature()/];

[elementEditor.addFilterSignatureDocumentation()/]
[elementEditor.addFilterSignature()/];

[elementEditor.addBusinessFilterSignatureDocumentation()/]
[elementEditor.addBusinessFilterSignature()/];
[/template]

[template public setterDeclaration(elementEditor : ElementEditor) ? (elementEditor.representationName('EMFComboViewer') or elementEditor.representationName('Radio'))]
[elementEditor.initSignatureDocumentation()/]
[elementEditor.initSignature()/];

[elementEditor.setterSignatureDocumentation()/]
[elementEditor.setterSignature()/];
[/template]

[template public setterDeclaration(elementEditor : ElementEditor) ? (elementEditor.representationName('EObjectFlatComboViewer') or elementEditor.representationName('AdvancedEObjectFlatComboViewer'))]
[elementEditor.initSignatureDocumentation()/]
[elementEditor.initSignature()/];

[elementEditor.setterSignatureDocumentation()/]
[elementEditor.setterSignature()/];

[elementEditor.addFilterSignatureDocumentation()/]
[elementEditor.addFilterSignature()/];

[elementEditor.addBusinessFilterSignatureDocumentation()/]
[elementEditor.addBusinessFilterSignature()/];
[/template]

[template public setterDeclaration(elementEditor : ElementEditor) ? (elementEditor.representationName('Combo'))]
[elementEditor.initSignatureDocumentation()/]
[elementEditor.initSignature()/];

[elementEditor.setterSignatureDocumentation()/]
[elementEditor.setterSignature()/];

[elementEditor.addFilterSignatureDocumentation()/]
[elementEditor.addFilterSignature()/];
[/template]

[template public setterDeclaration(elementEditor : ElementEditor)]
[elementEditor.setterSignatureDocumentation()/]
[elementEditor.setterSignature()/];
[/template]

[template public setterSignature(elementEditor : ElementEditor)]
	public void [elementEditor.viewCompletePackageSetter()/]
[/template]

[template public updateSignature(elementEditor : ElementEditor)]
	public void update[elementEditor.viewPackageSignature()/](EObject newValue)
[/template]

[template public initSignature(elementEditor : ElementEditor) ? (elementEditor.representationName('EMFComboViewer') or elementEditor.representationName('Radio'))]
	public void init[elementEditor.viewPackageSignature()/](EEnum eenum, Enumerator current)
[/template]

[template public initSignature(elementEditor : ElementEditor) ? (elementEditor.representationName('EObjectFlatComboViewer') or elementEditor.representationName('AdvancedEObjectFlatComboViewer') or elementEditor.representationName('Combo'))]
	public void init[elementEditor.viewPackageSignature()/](ResourceSet allResources, EObject current)
[/template]

[template public initSignature(elementEditor : ElementEditor) ? (elementEditor.representationName('ReferencesTable') or elementEditor.representationName('AdvancedReferencesTable') or elementEditor.representationName('TableComposition') or elementEditor.representationName('AdvancedTableComposition'))]
	public void init[elementEditor.viewPackageSignature()/](EObject current, EReference containingFeature, EReference feature)
[/template]

[template public setterSignatureDocumentation(elementEditor : ElementEditor)]
	/**
	 * Defines a new [elementEditor.name/]
	 * @param newValue the new [elementEditor.name/] to set
	 */
[/template]

[template public updateSignatureDocumentation(elementEditor : ElementEditor)]
	/**
	 * Update the [elementEditor.name/]
	 * @param newValue the [elementEditor.name/] to update
	 */
[/template]

[template public initSignatureDocumentation(elementEditor : ElementEditor) ? (elementEditor.representationName('EMFComboViewer') or elementEditor.representationName('Radio'))]
	/**
	 * Init the [elementEditor.name/]
	 * @param eenum the enum to manage
	 * @param current the current value
	 */
[/template]

[template public initSignatureDocumentation(elementEditor : ElementEditor) ? (elementEditor.representationName('Combo'))]
	/**
	 * Init the [elementEditor.name/]
	 * @param eClass the eClass to manage
	 * @param current the current value
	 */
[/template]

[template public initSignatureDocumentation(elementEditor : ElementEditor) ? (elementEditor.representationName('EObjectFlatComboViewer') or elementEditor.representationName('AdvancedEObjectFlatComboViewer'))]
	/**
	 * Init the [elementEditor.name/]
	 * @param allResources the ResourceSet where the widget have to process
	 * @param current the current value
	 */
[/template]

[template public initSignatureDocumentation(elementEditor : ElementEditor) ? (elementEditor.representationName('ReferencesTable') or elementEditor.representationName('AdvancedReferencesTable') or elementEditor.representationName('TableComposition') or elementEditor.representationName('AdvancedTableComposition'))]
	/**
	 * Init the [elementEditor.name/]
	 * @param current the current value
	 * @param containgFeature the feature where to navigate if necessary
	 * @param feature the feature to manage
	 */
[/template]

[template public addFilterSignatureDocumentation(elementEditor : ElementEditor)]
	/**
	 * Adds the given filter to the [elementEditor.name/] edition editor.
	 * 
	 * @param filter
	 *            a viewer filter
	 * @see org.eclipse.jface.viewers.StructuredViewer#addFilter(ViewerFilter)
	 */
[/template]

[template public addFilterSignature(elementEditor : ElementEditor)]
	public void addFilterTo[elementEditor.viewPackageSignature()/](ViewerFilter filter)
[/template]

[template public addBusinessFilterSignatureDocumentation(elementEditor : ElementEditor)]
	/**
	 * Adds the given filter to the [elementEditor.name/] edition editor.
	 * 
	 * @param filter
	 *            a viewer filter
	 * @see org.eclipse.jface.viewers.StructuredViewer#addFilter(ViewerFilter)
	 */
[/template]

[template public addBusinessFilterSignature(elementEditor : ElementEditor)]
	public void addBusinessFilterTo[elementEditor.viewPackageSignature()/](ViewerFilter filter)
[/template]

[comment ====== Widgets getter implementation ====== /]
[template public getterImplementation(elementEditor : ElementEditor, fullInterfacePath : String) ? (elementEditor.representationName('ReferencesTable') or elementEditor.representationName('AdvancedReferencesTable'))]
[getterAddSignatureDocumentationImplementation(elementEditor, fullInterfacePath)/]
[elementEditor.getterAddSignatureImplementation()/]

[getterRemoveSignatureDocumentationImplementation(elementEditor, fullInterfacePath)/]
[elementEditor.getterRemoveSignatureImplementation()/]

[getterTableListSignatureDocumentationImplementation(elementEditor, fullInterfacePath)/]
[elementEditor.getterTableListSignatureImplementation()/]
[/template]

[template public getterImplementation(elementEditor : ElementEditor, fullInterfacePath : String) ? (elementEditor.representationName('TableComposition') or elementEditor.representationName('AdvancedTableComposition'))]
[getterAddSignatureDocumentationImplementation(elementEditor, fullInterfacePath)/]
[elementEditor.getterAddSignatureImplementation()/]

[getterRemoveSignatureDocumentationImplementation(elementEditor, fullInterfacePath)/]
[elementEditor.getterRemoveSignatureImplementation()/]

[getterEditSignatureDocumentationImplementation(elementEditor, fullInterfacePath)/]
[elementEditor.getterEditSignatureImplementation()/]

[getterMoveSignatureDocumentationImplementation(elementEditor, fullInterfacePath)/]
[elementEditor.getterMoveSignatureImplementation()/]

[getterTableListSignatureDocumentationImplementation(elementEditor, fullInterfacePath)/]
[elementEditor.getterTableListSignatureImplementation()/]
[/template]

[template public getterImplementation(elementEditor : ElementEditor, fullInterfacePath : String)]
[getterSignatureDocumentationImplementation(elementEditor, fullInterfacePath)/]
[elementEditor.getterSignatureImplementation()/]
[/template]

[comment delegate implementation for SubView/]
[template public getterForSubViewImplementationDelegate(view : View, fullInterfacePath : String)]
[view.getterForSubViewSignatureDocumentationImplementation(fullInterfacePath)/]
		[view.getterForSubViewSignature()/] {
			return (IPropertiesEditionPart) [view.pepInterface().toLowerFirst()/];
		}
[/template]

[comment delegate implementation for ViewReference/]
[template public getterForReferencedViewImplementation(view : View, fullInterfacePath : String)]
[view.getterForReferencedViewSignatureDocumentationImplementation(fullInterfacePath)/]
		[view.getterForReferencedViewSignature()/] {
			return (IPropertiesEditionPart) [view.pepInterface().toLowerFirst()/];
		}
[/template]

[template public getterImplementationDelegate(elementEditor : ElementEditor, fullInterfacePath : String, referencedView : View) ? (elementEditor.representationName('ReferencesTable') or elementEditor.representationName('AdvancedReferencesTable'))]
[getterAddSignatureDocumentationImplementation(elementEditor, fullInterfacePath)/]
[elementEditor.getterAddSignature()/] {
		return [referencedView.name.toJavaIdentifier()/]PropertiesEditionPart.[elementEditor.viewPackageGetter()/]ToAdd();
	}

[getterRemoveSignatureDocumentationImplementation(elementEditor, fullInterfacePath)/]
[elementEditor.getterRemoveSignature()/] {
		return [referencedView.name.toJavaIdentifier()/]PropertiesEditionPart.[elementEditor.viewPackageGetter()/]ToRemove();
	}
[/template]

[template public getterImplementationDelegate(elementEditor : ElementEditor, fullInterfacePath : String, referencedView : View) ? (elementEditor.representationName('TableComposition') or elementEditor.representationName('AdvancedTableComposition'))]
[getterAddSignatureDocumentationImplementation(elementEditor, fullInterfacePath)/]
[elementEditor.getterAddSignature()/] {
		return [referencedView.name.toJavaIdentifier()/]PropertiesEditionPart.[elementEditor.viewPackageGetter()/]ToAdd();
	}

[getterRemoveSignatureDocumentationImplementation(elementEditor, fullInterfacePath)/]
[elementEditor.getterRemoveSignature()/] {
		return [referencedView.name.toJavaIdentifier()/]PropertiesEditionPart.[elementEditor.viewPackageGetter()/]ToRemove();
	}

[getterEditSignatureDocumentationImplementation(elementEditor, fullInterfacePath)/]
[elementEditor.getterEditSignature()/] {
		return [referencedView.name.toJavaIdentifier()/]PropertiesEditionPart.[elementEditor.viewPackageGetter()/]ToEdit();
	}

[getterTableListSignatureDocumentationImplementation(elementEditor, fullInterfacePath)/]
[elementEditor.getterTableListSignature()/] {
		return [referencedView.name.toJavaIdentifier()/]PropertiesEditionPart.[elementEditor.viewPackageGetter()/]Table();
	}
[/template]

[template public getterImplementationDelegate(elementEditor : ElementEditor, fullInterfacePath : String, referencedView : View)]
[getterSignatureDocumentationImplementation(elementEditor, fullInterfacePath)/]
[elementEditor.getterSignature()/] {
		return [referencedView.name.toJavaIdentifier()/]PropertiesEditionPart.[elementEditor.viewCompletePackageGetter()/];
	}
[/template]

[template public getterSignatureDocumentationImplementation(elementEditor : ElementEditor, fullInterfacePath : String)]
	/**
	 * {@inheritDoc}
	 * 
	 * @see [fullInterfacePath/]#[elementEditor.viewCompletePackageGetter()/]
	 */
[/template]

[template public getterForSubViewSignatureDocumentationImplementation(view : View, fullInterfacePath : String)]
	/**
	 * {@inheritDoc}
	 * 
	 * @see [fullInterfacePath/]#get[view.name.toJavaClassifier()/]SubView()
	 */
[/template]

[template public getterForReferencedViewSignatureDocumentationImplementation(view : View, fullInterfacePath : String)]
/**
	 * {@inheritDoc}
	 * 
	 * @see [fullInterfacePath/]#get[view.name.toJavaClassifier()/]ReferencedView()
	 */
[/template]

[template public getterAddSignatureDocumentationImplementation(elementEditor : ElementEditor, fullInterfacePath : String)]
	/**
	 * {@inheritDoc}
	 * 
	 * @see [fullInterfacePath/]#[elementEditor.viewPackageGetter()/]ToAdd()
	 */
[/template]

[template public getterRemoveSignatureDocumentationImplementation(elementEditor : ElementEditor, fullInterfacePath : String)]
	/**
	 * {@inheritDoc}
	 * 
	 * @see [fullInterfacePath/]#[elementEditor.viewPackageGetter()/]ToRemove()
	 */
[/template]

[template public getterMoveSignatureDocumentationImplementation(elementEditor : ElementEditor, fullInterfacePath : String)]
	/**
	 * {@inheritDoc}
	 * 
	 * @see [fullInterfacePath/]#[elementEditor.viewPackageGetter()/]ToMove()
	 */
[/template]

[template public getterEditSignatureDocumentationImplementation(elementEditor : ElementEditor, fullInterfacePath : String)]
	/**
	 * {@inheritDoc}
	 * 
	 * @see [fullInterfacePath/]#[elementEditor.viewPackageGetter()/]ToEdit()
	 */
[/template]

[template public getterTableListSignatureDocumentationImplementation(elementEditor : ElementEditor, fullInterfacePath : String)]
	/**
	 * {@inheritDoc}
	 * 
	 * @see [fullInterfacePath/]#[elementEditor.viewPackageGetter()/]Table()
	 */
[/template]

[template public getterSignatureImplementation(elementEditor : ElementEditor) ? (elementEditor.representationName('Text') or elementEditor.representationName('Textarea'))]
[elementEditor.getterSignature()/] {
		return [elementEditor.name.toJavaIdentifier()/].getText();
	}
[/template]

[template public getterSignatureImplementation(elementEditor : ElementEditor) ? (elementEditor.representationName('EMFComboViewer'))]
[elementEditor.getterSignature()/] {
		EEnumLiteral selection = (EEnumLiteral) ((StructuredSelection) [elementEditor.name.toJavaIdentifier()/].getSelection()).getFirstElement();
		return selection.getInstance();
	}
[/template]

[template public getterSignatureImplementation(elementEditor : ElementEditor) ? (elementEditor.representationName('EObjectFlatComboViewer'))]
[elementEditor.getterSignature()/] {
		if ([elementEditor.name.toJavaIdentifier()/].getSelection() instanceof StructuredSelection) {
			Object firstElement = ((StructuredSelection) [elementEditor.name.toJavaIdentifier()/].getSelection()).getFirstElement();
			if (firstElement instanceof EObject)
				return (EObject) firstElement;
		}
		return null;
	}
[/template]

[template public getterSignatureImplementation(elementEditor : ElementEditor) ? (elementEditor.representationName('AdvancedEObjectFlatComboViewer'))]
[elementEditor.getterSignature()/] {
		return [elementEditor.name.toJavaIdentifier()/].getSelection();
	}
[/template]

[template public getterSignatureImplementation(elementEditor : ElementEditor) ? (elementEditor.representationName('Checkbox'))]
[elementEditor.getterSignature()/] {
		return Boolean.valueOf([elementEditor.name.toJavaIdentifier()/].getSelection());
	}
[/template]

[template public getterSignatureImplementation(elementEditor : ElementEditor) ? (elementEditor.representationName('MultiValuedEditor'))]
[elementEditor.getterSignature()/] {
		return [elementEditor.name.toJavaIdentifier()/]List;
	}
[/template]

[template public getterSignatureImplementation(elementEditor : ElementEditor) ? (elementEditor.representationName('Radio'))]
[elementEditor.getterSignature()/] {
		return [elementEditor.name.toJavaIdentifier()/]RadioViewer.getSelection();
	}
[/template]

[template public getterSignatureImplementation(elementEditor : ElementEditor) ? (elementEditor.representationName('Combo'))]
[elementEditor.getterSignature()/] {
		if ([elementEditor.name.toJavaIdentifier()/].getSelection() instanceof StructuredSelection) {
			Object firstElement = ((StructuredSelection) [elementEditor.name.toJavaIdentifier()/].getSelection()).getFirstElement();
			if (firstElement instanceof EObject)
				return (EObject) firstElement;
		}
		return "";
	}
[/template]

[template public getterAddSignatureImplementation(elementEditor : ElementEditor)]
[elementEditor.getterAddSignature()/] {
		return [elementEditor.name.toJavaIdentifier()/]EditUtil.getElementsToAdd();
	}
[/template]

[template public getterRemoveSignatureImplementation(elementEditor : ElementEditor)]
[elementEditor.getterRemoveSignature()/] {
		return [elementEditor.name.toJavaIdentifier()/]EditUtil.getElementsToRemove();
	}
[/template]

[template public getterMoveSignatureImplementation(elementEditor : ElementEditor)]
[elementEditor.getterMoveSignature()/] {
		return [elementEditor.name.toJavaIdentifier()/]EditUtil.getElementsToMove();
	}
[/template]

[template public getterEditSignatureImplementation(elementEditor : ElementEditor)]
[elementEditor.getterEditSignature()/] {
		return [elementEditor.name.toJavaIdentifier()/]EditUtil.getElementsToRefresh();
	}
[/template]

[template public getterTableListSignatureImplementation(elementEditor : ElementEditor)]
[elementEditor.getterTableListSignature()/] {
		return [elementEditor.name.toJavaIdentifier()/]EditUtil.getVirtualList();
	}
[/template]

[template public getterSignatureImplementation(elementEditor : ElementEditor)]
[elementEditor.getterSignature()/] {
		//FIXME ERROR NO VALID CASE INTO template public getterSignatureImplementation(elementEditor : ElementEditor) in viewgetterSetters.mtl module
		return null;
	}
[/template]

[comment ====== Widgets setter implementation ====== /]
[template public setterImplementation(elementEditor : ElementEditor, fullInterfacePath : String) ? (elementEditor.representationName('ReferencesTable') or elementEditor.representationName('AdvancedReferencesTable') or elementEditor.representationName('TableComposition') or elementEditor.representationName('AdvancedTableComposition'))]
[initSignatureDocumentationImplementation(elementEditor, fullInterfacePath)/]
[elementEditor.initSignatureImplementation()/]

[updateSignatureDocumentationImplementation(elementEditor, fullInterfacePath)/]
[elementEditor.updateSignatureImplementation()/]

[addFilterSignatureDocumentationImplementation(elementEditor, fullInterfacePath)/]
[elementEditor.addFilterSignatureImplementation()/]

[addBusinessFilterSignatureDocumentationImplementation(elementEditor, fullInterfacePath)/]
[elementEditor.addBusinessFilterSignatureImplementation()/]
[/template]

[template public setterImplementationDelegate(elementEditor : ElementEditor, fullInterfacePath : String, referencedView : View) ? (elementEditor.representationName('ReferencesTable') or elementEditor.representationName('AdvancedReferencesTable') or elementEditor.representationName('TableComposition') or elementEditor.representationName('AdvancedTableComposition'))]
[initSignatureDocumentationImplementation(elementEditor, fullInterfacePath)/]
[elementEditor.initSignature()/] {
		[referencedView.name.toJavaIdentifier()/]PropertiesEditionPart.init[elementEditor.viewPackageSignature()/](current, containingFeature, feature);
	}

[updateSignatureDocumentationImplementation(elementEditor, fullInterfacePath)/]
[elementEditor.updateSignature()/] {
		[referencedView.name.toJavaIdentifier()/]PropertiesEditionPart.update[elementEditor.viewPackageSignature()/](newValue);
	}
[/template]

[template public setterImplementation(elementEditor : ElementEditor, fullInterfacePath : String) ? (elementEditor.representationName('EMFComboViewer') or elementEditor.representationName('Radio'))]
[initSignatureDocumentationImplementation(elementEditor, fullInterfacePath)/]
[elementEditor.initSignatureImplementation()/]

[setterSignatureDocumentationImplementation(elementEditor, fullInterfacePath)/]
[elementEditor.setterSignatureImplementation()/]
[/template]

[template public setterImplementationDelegate(elementEditor : ElementEditor, fullInterfacePath : String, referencedView : View) ? (elementEditor.representationName('EMFComboViewer') or elementEditor.representationName('Radio'))]
[initSignatureDocumentationImplementation(elementEditor, fullInterfacePath)/]
[elementEditor.initSignature()/] {
		[referencedView.name.toJavaIdentifier()/]PropertiesEditionPart.init[elementEditor.viewPackageSignature()/](eenum, current);	
	}

[setterSignatureDocumentationImplementation(elementEditor, fullInterfacePath)/]
[elementEditor.setterSignature()/] {
		[referencedView.name.toJavaIdentifier()/]PropertiesEditionPart.[elementEditor.viewPackageSetter()/](newValue);
	}
[/template]

[template public setterImplementation(elementEditor : ElementEditor, fullInterfacePath : String) ? (elementEditor.representationName('EObjectFlatComboViewer') or elementEditor.representationName('AdvancedEObjectFlatComboViewer'))]
[initSignatureDocumentationImplementation(elementEditor, fullInterfacePath)/]
[elementEditor.initSignatureImplementation()/]

[setterSignatureDocumentationImplementation(elementEditor, fullInterfacePath)/]
[elementEditor.setterSignatureImplementation()/]

[addFilterSignatureDocumentationImplementation(elementEditor, fullInterfacePath)/]
[elementEditor.addFilterSignatureImplementation()/]

[addBusinessFilterSignatureDocumentationImplementation(elementEditor, fullInterfacePath)/]
[elementEditor.addBusinessFilterSignatureImplementation()/]
[/template]

[template public setterImplementation(elementEditor : ElementEditor, fullInterfacePath : String) ? (elementEditor.representationName('Combo'))] 
[initSignatureDocumentationImplementation(elementEditor, fullInterfacePath)/]
[elementEditor.initSignatureImplementation()/]

[setterSignatureDocumentationImplementation(elementEditor, fullInterfacePath)/]
[elementEditor.setterSignatureImplementation()/]

[addFilterSignatureDocumentationImplementation(elementEditor, fullInterfacePath)/]
[elementEditor.addFilterSignatureImplementation()/]
[/template]

[template public setterImplementationDelegate(elementEditor : ElementEditor, fullInterfacePath : String, referencedView : View) ? (elementEditor.representationName('EObjectFlatComboViewer') or elementEditor.representationName('AdvancedEObjectFlatComboViewer') or elementEditor.representationName('Combo'))]
[initSignatureDocumentationImplementation(elementEditor, fullInterfacePath)/]
[elementEditor.initSignature()/] {
		[referencedView.name.toJavaIdentifier()/]PropertiesEditionPart.init[elementEditor.viewPackageSignature()/](allResources, current);	
	}

[setterSignatureDocumentationImplementation(elementEditor, fullInterfacePath)/]
[elementEditor.setterSignature()/] {
		[referencedView.name.toJavaIdentifier()/]PropertiesEditionPart.[elementEditor.viewPackageSetter()/](newValue);
	}
[/template]

[template public setterImplementation(elementEditor : ElementEditor, fullInterfacePath : String)]
[setterSignatureDocumentationImplementation(elementEditor, fullInterfacePath)/]
[elementEditor.setterSignatureImplementation()/]
[/template]

[template public setterImplementationDelegate(elementEditor : ElementEditor, fullInterfacePath : String, referencedView : View)]
[setterSignatureDocumentationImplementation(elementEditor, fullInterfacePath)/]
[elementEditor.setterSignature()/] {
		[referencedView.name.toJavaIdentifier()/]PropertiesEditionPart.[elementEditor.viewPackageSetter()/](newValue);
	}
[/template]

[comment Setters/]
[template public setterSignatureDocumentationImplementation(elementEditor : ElementEditor, fullInterfacePath : String)]
	/**
	 * {@inheritDoc}
	 * 
	 * @see [fullInterfacePath/]#[elementEditor.viewCompletePackageSetter()/]
	 */
[/template]

[template public setterSignatureImplementation(elementEditor : ElementEditor) ? (elementEditor.representationName('Text') or elementEditor.representationName('Textarea'))]
[elementEditor.setterSignature()/] {
		[elementEditor.name.toJavaIdentifier()/].setText(newValue);
	}
[/template]

[template public setterSignatureImplementation(elementEditor : ElementEditor) ? (elementEditor.representationName('EMFComboViewer'))]
[elementEditor.setterSignature()/] {
		[elementEditor.name.toJavaIdentifier()/].modelUpdating(new StructuredSelection(newValue));
	}
[/template]

[template public setterSignatureImplementation(elementEditor : ElementEditor) ? (elementEditor.representationName('EObjectFlatComboViewer'))]
[elementEditor.setterSignature()/] {
		if (newValue != null)
			[elementEditor.name.toJavaIdentifier()/].setSelection(new StructuredSelection(newValue));
		else
			[elementEditor.name.toJavaIdentifier()/].setSelection(new StructuredSelection("")); //$NON-NLS-1$
	}
[/template]

[template public setterSignatureImplementation(elementEditor : ElementEditor) ? (elementEditor.representationName('AdvancedEObjectFlatComboViewer'))]
[elementEditor.setterSignature()/] {
		if (newValue != null){
			[elementEditor.name.toJavaIdentifier()/].setSelection(newValue);
		}
	}
[/template]

[template public setterSignatureImplementation(elementEditor : ElementEditor) ? (elementEditor.representationName('Checkbox'))]
[elementEditor.setterSignature()/] {
		if (newValue != null) {
			[elementEditor.name.toJavaIdentifier()/].setSelection(newValue.booleanValue());
		} else {
			[elementEditor.name.toJavaIdentifier()/].setSelection(false);
		}
	}
[/template]

[template public setterSignatureImplementation(elementEditor : ElementEditor) ? (elementEditor.representationName('MultiValuedEditor'))]
[elementEditor.setterSignature()/] {
		[elementEditor.name.toJavaIdentifier()/]List = newValue;
		[elementEditor.name.toJavaIdentifier()/]Text.setText([elementEditor.name.toJavaIdentifier()/]List.toString());
	}
[/template]

[template public setterSignatureImplementation(elementEditor : ElementEditor) ? (elementEditor.representationName('Radio'))]
[elementEditor.setterSignature()/] {
		[elementEditor.name.toJavaIdentifier()/]RadioViewer.setSelection(newValue);
	}
[/template]

[template public setterSignatureImplementation(elementEditor : ElementEditor) ? (elementEditor.representationName('Combo'))]
[elementEditor.setterSignature()/] {
		if (newValue != null)
			[elementEditor.name.toJavaIdentifier()/].modelUpdating(new StructuredSelection(newValue));
		else
			[elementEditor.name.toJavaIdentifier()/].modelUpdating(new StructuredSelection(""));
	}
[/template]

[template public setterSignatureImplementation(elementEditor : ElementEditor)]
[elementEditor.setterSignature()/] {
		//FIXME ERROR NO VALID CASE INTO template public setterSignatureImplementation(elementEditor : ElementEditor) in viewGettersSetters.mtl module
	}
[/template]

[template public updateSignatureDocumentationImplementation(elementEditor : ElementEditor, fullInterfacePath : String)]
	/**
	 * {@inheritDoc}
	 * 
	 * @see [fullInterfacePath/]#update[elementEditor.viewPackageSignature()/](EObject newValue)
	 */
[/template]

[template public updateSignatureImplementation(elementEditor : ElementEditor)]
[elementEditor.updateSignature()/] {
		if([elementEditor.name.toJavaIdentifier()/]EditUtil!=null){
			[elementEditor.name.toJavaIdentifier()/]EditUtil.reinit(newValue);
			[elementEditor.name.toJavaIdentifier()/].refresh();
		}
	}
[/template]

[template public initSignatureDocumentationImplementation(elementEditor : ElementEditor, fullInterfacePath : String) ? (elementEditor.representationName('EMFComboViewer'))]
	/**
	 * {@inheritDoc}
	 * 
	 * @see [fullInterfacePath/]#init[elementEditor.viewPackageSignature()/](EEnum eenum, Enumerator current)
	 */
[/template]

[template public initSignatureImplementation(elementEditor : ElementEditor) ? (elementEditor.representationName('EMFComboViewer'))]
[elementEditor.initSignature()/] {
		[elementEditor.name.toJavaIdentifier()/].setInput(eenum.getELiterals());
		[elementEditor.name.toJavaIdentifier()/].modelUpdating(new StructuredSelection(current));
	}
[/template]

[template public initSignatureDocumentationImplementation(elementEditor : ElementEditor, fullInterfacePath : String) ? (elementEditor.representationName('Radio'))]
	/**
	 * {@inheritDoc}
	 * 
	 * @see [fullInterfacePath/]#init[elementEditor.viewPackageSignature()/](EEnum eenum, Enumerator current)
	 */
[/template]

[template public initSignatureImplementation(elementEditor : ElementEditor) ? (elementEditor.representationName('Radio'))]
[elementEditor.initSignature()/] {
		[elementEditor.name.toJavaIdentifier()/]RadioViewer.setInput(eenum.getELiterals());
		[elementEditor.name.toJavaIdentifier()/]RadioViewer.setSelection(current);
	}
[/template]

[template public initSignatureDocumentationImplementation(elementEditor : ElementEditor, fullInterfacePath : String) ? (elementEditor.representationName('EObjectFlatComboViewer') or elementEditor.representationName('AdvancedEObjectFlatComboViewer') or elementEditor.representationName('Combo'))]
	/**
	 * {@inheritDoc}
	 * 
	 * @see [fullInterfacePath/]#init[elementEditor.viewPackageSignature()/](ResourceSet allResources, EObject current)
	 */
[/template]

[template public initSignatureImplementation(elementEditor : ElementEditor) ? (elementEditor.representationName('EObjectFlatComboViewer') or elementEditor.representationName('AdvancedEObjectFlatComboViewer') or elementEditor.representationName('Combo'))]
[elementEditor.initSignature()/] {
		[elementEditor.name.toJavaIdentifier()/].setInput(allResources);
		if (current != null)
			[elementEditor.name.toJavaIdentifier()/].setSelection(new StructuredSelection(current));
	}
[/template]

[template public initSignatureDocumentationImplementation(elementEditor : ElementEditor, fullInterfacePath : String) ? (elementEditor.representationName('ReferencesTable') or elementEditor.representationName('AdvancedReferencesTable') or elementEditor.representationName('TableComposition') or elementEditor.representationName('AdvancedTableComposition'))]
	/**
	 * {@inheritDoc}
	 * 
	 * @see [fullInterfacePath/]#init[elementEditor.viewPackageSignature()/](EObject current, EReference containingFeature, EReference feature)
	 */
[/template]

[template public initSignatureImplementation(elementEditor : ElementEditor) ? (elementEditor.representationName('ReferencesTable') or elementEditor.representationName('AdvancedReferencesTable') or elementEditor.representationName('TableComposition') or elementEditor.representationName('AdvancedTableComposition'))]
[elementEditor.initSignature()/] {
		if (current.eResource() != null && current.eResource().getResourceSet() != null)
			this.resourceSet = current.eResource().getResourceSet();
		if (containingFeature != null)
			[elementEditor.name.toJavaIdentifier()/]EditUtil = new EMFListEditUtil(current, containingFeature, feature);
		else
			[elementEditor.name.toJavaIdentifier()/]EditUtil = new EMFListEditUtil(current, feature);
		this.[elementEditor.name.toJavaIdentifier()/].setInput([elementEditor.name.toJavaIdentifier()/]EditUtil.getVirtualList());
	}
[/template]

[comment ======== AddFilter signature implementation ======/]
[template public addFilterSignatureDocumentationImplementation(elementEditor : ElementEditor, fullInterfacePath : String)]
	/**
	 * {@inheritDoc}
	 * 
	 * @see [fullInterfacePath/]#addFilter[elementEditor.viewPackageSignature()/](ViewerFilter filter)
	 */
[/template]

[template public addFilterSignatureImplementation(elementEditor : ElementEditor) ? (elementEditor.representationName('ReferencesTable') or elementEditor.representationName('AdvancedReferencesTable') or elementEditor.representationName('TableComposition') or elementEditor.representationName('AdvancedTableComposition'))]
[elementEditor.addFilterSignature()/] {
		[elementEditor.name.toJavaIdentifier()/]Filters.add(filter);
	}
[/template]

[template public addFilterSignatureImplementation(elementEditor : ElementEditor)]
[elementEditor.addFilterSignature()/] {
		[elementEditor.name.toJavaIdentifier()/].addFilter(filter);
	}
[/template]

[comment ======== AddBusinessFilter signature implementation ======/]
[template public addBusinessFilterSignatureDocumentationImplementation(elementEditor : ElementEditor, fullInterfacePath : String)]
	/**
	 * {@inheritDoc}
	 * 
	 * @see [fullInterfacePath/]#addBusinessFilter[elementEditor.viewPackageSignature()/](ViewerFilter filter)
	 */
[/template]

[template public addBusinessFilterSignatureImplementation(elementEditor : ElementEditor) ? (elementEditor.representationName('EObjectFlatComboViewer') or elementEditor.representationName('AdvancedEObjectFlatComboViewer') or elementEditor.representationName('Combo'))]
[elementEditor.addBusinessFilterSignature()/] {
		[elementEditor.name.toJavaIdentifier()/].addBusinessRuleFilter(filter);
	}
[/template]


[template public addBusinessFilterSignatureImplementation(elementEditor : ElementEditor) ? (elementEditor.representationName('ReferencesTable') or elementEditor.representationName('AdvancedReferencesTable') or elementEditor.representationName('TableComposition') or elementEditor.representationName('AdvancedTableComposition'))]
[elementEditor.addBusinessFilterSignature()/] {
		[elementEditor.name.toJavaIdentifier()/]BusinessFilters.add(filter);
	}
[/template]

