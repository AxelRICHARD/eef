[comment 
 *******************************************************************************
 * Copyright (c) 2008-2009 Obeo.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Obeo - initial API and implementation
 *******************************************************************************
 /]
[module widgetFormImpl('http://www.eclipse.org/emf/eef/views/1.0.0', 'http://www.eclipse.org/emf/eef/components/1.0.0', 'http://www.eclipse.org/emf/2002/Ecore')/]

[import common /]
[import naming /]
[import viewCommon /]

[comment ===== Case DEFAULT = NEED TO BE THE LAST CHOICE ===== /]
[template public manageImports(widget : Widget, pec : PropertiesEditionComponent, view : View, basePackage : String) /]

[template public widgetDeclaration(editor : ElementEditor)]
// FIXME INVALID CASE you must override the template 'widgetDeclaration' for the case : [editor.name/].
[/template]

[template public implementation(editor : ViewElement)]
// FIXME INVALID CASE you must override the template 'implementation' for the case : [editor.name/].
[/template]

[template public additionalImplementation(editor : ViewElement, pec : PropertiesEditionComponent, inputPEC : PropertiesEditionComponent)]
// FIXME INVALID CASE you must override the template 'additionalImplementation' for the case : [editor.name/], [pec.name/], [inputPEC.name/].
[/template]

[comment ===== ViewReference support ===== /]
[template public widgetDeclaration(reference : ViewReference)]
private [reference.view.oclAsType(views::View).pepInterface()/] [reference.view.oclAsType(views::View).pepInterface().toLowerFirst()/];
[/template]

[template public widgetDeclarationForViewReference(view : View)]
[for (element : ViewElement | view.eAllContents(views::ViewReference))]
	[element.oclAsType(ViewReference).widgetDeclaration()/]
[/for]
[/template]

[template public implementation(reference : ViewReference)]
create[reference.view.name.toJavaClassifier()/](widgetFactory, parent);
[/template]

[template public additionalImplementation(reference : ViewReference, pec : PropertiesEditionComponent, inputPEC: PropertiesEditionComponent)][let referencedView : View = reference.view.oclAsType(views::View)]
	protected Composite create[reference.view.name.toJavaClassifier()/](FormToolkit widgetFactory, Composite container) {
		IPropertiesEditionPartProvider provider = PropertiesEditionPartProviderService.getInstance().getProvider([referencedView.owningViewsRepository().vrClass()/].class);
		[referencedView.pepInterface().toLowerFirst()/] = ([referencedView.pepInterface()/])provider.getPropertiesEditionPart([referencedView.editorID()/].class, [referencedView.owningViewsRepository().vrClass()/].FORM_KIND, propertiesEditionComponent);
		((IFormPropertiesEditionPart)[referencedView.pepInterface().toLowerFirst()/]).createControls(widgetFactory, container);
		return container;
	}
[/let][/template]

[comment ===== SubView support ===== /]
[template public widgetDeclaration(subView : View)]
private [subView.pepInterface()/] [subView.pepInterface().toLowerFirst()/];
[/template]

[template public widgetDeclarationForSubViews(view : View)]
[for (element : ViewElement | view.elements->select(oclIsKindOf(views::View)))]
	[element.oclAsType(View).widgetDeclaration()/]
[/for]
[/template]

[template public implementation(view : View)]
		if (propertiesEditionComponent.mustBeComposed([view.editorID()/].class, [view.owningViewsRepository().vrClass()/].FORM_KIND))
			create[view.name.toJavaClassifier()/]SubView(widgetFactory, parent);
[/template]

[template public additionalImplementation(view : View, pec : PropertiesEditionComponent, inputPEC: PropertiesEditionComponent)]
	protected Composite create[view.name.toJavaClassifier()/]SubView(FormToolkit widgetFactory, Composite container) {
		IPropertiesEditionPartProvider provider = PropertiesEditionPartProviderService.getInstance().getProvider([view.owningViewsRepository().vrClass()/].class);
		[view.pepInterface().toLowerFirst()/] = ([view.pepInterface()/])provider.getPropertiesEditionPart([view.editorID()/].class, [view.owningViewsRepository().vrClass()/].FORM_KIND, propertiesEditionComponent);
		((IFormPropertiesEditionPart)[view.pepInterface().toLowerFirst()/]).createControls(widgetFactory, container);
		return container;
	}
[/template]

[comment --------------- Views related queries --------------- /]

[query public editionPart(editor : ViewElement) : String =
	if (editor.container.oclIsTypeOf(views::Container)) then editor.container.editionPart()
	else editor.container.oclAsType(View).pepFormClass()
	endif/]
