[comment 
 *******************************************************************************
 * Copyright (c) 2008-2009 Obeo.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Obeo - initial API and implementation
 *******************************************************************************
 /]
[module common('http://www.eclipse.org/emf/2002/Ecore', 'http://www.eclipse.org/emf/2002/GenModel', 'http://www.eclipse.org/emf/eef/mapping/1.0.0', 'http://www.eclipse.org/emf/eef/views/1.0.0', 'http://www.eclipse.org/emf/eef/components/1.0.0', 'http://www.eclipse.org/emf/eef/generation/1.0.0')/]

[comment --------------- Common queries --------------- /]

[comment Check if at least one views of the propertyBinding is contained by the given view /]
[query public primitiveTypeConverter(editionElement : PropertiesEditionElement, stringPart : String) : String = 
	if ( editionElement.model.upperBound=1 and (editionElement.model.eType.name = 'EInt' or editionElement.model.eType.name = 'Integer' or editionElement.model.eType.name = 'UnlimitedNatural')) then 'new Integer('.concat(stringPart.concat('.').concat(editionElement.views->first().viewCompletePackageGetter())).concat(').intValue()')
	else
		if (editionElement.model.upperBound=1 and (editionElement.model.eType.name = 'EBoolean' or editionElement.model.eType.name = 'Boolean')) then 'new Boolean('.concat(stringPart.concat('.').concat(editionElement.views->first().viewCompletePackageGetter())).concat(').booleanValue()')
		else 
			if (editionElement.model.eType.oclIsTypeOf(EEnum)) then '('.concat(editionElement.model.eType.name).concat(')').concat(stringPart.concat('.').concat(editionElement.views->first().viewCompletePackageGetter()))
			else
				stringPart.concat('.').concat(editionElement.views->first().viewCompletePackageGetter())
			endif
		endif
	endif/] 

[query public involvedViews(pec : PropertiesEditionComponent) : Sequence(T) = 
	pec.views->asSequence()->union(pec.referencedBinding.binding.views)/]

[query public involvedEditionElements(pec : PropertiesEditionComponent) : Sequence(T) = 
	pec.properties->asSequence()->union(pec.referencedBinding.binding.properties)
	/]
	
[query public editionContext(pec : PropertiesEditionComponent) : PropertiesEditionContext = 
	if (pec.ancestors()->select(oclIsTypeOf(PropertiesEditionContext))->notEmpty()) then 
	pec.ancestors()->select(oclIsTypeOf(PropertiesEditionContext))->first().oclAsType(PropertiesEditionContext)
	else null
	endif/]

[query public owningView(element : ViewElement) : View = 
	if (element.oclIsKindOf(View))
	then element.oclAsType(View)
	else element.container.owningView()
	endif/]

[query public owningViewsRepository(view : View) : ViewsRepository = 
if (view.ancestors()->select(oclIsTypeOf(ViewsRepository))->notEmpty()) then 
view.ancestors()->select(oclIsTypeOf(ViewsRepository))->first().oclAsType(ViewsRepository)
else null
endif/]

[query public referencedViews(view : View) : Sequence(T) = 
view.eAllContents(views::ViewReference).oclAsType(views::ViewReference).view->select(oclIsTypeOf(views::View)).oclAsType(views::View)/]

[query public ownedBy(element : ViewElement, view : View) : Boolean = element.owningView() = view/]

[query public involvedEditionElementsInView(pec : PropertiesEditionComponent, v : View) : Sequence(T) = 
	pec.involvedEditionElements().oclAsType(PropertiesEditionElement)->select( views->first().ownedBy(v))
	/]

[query public propertiesEditionElement(element : ElementEditor, pec : PropertiesEditionComponent) : PropertiesEditionElement =
	 pec.properties->select(views->includes(element))->first() /]

[query public involvedPropertiesEditionElement(element : ElementEditor, pec : PropertiesEditionComponent) : PropertiesEditionElement =
	 element.eInverse()->select(oclIsTypeOf(components::PropertiesEditionElement)).oclAsType(components::PropertiesEditionElement)->first() /]

[query public involvedPropertiesEditionElement(view : ViewElement, pec : PropertiesEditionComponent) : PropertiesEditionElement =
	 pec.involvedEditionElements().oclAsType(components::PropertiesEditionElement)->select(views.oclAsType(ViewElement)->includes(view))->first()/]

[query public relatedComponent(view : View, pec : PropertiesEditionComponent) : PropertiesEditionComponent =
	if (pec.views->includes(view))
	then pec.oclAsType(components::PropertiesEditionComponent)
	else pec.referencedBinding.binding->select(views->includes(view))->first().oclAsType(components::PropertiesEditionComponent)
	endif/]
	
[query public fullPartInterfacePath(pepCompletePackage : String, pepInterface : String) : String = pepCompletePackage.concat('.parts.').concat(pepInterface)/]

[query public associatedGenFeature(pee : PropertiesEditionElement) : GenFeature =
	pee.model.eInverse()->select( oclIsKindOf(genmodel::GenFeature))->first().oclAsType(genmodel::GenFeature)/]

[query public associatedGenPackage(p : EPackage) : GenPackage = p.eInverse()->select( oclIsKindOf(genmodel::GenPackage))->first().oclAsType(genmodel::GenPackage)/]
	
[query public associatedGenPackage(pec : PropertiesEditionComponent) : GenPackage = 
	pec.model.ePackage.eInverse()->select( oclIsKindOf(genmodel::GenPackage))->first()/]

[query public associatedGenContext(pec : PropertiesEditionContext) : GenEditionContext = 
	pec.eInverse()->select(oclIsKindOf(EEFGen::GenEditionContext))->first().oclAsType(EEFGen::GenEditionContext)/]


[query public associatedGenContext(pec : PropertiesEditionContext) : GenEditionContext = 
	pec.eInverse()->select(oclIsKindOf(EEFGen::GenEditionContext))->first().oclAsType(EEFGen::GenEditionContext)/]

[comment Defines if a SubPropertiesEditionComponent must be generated. A SubPropertiesEdtionComponent must be generated if :
	- its 'explicit' property is set to true 
	- A ElementBindingReference reference it/]
[query public mustBeGenerated(pec : PropertiesEditionComponent) : Boolean = 
	pec.explicit or pec.eInverse()->select(oclIsTypeOf(mapping::ElementBindingReference))->size() > 0/]

[comment Defines if a ComposedPropertiesEditionComponent must be generated. A ComposedPropertiesEditionComponent must be generated if :
	- its 'explicit' property is set to true and it has more than 1 view to manage 
	- the component has to manage only reference binding /]
[query public needComposedEditionComponent(pec : PropertiesEditionComponent) : Boolean = 
	(pec.explicit and pec.involvedViews()->size() > 1) or (pec.views->size() = 0 and pec.involvedViews()->size() > 0)/]

[comment ----- StructuralFeatures classification ----- /]
[query public isReferenceMany(feature : EStructuralFeature) : Boolean = 
	feature.oclIsTypeOf(ecore::EReference)
	and not (feature.oclAsType(ecore::EReference).containment)
	and feature.many/]

[query public isReferenceSingle(feature : EStructuralFeature) : Boolean = 
	feature.oclIsTypeOf(ecore::EReference)
	and not (feature.oclAsType(ecore::EReference).containment)
	and not (feature.many)/]

[query public isContainmentMany(feature : EStructuralFeature) : Boolean = 
	feature.oclIsTypeOf(ecore::EReference)
	and feature.oclAsType(ecore::EReference).containment
	and feature.many/]

[query public isContainmentSingle(feature : EStructuralFeature) : Boolean = 
	feature.oclIsTypeOf(ecore::EReference)
	and feature.oclAsType(ecore::EReference).containment
	and not (feature.many)/]

[query public isAttributeMany(feature : EStructuralFeature) : Boolean = 
	feature.oclIsTypeOf(ecore::EAttribute)
	and feature.many/]

[query public isAttributeSingle(feature : EStructuralFeature) : Boolean = 
	feature.oclIsTypeOf(ecore::EAttribute)
	and not (feature.many)/]

[comment ---- Views related queries ----- /]
[query public representationName(editionElement : PropertiesEditionElement, nameToCheck : String) : Boolean = editionElement.views->first().representation.name = nameToCheck/]

[comment --------------- Common templates --------------- /]
[template public ecorePackageSignature(e : EStructuralFeature)]
[e.eContainingClass.name.toUpperFirst()/]_[e.name.toUpperFirst()/]
[/template]

[template public ecoreCompletePackageGetter(editor : PropertiesEditionElement)]
get[editor.model.ecorePackageSignature()/]()
[/template]

[template public ecoreCompletePackageSetter(editor : PropertiesEditionElement)]
set[editor.model.ecorePackageSignature()/]()
[/template]

[template public toJavaType(editor : PropertiesEditionElement)]
[if (editor.model.eType.name = 'EInt')]
Integer
[elseif (editor.model.eType.name = 'EBool' or editor.model.eType.name = 'EBoolean')]
Boolean
[elseif (editor.model.eType.name = 'EDouble')]
Double
[elseif (editor.views->first().representation.name = 'EENumViewer')]
Enumerator
[elseif (editor.views->first().representation.name = 'MultiValuedEditor')]
EList
[elseif (editor.model.eType.name = 'EString' and (editor.model.upperBound = 0 or editor.model.upperBound = 1))]
String
[elseif (editor.views->first().representation.name = 'EObjectFlatComboViewer' or editor.views->first().representation.name = 'AdvancedEObjectFlatComboViewer')]
[editor.model.eType.name/]
[elseif (editor.views->first().representation.name = 'ReferencesTable')]
List
[else]
[editor.model.eType.instanceClassName/]
[/if]
[/template]

[query public ecoreGenModelAnnotation(modelElement : EModelElement) : Sequence(T) = modelElement.eAnnotations->select(annot : EAnnotation | annot.source = 'http://www.eclipse.org/emf/2002/GenModel')/]

[query public ecoreDocumentationAnnotation(modelElement : EModelElement) : Sequence(T) = 
	modelElement.ecoreGenModelAnnotation()->first().oclAsType(ecore::EAnnotation).details.oclAsType(ecore::EStringToStringMapEntry)
				->select(entry : EStringToStringMapEntry | entry.key = 'documentation')/]

[query public ecoreHelp(modelElement : EModelElement) : String = 
	if (modelElement.ecoreGenModelAnnotation()->size() = 1)
	then if (modelElement.ecoreDocumentationAnnotation()->size() = 1)
		 then modelElement.ecoreDocumentationAnnotation()->first().oclAsType(ecore::EStringToStringMapEntry).value.replaceAll('"','\\"').replaceAll('\n','').replaceAll('\r','')
		 else null
 		 endif
	else null
	endif/]


[template public helpText(editor : ElementEditor, pec : PropertiesEditionComponent)]
[if (pec.editionContext().associatedGenContext().helpStrategy = EEFGen::HELP_STRATEGY::GENMODEL)]
[if ((not editor.involvedPropertiesEditionElement(pec).associatedGenFeature().oclIsUndefined()) and (not editor.involvedPropertiesEditionElement(pec).associatedGenFeature().propertyDescription.oclIsUndefined()))]"[editor.involvedPropertiesEditionElement(pec).associatedGenFeature().propertyDescription/]"[else]null[/if]
[elseif (pec.editionContext().associatedGenContext().helpStrategy = EEFGen::HELP_STRATEGY::ECOREMODEL)]
[if (not editor.eInverse()->select(oclIsTypeOf(components::PropertiesEditionElement)).oclAsType(components::PropertiesEditionElement)->first().model.ecoreHelp().oclIsUndefined())]"[editor.eInverse()->select(oclIsTypeOf(components::PropertiesEditionElement)).oclAsType(components::PropertiesEditionElement)->first().model.ecoreHelp().trim()/]"[else]null[/if]
[/if]
[/template]

[template public licenceText(peContext : PropertiesEditionContext)]
[if (not peContext.associatedGenContext().oclIsUndefined())]
	[if (not peContext.associatedGenContext().license.oclIsUndefined())]
[peContext.associatedGenContext().license/]
	[else]
/**
 * generated with Acceleo
 */	
	[/if]	
[/if]
[/template]

[template public authorText(peContext : PropertiesEditionContext)]
[if (not peContext.associatedGenContext().oclIsUndefined())]
	[if (not peContext.associatedGenContext().author.oclIsUndefined())]
@author [peContext.associatedGenContext().author/]
	[/if]	
[/if]
[/template]

[comment --------------- View Common templates --------------- /]
[template public viewCompletePackageGetter(view : ViewElement)]
[view.viewPackageGetter()/]()
[/template]

[template public viewPackageGetter(view : ViewElement)]
get[view.viewPackageSignature()/]
[/template]

[template public viewPackageSignature(view : ViewElement)]
[view.name.toASCII().substituteAll(' ','').toUpperFirst()/]
[/template]

[template public viewPackageSetter(view : ViewElement)]
set[view.viewPackageSignature()/]
[/template]

[template public viewCompletePackageSetter(view : ViewElement)]
[view.viewPackageSetter()/]([view.toJavaType().trim()/] newValue)
[/template]

[template public toJavaType(view : ViewElement)]
[if (view.representation.name = 'Text' or view.representation.name = 'Textarea')]
String
[elseif (view.representation.name = 'EENumViewer')]
Enumerator
[elseif (view.representation.name = 'MultiValuedEditor')]
EList
[elseif (view.representation.name = 'EObjectFlatComboViewer' or view.representation.name = 'AdvancedEObjectFlatComboViewer')]
EObject
[elseif (view.representation.name = 'ReferencesTable' or view.representation.name = 'AdvancedReferencesTable' or view.representation.name = 'TableComposition' or view.representation.name = 'AdvancedTableComposition')]
List
[elseif (view.representation.name = 'Checkbox')]
Boolean
[else]
ERROR [view.representation.name/]
[/if]
[/template]

[template public toPath(s : String)]
[s.substituteAll('.', '/')/]
[/template]

[comment][esc/][if (esc = 'class' or esc = 'package' or esc = 'default' or esc = 'case' or esc = 'if' or esc = 'else' or esc = 'while' or esc = 'for' or esc = 'do' or esc = 'until' or esc = 'transient' or esc = 'interface')]_[/if][/let][/comment]
[template public toASCII(s : String)]
[s.substituteAll('à', 'a')
	.substituteAll('è', 'e')
	.substituteAll('ë', 'e')
	.substituteAll('ê', 'e')
	.substituteAll('é', 'e')
	.substituteAll('ï', 'i')
	.substituteAll('î', 'i')
	.substituteAll('ö', 'o')
	.substituteAll('ô', 'o')
	.substituteAll('û', 'u')
	.substituteAll('ù', 'u').trim()/]
[/template]

[comment Sequence{1..s.size()}->
  iterate(i; result : String = "" |
    if i = 1 then result.concat(s.substring(i,i).toLower())
    else if s.substring(i,i) = " " then result
    else result.concat(s.substring(i,i))
   endif
   ) /]
[template private toJavaIdentifierDelegate(s : String)]
[for (str : String | s.toASCII().tokenize(' '))][str.toUpperFirst()/][/for]
[/template]

[template public toJavaIdentifier(s : String)]
[s.toJavaIdentifierDelegate().toLowerFirst().replaceAll('(?i)^((class)|(package)|(default)|(case)|(if)|(else)|(while)|(for)|(do)|(until)|(transient)|(interface)|(super))$','$1_')/]
[/template]

[template public toJavaClassifier(s : String)]
[s.toJavaIdentifierDelegate().replaceAll('^((class)|(package)|(default)|(case)|(if)|(else)|(while)|(for)|(do)|(until)|(transient)|(interface)|(super))$','$1_')/]
[/template]

[template public toJavaMetamodelIdentifier(s : String)]
[s.replaceAll('^(Class)$','$1_')/]
[/template]

[template public toJavaConstant(s: String)]
[s.toASCII().trim().substituteAll(' ', '_').toUpper()/]
[/template]

[comment ==== For multiples model features getters (thanks to EMF !) ==== /]
[template public toMany(s: String)]
[s/]
[/template]
