[comment 
 *******************************************************************************
 * Copyright (c) 2008-2009 Obeo.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Obeo - initial API and implementation
 *******************************************************************************
 /]
[module PropertiesEditionProvider('http://www.eclipse.org/emf/eef/components/1.0.0', 'http://www.eclipse.org/emf/eef/views/1.0.0')/]

[import common /]
[import naming /]


[template public PropertiesEditionProvider(peContext : PropertiesEditionContext, basePackage : String)]
[comment @main /]
[for (pec : PropertiesEditionComponent | peContext.eAllContents(components::PropertiesEditionComponent))]
[if (pec.explicit)]
	[file (pec.fullFilePath(basePackage).trim(), false)]
[peContext.licenceText().trim()/]
package [pec.model.eefPackage(basePackage).trim()/].providers;

import org.eclipse.emf.ecore.EObject;

import org.eclipse.emf.eef.runtime.api.component.IPropertiesEditionComponent;
import org.eclipse.emf.eef.runtime.api.parts.IPropertiesEditionPart;
import org.eclipse.emf.eef.runtime.api.providers.IPropertiesEditionProvider;

import [pec.model.completePackage().trim()/].[pec.model.metamodelPackage().trim()/];
import [pec.model.qualifiedName(basePackage).trim()/];
[if (pec.needComposedEditionComponent())]
import [pec.model.eefPackage(basePackage).trim()/].components.[pec.pecClass().trim()/];
[/if]
[for (view : View | pec.views)]
import [pec.model.eefPackage(basePackage).trim()/].components.[pec.subPECClass(view).trim()/];
import [pec.model.eefPackage(basePackage).trim()/].parts.impl.[view.pepClass().trim()/];
import [pec.model.eefPackage(basePackage).trim()/].parts.forms.[view.pepFormClass().trim()/];
[/for]
[for (subPec : PropertiesEditionComponent | pec.referencedBinding.binding->select(oclIsTypeOf(components::PropertiesEditionComponent)))]
	[for (view : View | subPec.views) ? (view.explicit)]	
import [subPec.model.eefPackage(basePackage).trim()/].components.[subPec.subPECClass(view).trim()/];
import [subPec.model.eefPackage(basePackage).trim()/].parts.impl.[view.pepClass().trim()/];
import [subPec.model.eefPackage(basePackage).trim()/].parts.forms.[view.pepFormClass().trim()/];
	[/for]
[/for]

/**
 * [peContext.authorText().trim()/]
 */
public class [pec.pecProviderClass()/] implements IPropertiesEditionProvider {

	/**
	 * {@inheritDoc}
	 * 
	 * @see org.eclipse.emf.eef.runtime.api.providers.IPropertiesEditionProvider#provides(org.eclipse.emf.ecore.EObject)
	 */
	public boolean provides(EObject eObject) {
		return (eObject instanceof [pec.model.name/]) && ([pec.model.metamodelPackage().trim()/].eINSTANCE.get[pec.model.name.toJavaMetamodelIdentifier()/]() == eObject.eClass());
	}
	
	/**
	 * {@inheritDoc}
	 * 
	 * @see org.eclipse.emf.eef.runtime.api.providers.IPropertiesEditionProvider#getPropertiesEditionComponent(org.eclipse.emf.ecore.EObject,
	 *      java.lang.String)
	 */
	public IPropertiesEditionComponent getPropertiesEditionComponent(EObject eObject, String mode) {
		if (eObject instanceof [pec.model.name/]) {
			return new [pec.pecClass()/](eObject, mode);
		}
		return null;
	}
	
	/**
	 * {@inheritDoc}
	 * 
	 * @see org.eclipse.emf.eef.runtime.api.providers.IPropertiesEditionProvider#getPropertiesEditionComponent(org.eclipse.emf.ecore.EObject,
	 *      java.lang.String, java.lang.String)
	 */
	public IPropertiesEditionComponent getPropertiesEditionComponent(EObject eObject, String mode, String part) {
		if (eObject instanceof [pec.model.name/]) {
[for (view : View | pec.views) ? (view.explicit)]
			if ([pec.subPECClass(view).trim()/].[view.viewPartConstant(pec).trim()/].equals(part))
				return new [pec.subPECClass(view).trim()/](eObject, mode);
[/for]
[for (subPec : PropertiesEditionComponent | pec.referencedBinding.binding->select(oclIsTypeOf(components::PropertiesEditionComponent)))]
	[for (view : View | subPec.views) ? (view.explicit)]	
			if ([subPec.subPECClass(view).trim()/].[view.viewPartConstant(subPec).trim()/].equals(part))
				return new [subPec.subPECClass(view).trim()/](eObject, mode);
	[/for]
[/for]
		}
		return null;
	}

	/**
	 * {@inheritDoc}
	 * 
	 * @see org.eclipse.emf.eef.runtime.api.providers.IPropertiesEditionProvider#getPropertiesEditionPart(org.eclipse.emf.ecore.EObject,
	 *      org.eclipse.emf.eef.runtime.api.component.IPropertiesEditionComponent, java.lang.String,
	 *      java.lang.String)
	 */
	public IPropertiesEditionPart getPropertiesEditionPart(EObject eObject,
			IPropertiesEditionComponent editionComponent, String part, String kind) {
		if (eObject instanceof [pec.model.name/]) {
			if ([pec.pecClass().trim()/].SWT_KIND.equals(kind)) {
[for (view : View | pec.views) ? (view.explicit)]
				if ([pec.subPECClass(view).trim()/].[view.viewPartConstant(pec).trim()/].equals(part))
					return new [view.pepClass().trim()/](editionComponent);
[/for]
[for (subPec : PropertiesEditionComponent | pec.referencedBinding.binding->select(oclIsTypeOf(components::PropertiesEditionComponent)))]
	[for (view : View | subPec.views) ? (view.explicit)]	
				if ([subPec.subPECClass(view).trim()/].[view.viewPartConstant(subPec).trim()/].equals(part))
					return new [view.pepClass().trim()/](editionComponent);
	[/for]
[/for]
			}
		}
		if ([pec.pecClass().trim()/].FORM_KIND.equals(kind)) {
[for (view : View | pec.views) ? (view.explicit)]
				if ([pec.subPECClass(view).trim()/].[view.viewPartConstant(pec).trim()/].equals(part))
					return new [view.pepFormClass().trim()/](editionComponent);
[/for]
[for (subPec : PropertiesEditionComponent | pec.referencedBinding.binding->select(oclIsTypeOf(components::PropertiesEditionComponent)))]
	[for (view : View | subPec.views) ? (view.explicit)]	
				if ([subPec.subPECClass(view).trim()/].[view.viewPartConstant(subPec).trim()/].equals(part))
					return new [view.pepFormClass().trim()/](editionComponent);
	[/for]
[/for]
		}
		return null;
	}
	
}	[/file]
[/if]
[/for]
[/template]

[template public fullFilePath(pec : PropertiesEditionComponent, basePackage : String)]
[pec.model.eefPackage(basePackage).toPath().trim()/]/providers/[pec.pecProviderClass().trim()/].java
[/template]

