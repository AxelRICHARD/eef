[comment 
 *******************************************************************************
 * Copyright (c) 2008-2009 Obeo.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Obeo - initial API and implementation
 *******************************************************************************
 /]
[module PropertiesEditionProvider('http://www.eclipse.org/emf/eef/components/1.0.0', 'http://www.eclipse.org/emf/eef/views/1.0.0', 'http://www.eclipse.org/emf/eef/generation/1.0.0')/]

[import common /]
[import naming /]

[template public PropertiesEditionProvider(peContext : PropertiesEditionContext, basePackage : String)]
[comment @main /]
[for (pec : PropertiesEditionComponent | peContext.eAllContents(components::PropertiesEditionComponent))]
[if (pec.mustBeGenerated())]
	[file (pec.fullFilePath(), false)]
[peContext.associatedGenModel().licenceText().trim()/]
package [pec.providersPackage()/];

import org.eclipse.emf.ecore.EObject;

import org.eclipse.emf.eef.runtime.api.component.IPropertiesEditionComponent;
import org.eclipse.emf.eef.runtime.api.parts.IPropertiesEditionPart;
import org.eclipse.emf.eef.runtime.api.providers.IPropertiesEditionProvider;

import [pec.model.completePackage()/].[pec.model.metamodelPackage()/];
import [pec.model.qualifiedName(basePackage)/];
[if (pec.needComposedEditionComponent())]
import [pec.model.completePackage()/].components.[pec.pecClass()/];
[/if]
[for (view : View | pec.views)]
import [pec.model.completePackage()/].components.[pec.subPECClass(view)/];
[/for]
[for (subPec : PropertiesEditionComponent | pec.referencedBinding.binding->select(oclIsTypeOf(components::PropertiesEditionComponent)))]
	[for (view : View | subPec.views) ? (view.explicit)]
import [subPec.model.ePackage.completePackage()/].components.[subPec.subPECClass(view)/];
	[/for]
[/for]

/**
 * [peContext.associatedGenModel().authorText().trim()/]
 */
public class [pec.pecProviderClass()/] implements IPropertiesEditionProvider {

	/**
	 * {@inheritDoc}
	 * 
	 * @see org.eclipse.emf.eef.runtime.api.providers.IPropertiesEditionProvider#provides(org.eclipse.emf.ecore.EObject)
	 */
	public boolean provides(EObject eObject) {
		return (eObject instanceof [pec.model.name/]) && ([pec.model.metamodelPackage()/].eINSTANCE.get[pec.model.name.toJavaMetamodelIdentifier()/]() == eObject.eClass());
	}
	
	/**
	 * {@inheritDoc}
	 * 
	 * @see org.eclipse.emf.eef.runtime.api.providers.IPropertiesEditionProvider#provides(org.eclipse.emf.ecore.EObject, java.lang.String)
	 */
	public boolean provides(EObject eObject, String part) {
		return provides(eObject)[pec.provideForPart().trim()/];
	}

	/**
	 * {@inheritDoc}
	 * 
	 * @see org.eclipse.emf.eef.runtime.api.providers.IPropertiesEditionProvider#getPropertiesEditionComponent(org.eclipse.emf.ecore.EObject,
	 *  java.lang.String)
	 */
	public IPropertiesEditionComponent getPropertiesEditionComponent(EObject eObject, String editing_mode) {
		if (eObject instanceof [pec.model.name/]) {
			return new [pec.pecClass()/](eObject, editing_mode);
		}
		return null;
	}

	/**
	 * {@inheritDoc}
	 * 
	 * @see org.eclipse.emf.eef.runtime.api.providers.IPropertiesEditionProvider#getPropertiesEditionComponent(org.eclipse.emf.ecore.EObject,
	 *  java.lang.String, java.lang.String)
	 */
	public IPropertiesEditionComponent getPropertiesEditionComponent(EObject eObject, String editing_mode, String part) {
		if (eObject instanceof [pec.model.name/]) {
[for (view : View | pec.views) ? (view.explicit)]
			if ([pec.subPECClass(view)/].[view.viewPartConstant(pec)/].equals(part))
				return new [pec.subPECClass(view)/](eObject, editing_mode);
[/for]
[for (subPec : PropertiesEditionComponent | pec.referencedBinding.binding->select(oclIsTypeOf(components::PropertiesEditionComponent)))]
	[for (view : View | subPec.views) ? (view.explicit and view.ancestors()->select(oclIsKindOf(views::View)).oclAsType(views::View)->excludesAll(pec.views->asSequence()))]
			if ([subPec.subPECClass(view)/].[view.viewPartConstant(subPec)/].equals(part))
				return new [subPec.subPECClass(view)/](eObject, editing_mode);
	[/for]
[/for]
		}
		return null;
	}

}
[/file]
[/if]
[/for]
[/template]

[template public provideForPart(pec : PropertiesEditionComponent)]
[if (pec.providePart().size() > 0)]
&& ([pec.providePart().replaceAll('\n', '').replaceAll('\n\r','')/])
[/if]	
[/template]

[template public providePart(pec : PropertiesEditionComponent)]
[let view : View = pec.views->select(v:views::View | v.explicit)->first()]
[if (not view.oclIsUndefined())][for (v : View | pec.views) separator (' || ') ?  (v.explicit)]
[pec.subPECClass(v)/].[v.viewPartConstant(pec)/].equals(part)[/for][/if]
[if (pec.referencedBinding->size()>0)][let subPec : PropertiesEditionComponent = pec.referencedBinding.binding->select(oclIsTypeOf(components::PropertiesEditionComponent))->first().oclAsType(components::PropertiesEditionComponent)]
[if (not subPec.oclIsUndefined())][let view2 : View = subPec.views->select(v:views::View | v.explicit and v.ancestors()->select(oclIsKindOf(views::View)).oclAsType(views::View)->excludesAll(pec.views->asSequence()))->first()]	
[if (not view2.oclIsUndefined())][if (not view.oclIsUndefined())] || [/if]
[for (subPec : PropertiesEditionComponent | pec.referencedBinding.binding->select(oclIsTypeOf(components::PropertiesEditionComponent)))  separator (' || ')]
[for (view : View | subPec.views) separator (' || ') ? (view.explicit and view.ancestors()->select(oclIsKindOf(views::View)).oclAsType(views::View)->excludesAll(pec.views->asSequence()))]
[subPec.subPECClass(view)/].[view.viewPartConstant(subPec)/].equals(part)[/for][/for]
[/if][/let][/if]
[/let]
[/if]	
[/let]
[/template]

[template public fullFilePath(pec : PropertiesEditionComponent)]
[pec.pecProviderQualifiedClass().toPath()/].java
[/template]

