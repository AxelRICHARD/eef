[comment 
 *******************************************************************************
 * Copyright (c) 2008-2009 Obeo.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Obeo - initial API and implementation
 *******************************************************************************
 /]
[module tablecompositionFormImpl('http://www.eclipse.org/emf/eef/views/1.0.0', 'http://www.eclipse.org/emf/eef/components/1.0.0', 'http://www.eclipse.org/emf/2002/Ecore', 'http://www.eclipse.org/emf/eef/generation/1.0.0') extends widgetFormImpl/]

[import common /]
[import naming /]
[import viewCommon /]
[comment I don't see a better way to get specific form services for the moment /]
[import widgetFormImpl /]

[comment ===== Case Widget = TableComposition ===== /]
[template public manageImports(widget : Widget, pec : PropertiesEditionComponent, view : View, basePackage : String) overrides manageImports ? (widget.name = 'TableComposition')]
import java.util.Map;
import org.eclipse.emf.edit.ui.provider.AdapterFactoryContentProvider;
import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider;
import org.eclipse.emf.eef.runtime.EEFRuntimePlugin;
import org.eclipse.jface.viewers.ILabelProviderListener;
import org.eclipse.jface.viewers.IStructuredSelection;
import org.eclipse.jface.viewers.ITableLabelProvider;
import org.eclipse.jface.viewers.TableViewer;
import org.eclipse.jface.window.Window;
import org.eclipse.jface.wizard.WizardDialog;
import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.graphics.Image;
import org.eclipse.swt.widgets.Event;
import org.eclipse.swt.widgets.Listener;
import org.eclipse.swt.widgets.TableColumn;
import org.eclipse.jface.viewers.ViewerFilter;
[/template]

[template public widgetDeclaration(editor : ElementEditor) overrides widgetDeclaration ? (editor.representation.name = 'TableComposition')]
	protected TableViewer [editor.name.toJavaIdentifier()/];
	protected List<ViewerFilter> [editor.name.toJavaIdentifier()/]BusinessFilters = new ArrayList<ViewerFilter>();
	protected List<ViewerFilter> [editor.name.toJavaIdentifier()/]Filters = new ArrayList<ViewerFilter>();
[/template]

[template public implementation(editor : ElementEditor) overrides implementation ? (editor.representation.name = 'TableComposition')]
create[editor.name.toJavaClassifier()/]TableComposition(widgetFactory, parent);
[/template]

[template public additionalImplementation(editor : ElementEditor, pec : PropertiesEditionComponent, inputPEC: PropertiesEditionComponent) overrides additionalImplementation ? (editor.representation.name = 'TableComposition')]
	/**
	 * @param container
	 * [editor.owningViewsRepository().associatedGenModel().generationMark()/]
	 */
	protected Composite create[editor.name.toJavaClassifier()/]TableComposition(FormToolkit widgetFactory, Composite container) {
		Composite tableContainer = widgetFactory.createComposite(container, SWT.NONE);
		GridLayout tableContainerLayout = new GridLayout();
		GridData tableContainerData = new GridData(GridData.FILL_BOTH);
		tableContainerData.horizontalSpan = 3;
		tableContainer.setLayoutData(tableContainerData);
		tableContainerLayout.numColumns = 2;
		tableContainer.setLayout(tableContainerLayout);
		org.eclipse.swt.widgets.Table table[editor.name.toJavaClassifier()/] = widgetFactory.createTable(tableContainer, SWT.FULL_SELECTION | SWT.BORDER);
		table[editor.name.toJavaClassifier()/].setHeaderVisible(true);
		[if (editor.readOnly)]
		table[editor.name.toJavaClassifier()/].setEnabled(false);
		table[editor.name.toJavaClassifier()/].setToolTipText([editor.owningViewsRepository().messagesProvider()/].[editor.owningViewString()/]_ReadOnly);
		[/if]
		GridData gd[editor.name.toJavaClassifier()/] = new GridData();
		gd[editor.name.toJavaClassifier()/].grabExcessHorizontalSpace = true;
		gd[editor.name.toJavaClassifier()/].horizontalAlignment = GridData.FILL;
		gd[editor.name.toJavaClassifier()/].grabExcessVerticalSpace = true;
		gd[editor.name.toJavaClassifier()/].verticalAlignment = GridData.FILL;
		table[editor.name.toJavaClassifier()/].setLayoutData(gd[editor.name.toJavaClassifier()/]);
		table[editor.name.toJavaClassifier()/].setLinesVisible(true);

		[if (editor.owningViewsRepository().associatedGenModel().useJMergeForUserCode)]
		[editor.defaultColumnInitialisation()/]
		[else]
		// [protected ('for columns definition for '.concat(editor.name.toJavaClassifier()))]
		[editor.defaultColumnInitialisation()/]
		// [/protected]
		[/if]

		[editor.name.toJavaIdentifier()/] = new TableViewer(table[editor.name.toJavaClassifier()/]);
		[editor.name.toJavaIdentifier()/].setContentProvider(new ArrayContentProvider());
		[editor.name.toJavaIdentifier()/].setLabelProvider(new ITableLabelProvider() {
			[if (editor.owningViewsRepository().associatedGenModel().useJMergeForUserCode)]
			[editor.defaultLabelProviderInitialisation()/]
			[else]
			//[protected ('for label provider definition for '.concat(editor.name.toJavaClassifier()))]
			[editor.defaultLabelProviderInitialisation()/]
			//[/protected]
			[/if]

			public void addListener(ILabelProviderListener listener) {
			}

			public void dispose() {
			}

			public boolean isLabelProperty(Object element, String property) {
				return false;
			}

			public void removeListener(ILabelProviderListener listener) {
			}

		});
		[editor.name.toJavaIdentifier()/].getTable().addListener(SWT.MouseDoubleClick, new Listener(){

			public void handleEvent(Event event) {
				if ([editor.name.toJavaIdentifier()/].getSelection() instanceof IStructuredSelection) {
					IStructuredSelection selection = (IStructuredSelection) [editor.name.toJavaIdentifier()/].getSelection();
					if (selection.getFirstElement() instanceof EObject) {
						propertiesEditionComponent.firePropertiesChanged(new PropertiesEditionEvent([editor.editionPart()/].this, [editor.editorID()/], PropertiesEditionEvent.COMMIT, PropertiesEditionEvent.EDIT, null, selection.getFirstElement()));
						[editor.name.toJavaIdentifier()/].refresh();
					}
				}
			}

		});
		GridData [editor.name.toJavaIdentifier()/]Data = new GridData(GridData.FILL_HORIZONTAL);
		[editor.name.toJavaIdentifier()/]Data.minimumHeight = 120;
		[editor.name.toJavaIdentifier()/]Data.heightHint = 120;
		[editor.name.toJavaIdentifier()/].getTable().setLayoutData([editor.name.toJavaIdentifier()/]Data);
		EditingUtils.setID([editor.name.toJavaIdentifier()/].getTable(), [editor.editorID()/]);
		EditingUtils.setEEFtype([editor.name.toJavaIdentifier()/].getTable(), "eef::[editor.representation.name/]::field"); //$NON-NLS-1$
		create[editor.name.toJavaClassifier()/]Panel(widgetFactory, tableContainer);
		return container;
	}

	/**
	 * @param container
	 * [editor.owningViewsRepository().associatedGenModel().generationMark()/]
	 */
	protected Composite create[editor.name.toJavaClassifier()/]Panel(FormToolkit widgetFactory, Composite container) {
		Composite [editor.name.toJavaIdentifier()/]Panel = widgetFactory.createComposite(container, SWT.NONE);
		GridLayout [editor.name.toJavaIdentifier()/]PanelLayout = new GridLayout();
		[editor.name.toJavaIdentifier()/]PanelLayout.numColumns = 1;
		[editor.name.toJavaIdentifier()/]Panel.setLayout([editor.name.toJavaIdentifier()/]PanelLayout);
		Button add[editor.name.toJavaClassifier()/] = widgetFactory.createButton([editor.name.toJavaIdentifier()/]Panel, [editor.owningViewsRepository().messagesProvider()/].PropertiesEditionPart_AddTableViewerLabel, SWT.NONE);
		[if (editor.readOnly)]
		add[editor.name.toJavaClassifier()/].setEnabled(false);
		add[editor.name.toJavaClassifier()/].setToolTipText([editor.owningViewsRepository().messagesProvider()/].[editor.owningViewString()/]_ReadOnly);
		[/if]
		GridData add[editor.name.toJavaClassifier()/]Data = new GridData(GridData.FILL_HORIZONTAL);
		add[editor.name.toJavaClassifier()/].setLayoutData(add[editor.name.toJavaClassifier()/]Data);
		add[editor.name.toJavaClassifier()/].addSelectionListener(new SelectionAdapter() {

			/**
			 * {@inheritDoc}
			 * 
			 * @see org.eclipse.swt.events.SelectionAdapter#widgetSelected(org.eclipse.swt.events.SelectionEvent)
			 * [editor.owningViewsRepository().associatedGenModel().generationMark()/]
			 */
			public void widgetSelected(SelectionEvent e) {
				propertiesEditionComponent.firePropertiesChanged(new PropertiesEditionEvent([editor.editionPart()/].this, [editor.editorID()/], PropertiesEditionEvent.COMMIT, PropertiesEditionEvent.ADD, null, null));
				[editor.name.toJavaIdentifier()/].refresh();
			}
		});
		EditingUtils.setID(add[editor.name.toJavaClassifier()/], [editor.editorID()/]);
		EditingUtils.setEEFtype(add[editor.name.toJavaClassifier()/], "eef::[editor.representation.name/]::addbutton"); //$NON-NLS-1$
		Button remove[editor.name.toJavaClassifier()/] = widgetFactory.createButton([editor.name.toJavaIdentifier()/]Panel, [editor.owningViewsRepository().messagesProvider()/].PropertiesEditionPart_RemoveTableViewerLabel, SWT.NONE);
		[if (editor.readOnly)]
		remove[editor.name.toJavaClassifier()/].setEnabled(false);
		remove[editor.name.toJavaClassifier()/].setToolTipText([editor.owningViewsRepository().messagesProvider()/].[editor.owningViewString()/]_ReadOnly);
		[/if]
		GridData remove[editor.name.toJavaClassifier()/]Data = new GridData(GridData.FILL_HORIZONTAL);
		remove[editor.name.toJavaClassifier()/].setLayoutData(remove[editor.name.toJavaClassifier()/]Data);
		remove[editor.name.toJavaClassifier()/].addSelectionListener(new SelectionAdapter() {

			/**
			 * {@inheritDoc}
			 * 
			 * @see org.eclipse.swt.events.SelectionAdapter#widgetSelected(org.eclipse.swt.events.SelectionEvent)
			 * [editor.owningViewsRepository().associatedGenModel().generationMark()/]
			 */
			public void widgetSelected(SelectionEvent e) {
				if ([editor.name.toJavaIdentifier()/].getSelection() instanceof IStructuredSelection) {
					IStructuredSelection selection = (IStructuredSelection) [editor.name.toJavaIdentifier()/].getSelection();
					if (selection.getFirstElement() instanceof EObject) {
						EObject selectedElement = (EObject) selection.getFirstElement();
						propertiesEditionComponent.firePropertiesChanged(new PropertiesEditionEvent([editor.editionPart()/].this, [editor.editorID()/], PropertiesEditionEvent.CHANGE, PropertiesEditionEvent.REMOVE, null, selectedElement));
						[editor.name.toJavaIdentifier()/].refresh();
					}
				}
			}

		});
		EditingUtils.setID(remove[editor.name.toJavaClassifier()/], [editor.editorID()/]);
		EditingUtils.setEEFtype(remove[editor.name.toJavaClassifier()/], "eef::[editor.representation.name/]::removebutton"); //$NON-NLS-1$
		Button edit[editor.name.toJavaClassifier()/] = widgetFactory.createButton([editor.name.toJavaIdentifier()/]Panel, [editor.owningViewsRepository().messagesProvider()/].PropertiesEditionPart_EditTableViewerLabel, SWT.NONE);
		[if (editor.readOnly)]
		edit[editor.name.toJavaClassifier()/].setEnabled(false);
		edit[editor.name.toJavaClassifier()/].setToolTipText([editor.owningViewsRepository().messagesProvider()/].[editor.owningViewString()/]_ReadOnly);
		[/if]
		GridData edit[editor.name.toJavaClassifier()/]Data = new GridData(GridData.FILL_HORIZONTAL);
		edit[editor.name.toJavaClassifier()/].setLayoutData(edit[editor.name.toJavaClassifier()/]Data);
		edit[editor.name.toJavaClassifier()/].addSelectionListener(new SelectionAdapter() {

			/**
			 * {@inheritDoc}
			 * 
			 * @see org.eclipse.swt.events.SelectionAdapter#widgetSelected(org.eclipse.swt.events.SelectionEvent)
			 * [editor.owningViewsRepository().associatedGenModel().generationMark()/]
			 */
			public void widgetSelected(SelectionEvent e) {
				if ([editor.name.toJavaIdentifier()/].getSelection() instanceof IStructuredSelection) {
					IStructuredSelection selection = (IStructuredSelection) [editor.name.toJavaIdentifier()/].getSelection();
					if (selection.getFirstElement() instanceof EObject) {
						propertiesEditionComponent.firePropertiesChanged(new PropertiesEditionEvent([editor.editionPart()/].this, [editor.editorID()/], PropertiesEditionEvent.COMMIT, PropertiesEditionEvent.EDIT, null, selection.getFirstElement()));
						[editor.name.toJavaIdentifier()/].refresh();
					}
				}
			}

		});
		EditingUtils.setID(edit[editor.name.toJavaClassifier()/], [editor.editorID()/]);
		EditingUtils.setEEFtype(edit[editor.name.toJavaClassifier()/], "eef::[editor.representation.name/]::editbutton"); //$NON-NLS-1$
		return [editor.name.toJavaIdentifier()/]Panel;
	}
[/template]

[template private defaultLabelProviderInitialisation (editor : ElementEditor) ]
			public String getColumnText(Object object, int columnIndex) {
				AdapterFactoryLabelProvider labelProvider = new AdapterFactoryLabelProvider(adapterFactory);
				if (object instanceof EObject) {
					switch (columnIndex) {
					case 0:
						return labelProvider.getText(object);
					}
				}
				return ""; //$NON-NLS-1$
			}

			public Image getColumnImage(Object element, int columnIndex) {
				return null;
			}

[/template]

[template private defaultColumnInitialisation(editor : ElementEditor) ]
		TableColumn name = new TableColumn(table[editor.name.toJavaClassifier()/], SWT.NONE);
		name.setWidth(80);
		name.setText("Label"); //$NON-NLS-1$

[/template]

[comment ===== Case Widget = AdvancedTableComposition ===== /]
[template public manageImports(widget : Widget, pec : PropertiesEditionComponent, view : View, basePackage : String) overrides manageImports ? (widget.name = 'AdvancedTableComposition')]
import java.util.Map;
import org.eclipse.jface.viewers.ViewerFilter;
import org.eclipse.emf.eef.runtime.ui.widgets.ReferencesTable;
import org.eclipse.emf.eef.runtime.ui.widgets.ReferencesTable.ReferencesTableListener;
[/template]

[template public widgetDeclaration(editor : ElementEditor) overrides widgetDeclaration ? (editor.representation.name = 'AdvancedTableComposition')]
protected ReferencesTable [editor.name.toJavaIdentifier()/];
protected List<ViewerFilter> [editor.name.toJavaIdentifier()/]BusinessFilters = new ArrayList<ViewerFilter>();
protected List<ViewerFilter> [editor.name.toJavaIdentifier()/]Filters = new ArrayList<ViewerFilter>();
[/template]

[template public implementation(editor : ElementEditor) overrides implementation ? (editor.representation.name = 'TableComposition' or editor.representation.name = 'AdvancedTableComposition')]
create[editor.name.toJavaClassifier()/]TableComposition(widgetFactory, parent);
[/template]

[template public additionalImplementation(editor : ElementEditor, pec : PropertiesEditionComponent, inputPEC: PropertiesEditionComponent) overrides additionalImplementation ? (editor.representation.name = 'AdvancedTableComposition')]
	/**
	 * @param container
	 * [editor.owningViewsRepository().associatedGenModel().generationMark()/]
	 */
	protected Composite create[editor.name.toJavaClassifier()/]TableComposition(FormToolkit widgetFactory, Composite parent) {
		this.[editor.name.toJavaIdentifier()/] = new ReferencesTable([editor.owningViewsRepository().messagesProvider()/].[editor.editorKey(editor.owningView())/], new ReferencesTableListener() {
			public void handleAdd() {
				propertiesEditionComponent.firePropertiesChanged(new PropertiesEditionEvent([editor.editionPart()/].this, [editor.editorID()/], PropertiesEditionEvent.COMMIT, PropertiesEditionEvent.ADD, null, null));
				[editor.name.toJavaIdentifier()/].refresh();
			}
			public void handleEdit(EObject element) {
				propertiesEditionComponent.firePropertiesChanged(new PropertiesEditionEvent([editor.editionPart()/].this, [editor.editorID()/], PropertiesEditionEvent.COMMIT, PropertiesEditionEvent.EDIT, null, element));
				[editor.name.toJavaIdentifier()/].refresh();
			}
			public void handleMove(EObject element, int oldIndex, int newIndex) {
				propertiesEditionComponent.firePropertiesChanged(new PropertiesEditionEvent([editor.editionPart()/].this, [editor.editorID()/], PropertiesEditionEvent.COMMIT, PropertiesEditionEvent.MOVE, element, newIndex));
				[editor.name.toJavaIdentifier()/].refresh();
			}
			public void handleRemove(EObject element) {
				propertiesEditionComponent.firePropertiesChanged(new PropertiesEditionEvent([editor.editionPart()/].this, [editor.editorID()/], PropertiesEditionEvent.COMMIT, PropertiesEditionEvent.REMOVE, null, element));
				[editor.name.toJavaIdentifier()/].refresh();
			}
			public void navigateTo(EObject element) { }
		});
		this.[editor.name.toJavaIdentifier()/].setHelpText(propertiesEditionComponent.getHelpContent([editor.editorID()/], [editor.owningViewsRepository().vrClass()/].FORM_KIND));
		this.[editor.name.toJavaIdentifier()/].createControls(parent, widgetFactory);
		this.[editor.name.toJavaIdentifier()/].addSelectionListener(new SelectionAdapter() {
			
			public void widgetSelected(SelectionEvent e) {
				if (e.item != null && e.item.getData() instanceof EObject) {
					propertiesEditionComponent.firePropertiesChanged(new PropertiesEditionEvent([editor.editionPart()/].this, [editor.editorID()/], PropertiesEditionEvent.CHANGE, PropertiesEditionEvent.SELECTION_CHANGED, null, e.item.getData()));
				}
			}
			
		});
		[if (editor.readOnly)]
		[editor.name.toJavaIdentifier()/].setEnabled(false);
		[editor.name.toJavaIdentifier()/].setToolTipText([editor.owningViewsRepository().messagesProvider()/].[editor.owningViewString()/]_ReadOnly);
		[/if]
		GridData [editor.name.toJavaIdentifier()/]Data = new GridData(GridData.FILL_HORIZONTAL);
		[editor.name.toJavaIdentifier()/]Data.horizontalSpan = 3;
		this.[editor.name.toJavaIdentifier()/].setLayoutData([editor.name.toJavaIdentifier()/]Data);
		this.[editor.name.toJavaIdentifier()/].setLowerBound([editor.involvedPropertiesEditionElement(pec).model.lowerBound/]);
		this.[editor.name.toJavaIdentifier()/].setUpperBound([editor.involvedPropertiesEditionElement(pec).model.upperBound/]);
		[editor.name.toJavaIdentifier()/].setID([editor.editorID()/]);
		[editor.name.toJavaIdentifier()/].setEEFType("eef::[editor.representation.name/]"); //$NON-NLS-1$
		return parent;
	}
[/template]
