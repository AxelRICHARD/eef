[comment 
 *******************************************************************************
 * Copyright (c) 2008-2009 Obeo.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Obeo - initial API and implementation
 *******************************************************************************
 /]
[module viewCommon('http://www.eclipse.org/emf/eef/views/1.0.0', 'http://www.eclipse.org/emf/eef/mapping/navigation/1.0.0', 'http://www.eclipse.org/emf/eef/components/1.0.0', 'http://www.eclipse.org/emf/2002/Ecore')/]

[import common /]
[import naming /]
[import widgetGettersSetters /]
[import typeUtils /]

[comment]
Common tools for views generation purpose.
TODO: externalise model/controler reference after Unedic non-reg
[/comment]

[comment --------------- Views related templates --------------- /]
[template public genDeclaration(elementEditor : ElementEditor)]
[elementEditor.getterDeclaration()/]

[elementEditor.setterDeclaration()/]

[elementEditor.setMessageDeclaration()/]

[elementEditor.unsetMessageDeclaration()/]

[/template]

[template public genDeclarationForSubView(view : View)]
	[view.getterForSubViewDeclaration()/]
[/template]

[template public genDeclarationForReferencedView(view : View)]
	[view.getterForReferencedViewDeclaration()/]
[/template]

[template public genDeclarationForViewReference(view : View)]
[for (viewReference : ViewReference | view.eAllContents(views::ViewReference))]
[viewReference.view.oclAsType(views::View).genDeclarationForReferencedView()/]
	[for (elementEditor : ElementEditor | viewReference.view.eAllContents(views::ElementEditor)->select(oclIsTypeOf(views::ElementEditor)))]
[elementEditor.genDeclaration()/]
	[/for]
[if (viewReference.view.eAllContents(views::ViewReference)->notEmpty())][genDeclarationForViewReferenceDelegate(viewReference.view.oclAsType(views::View))/][/if]
[/for]
[/template]

[template public genDeclarationForViewReferenceDelegate(view : View)]
[for (viewReference : ViewReference | view.eAllContents(views::ViewReference))]
	[for (elementEditor : ElementEditor | viewReference.view.eAllContents(views::ElementEditor)->select(oclIsTypeOf(views::ElementEditor)))]
[elementEditor.genDeclaration()/]
	[/for]
[if (viewReference.view.eAllContents(views::ViewReference)->notEmpty())][genDeclarationForViewReferenceDelegate(viewReference.view.oclAsType(views::View))/][/if]
[/for]
[/template]

[template public genDeclarationForSubViews(view : View)]
[view.genDeclarationForSubView()/]

[for (elementEditor : ElementEditor | view.eAllContents(views::ElementEditor)->select(oclIsTypeOf(views::ElementEditor)))]
[elementEditor.genDeclaration()/]
[/for]
[/template]

[template public genImports(view : ViewElement)]
[if (view.eAllContents(views::ElementEditor).oclAsType(views::ElementEditor)->select(representation.name = 'ReferencesTable' or representation.name = 'TableComposition' or representation.name = 'AdvancedReferencesTable' or representation.name = 'AdvancedTableComposition')->notEmpty())]
import java.util.List;
import org.eclipse.emf.ecore.EReference;
[/if]
[if (view.eAllContents(views::ElementEditor).oclAsType(views::ElementEditor)->select(representation.name = 'TableComposition' or representation.name = 'AdvancedTableComposition')->notEmpty())]
import java.util.Map;
[/if]
[if (view.eAllContents(views::ElementEditor).oclAsType(views::ElementEditor)->select(representation.name = 'MultiValuedEditor')->notEmpty())]
import org.eclipse.emf.common.util.EList;
[/if]
[if (view.eAllContents(views::ElementEditor).oclAsType(views::ElementEditor)->select(representation.name = 'EMFComboViewer' or representation.name = 'Radio')->notEmpty())]
import org.eclipse.emf.ecore.EEnum;
import org.eclipse.emf.common.util.Enumerator;
[/if]
[if (view.eAllContents(views::ElementEditor).oclAsType(views::ElementEditor)->select(representation.name = 'EObjectFlatComboViewer' or representation.name = 'AdvancedEObjectFlatComboViewer' or representation.name = 'ReferencesTable' or representation.name = 'TableComposition' or representation.name = 'AdvancedReferencesTable' or representation.name = 'AdvancedTableComposition')->notEmpty())]
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.jface.viewers.ViewerFilter;
import org.eclipse.emf.eef.runtime.ui.widgets.ButtonsModeEnum;
[/if]
[if (view.eAllContents(views::ElementEditor).oclAsType(views::ElementEditor)->select(representation.name = 'Combo' )->notEmpty())]
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.jface.viewers.ViewerFilter;
[/if]
[if (view.eAllContents(views::View)->notEmpty() or view.eAllContents(views::ViewReference)->notEmpty())]
import org.eclipse.emf.eef.runtime.api.parts.IPropertiesEditionPart;
[/if]
[/template]

[template public widgetContainer(element : ViewElement)]
[if (element.container.oclIsKindOf(views::Container) and element.container.representation.name = 'Group')]
[element.container.name.toJavaIdentifier()/]Group
[elseif (element.container.oclIsKindOf(views::Container) and element.container.representation.name = 'VerticalBox')]
[element.container.name.toJavaIdentifier()/]VBox
[elseif (element.container.oclIsKindOf(views::Container) and element.container.representation.name = 'HorizontalBox')]
[element.container.name.toJavaIdentifier()/]HBox
[elseif (element.container.oclIsKindOf(views::View))]
view
[else]
//FIXME ILLEGAL MODEL STATE in template public widgetContainer(element : ViewElement) in module viewCommon.mtl
[/if]
[/template]

[comment ====== Widgets getters signature ====== /]
[template public partGetterAddSignature(editor : PropertiesEditionElement) ? (editor.views->first().representation.name = 'ReferencesTable' or editor.views->first().representation.name = 'AdvancedReferencesTable')]
public List get[editor.model.eContainingClass.name.toUpperFirst()/]_[editor.model.name.toUpperFirst()/]ToAdd()
[/template]

[template public partGetterRemoveSignature(editor : PropertiesEditionElement) ? (editor.views->first().representation.name = 'ReferencesTable' or editor.views->first().representation.name = 'AdvancedReferencesTable')]
public List get[editor.model.eContainingClass.name.toUpperFirst()/]_[editor.model.name.toUpperFirst()/]ToRemove()
[/template]

[template public partGetterAddSignature(editor : PropertiesEditionElement) ? (editor.views->first().representation.name = 'TableComposition')]
public List get[editor.model.eContainingClass.name.toUpperFirst()/]_[editor.model.name.toUpperFirst()/]ToAdd()
[/template]

[template public partGetterEditSignature(editor : PropertiesEditionElement) ? (editor.views->first().representation.name = 'TableComposition')]
public Map get[editor.model.eContainingClass.name.toUpperFirst()/]_[editor.model.name.toUpperFirst()/]ToEdit()
[/template]

[template public partGetterRemoveSignature(editor : PropertiesEditionElement) ? (editor.views->first().representation.name = 'TableComposition')]
public List get[editor.model.eContainingClass.name.toUpperFirst()/]_[editor.model.name.toUpperFirst()/]ToRemove()
[/template]

[template public partGetterTableListSignature(editor : PropertiesEditionElement) ? (editor.views->first().representation.name = 'TableComposition')]
public List get[editor.model.eContainingClass.name.toUpperFirst()/]_[editor.model.name.toUpperFirst()/]()
[/template]

[comment ====== Widgets setters signature ====== /]
[template public partSetterSignature(editor : PropertiesEditionElement)]
public void [editor.ecoreCompletePackageSetter()/]
[/template]

[template public partSetterAddSignature(editor : PropertiesEditionElement)]
public void add[editor.model.eContainingClass.name.toUpperFirst()/]_[editor.model.name.toUpperFirst()/](EObject newValue)
[/template]

[template public partSetterRemoveSignature(editor : PropertiesEditionElement)]
public void remove[editor.model.eContainingClass.name.toUpperFirst()/]_[editor.model.name.toUpperFirst()/](EObject value)
[/template]

[template public partSetterUpdateSignature(editor : PropertiesEditionElement)]
public void update[editor.model.eContainingClass.name.toUpperFirst()/]_[editor.model.name.toUpperFirst()/](EObject value)
[/template]

[comment ====== Widgets getters ====== /]
[template public partSetter(editor : PropertiesEditionElement) ? (editor.views->first().representation.name = 'MultiValuedEditor')]
[editor.partSetterSignature()/] {
		[editor.views->first().name.toJavaIdentifier()/]List = newValue;
		[editor.views->first().name.toJavaIdentifier()/]Text.setText([editor.views->first().name.toJavaIdentifier()/]List.toString());
	}
[/template]

[template public partSetter(editor : PropertiesEditionElement) ? (editor.model.oclAsType(ecore::EAttribute).isString() and (editor.model.upperBound = 0 or editor.model.upperBound = 1))]
[editor.partSetterSignature()/] {
		[editor.views->first().name.toJavaIdentifier()/].setText(newValue);
	}
[/template]

[template public partSetter(editor : PropertiesEditionElement) ? (editor.model.oclAsType(ecore::EAttribute).isBoolean())]
[editor.partSetterSignature()/] {
		[editor.views->first().name.toJavaIdentifier()/].setSelection(newValue.booleanValue());
	}
[/template]

[template public partSetter(editor : PropertiesEditionElement) ? (editor.model.oclAsType(ecore::EAttribute).isInteger() or editor.model.oclAsType(ecore::EAttribute).isShort()or editor.model.oclAsType(ecore::EAttribute).isLong())]
[editor.partSetterSignature()/] {
		[editor.views->first().name.toJavaIdentifier()/].setText(newValue.toString());
	}
[/template]

[template public partSetter(editor : PropertiesEditionElement) ? (editor.views->first().representation.name = 'EObjectFlatComboViewer' or editor.views->first().representation.name = 'AdvancedEObjectFlatComboViewer')]
[editor.partSetterSignature()/] {
		if (newValue != null)
			[editor.views->first().name.toJavaIdentifier()/].setSelection(new StructuredSelection(newValue));
		else
			[editor.views->first().name.toJavaIdentifier()/].setSelection(new StructuredSelection());
	}
[/template]

[template public partSetter(editor : PropertiesEditionElement) ? (editor.views->first().representation.name = 'EMFComboViewer')]
[editor.partSetterSignature()/] {
		[editor.views->first().name.toJavaIdentifier()/].modelUpdating(new StructuredSelection(newValue));
	}
[/template]

[template public partSetter(editor : PropertiesEditionElement) ? (editor.views->first().representation.name = 'ReferencesTable' or editor.views->first().representation.name = 'AdvancedReferencesTable')]
[editor.partSetterUpdateSignature()/] {
		[editor.views->first().name.toJavaIdentifier()/]EditUtil.reinit(value);
		[editor.views->first().name.toJavaIdentifier()/].refresh();
	}
[/template]

[template public partSetter(editor : PropertiesEditionElement) ? (editor.views->first().representation.name = 'TableComposition')]
[editor.partSetterUpdateSignature()/] {
		[editor.views->first().name.toJavaIdentifier()/]EditUtil.reinit(value);
		[editor.views->first().name.toJavaIdentifier()/].refresh();
	}
[/template]

[template public partSetter(editor : PropertiesEditionElement) ? (editor.views->first().representation.name = 'Combo')]
[editor.partSetterUpdateSignature()/] {
		[editor.views->first().name.toJavaIdentifier()/]EditUtil.reinit(value);
		[editor.views->first().name.toJavaIdentifier()/].refresh();
	}
[/template]

[comment === ViewReference managing ===/]
[template public updaterForViewReference(view : View)]
[for (viewRef : ViewReference | view.eAllContents(views::ViewReference).oclAsType(views::ViewReference)) ]
		((CompositePropertiesEditionPart)[viewRef.view.oclAsType(views::View).pepInterface().toLowerFirst()/]).initComponent(eObject, allResources);
[/for]
[/template]

[template public elementEditorGetterSettersForViewReference(view : View, pec : PropertiesEditionComponent, basePackage : String)]
[for (viewRef : ViewReference | view.eAllContents(views::ViewReference)->select(oclIsTypeOf(views::ViewReference)))]
[viewRef.view.oclAsType(views::View).getterForReferencedViewImplementation(pec.model.eefPackage(basePackage).fullPartInterfacePath(view.pepInterface()))/]
[for (elementEditor : ElementEditor | viewRef.view.eAllContents(views::ElementEditor)->select(oclIsTypeOf(views::ElementEditor)))]
[elementEditor.getterImplementationDelegate(fullPartInterfacePath(pec.model.eefPackage(basePackage),view.pepInterface()),viewRef.view.oclAsType(views::View))/]

[elementEditor.setterImplementationDelegate(fullPartInterfacePath(pec.model.eefPackage(basePackage),view.pepInterface()),viewRef.view.oclAsType(views::View))/]

[elementEditor.setMessageImplementationDelegate(fullPartInterfacePath(pec.model.eefPackage(basePackage),view.pepInterface()),viewRef.view.oclAsType(views::View))/]

[elementEditor.unsetMessageImplementationDelegate(fullPartInterfacePath(pec.model.eefPackage(basePackage),view.pepInterface()), viewRef.view.oclAsType(views::View))/]
[/for]
[viewRef.view.oclAsType(views::View).elementEditorGetterSettersForSubViewReference(pec, basePackage, viewRef)/]
[/for]
[/template]

[template public elementEditorGetterSettersForSubViewReference(view : View, pec : PropertiesEditionComponent, basePackage : String, initViewRef : ViewReference)]
[for (viewRef : ViewReference | view.eAllContents(views::ViewReference)->select(oclIsTypeOf(views::ViewReference)))]
[for (elementEditor : ElementEditor | viewRef.view.eAllContents(views::ElementEditor)->select(oclIsTypeOf(views::ElementEditor)))]
[elementEditor.getterImplementationDelegate(fullPartInterfacePath(pec.model.eefPackage(basePackage),view.pepInterface()),initViewRef.view.oclAsType(views::View))/]

[elementEditor.setterImplementationDelegate(fullPartInterfacePath(pec.model.eefPackage(basePackage),view.pepInterface()),initViewRef.view.oclAsType(views::View))/]

[elementEditor.setMessageImplementationDelegate(fullPartInterfacePath(pec.model.eefPackage(basePackage),view.pepInterface()),initViewRef.view.oclAsType(views::View))/]

[elementEditor.unsetMessageImplementationDelegate(fullPartInterfacePath(pec.model.eefPackage(basePackage),view.pepInterface()), initViewRef.view.oclAsType(views::View))/]
[/for]
[viewRef.view.oclAsType(views::View).elementEditorGetterSettersForSubViewReference(pec, basePackage, initViewRef)/]
[/for]
[/template]

[template public elementEditorGetterSettersForSubViews(view : View, pec : PropertiesEditionComponent, basePackage : String)]
[for (subView : View | view.elements->select(oclIsTypeOf(views::View)))]
[subView.getterForSubViewImplementationDelegate(pec.model.eefPackage(basePackage).fullPartInterfacePath(view.pepInterface()))/]
[for (elementEditor : ElementEditor | subView.eAllContents(views::ElementEditor).oclAsType(views::ElementEditor)->select(owningView() = subView))]
[elementEditor.getterImplementationDelegate(fullPartInterfacePath(pec.model.eefPackage(basePackage),view.pepInterface()),subView)/]

[elementEditor.setterImplementationDelegate(fullPartInterfacePath(pec.model.eefPackage(basePackage),view.pepInterface()),subView)/]

[elementEditor.setMessageImplementationDelegate(fullPartInterfacePath(pec.model.eefPackage(basePackage),view.pepInterface()),subView)/]

[elementEditor.unsetMessageImplementationDelegate(fullPartInterfacePath(pec.model.eefPackage(basePackage),view.pepInterface()), subView)/]
[/for]
[subView.elementEditorGetterSettersForSubViewsDelegate(pec, basePackage, subView)/]
[/for]
[/template]

[template public elementEditorGetterSettersForSubViewsDelegate(view : View, pec : PropertiesEditionComponent, basePackage : String, initView : View)]
[for (subView : View | view.elements->select(oclIsTypeOf(views::View)))]
[for (elementEditor : ElementEditor | subView.eAllContents(views::ElementEditor).oclAsType(views::ElementEditor)->select(owningView() = subView))]
[elementEditor.getterImplementationDelegate(fullPartInterfacePath(pec.model.eefPackage(basePackage),view.pepInterface()),initView)/]

[elementEditor.setterImplementationDelegate(fullPartInterfacePath(pec.model.eefPackage(basePackage),view.pepInterface()),initView)/]

[elementEditor.setMessageImplementationDelegate(fullPartInterfacePath(pec.model.eefPackage(basePackage),view.pepInterface()),initView)/]

[elementEditor.unsetMessageImplementationDelegate(fullPartInterfacePath(pec.model.eefPackage(basePackage),view.pepInterface()), initView)/]
[/for]
[view.elementEditorGetterSettersForSubViewsDelegate(pec, basePackage, initView)/]
[/for]
[/template]