[comment 
 *******************************************************************************
 * Copyright (c) 2008-2009 Obeo.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Obeo - initial API and implementation
 *******************************************************************************
 /]
[module imageViewerFormImpl('http://www.eclipse.org/emf/eef/views/1.0.0', 'http://www.eclipse.org/emf/eef/components/1.0.0', 'http://www.eclipse.org/emf/2002/Ecore') extends widgetFormImpl/]

[import common /]
[import naming /]
[import viewCommon /]
[comment I don't see a better way to get specific form services for the moment /]
[import widgetFormImpl /]

[template public manageImports(widget : Widget, pec : PropertiesEditionComponent, view : View, basePackage : String) overrides manageImports ? (widget.name = 'ImageViewer')]
import org.eclipse.emf.eef.runtime.ui.widgets.imageviewer.EEFImageViewer;
[/template]

[template public widgetDeclaration(editor : ElementEditor) overrides widgetDeclaration ? (editor.representationName('ImageViewer'))]
protected EEFImageViewer [editor.name.toJavaIdentifier()/];
[/template]

[template public implementation(editor : ElementEditor) overrides implementation ? (editor.representationName('ImageViewer'))]
		create[editor.name.toJavaClassifier()/]ImageViewer(widgetFactory, [editor.widgetContainer().trim()/]);
[/template]

[template public additionalImplementation(editor : ElementEditor, pec : PropertiesEditionComponent, inputPEC: PropertiesEditionComponent) overrides additionalImplementation ? (editor.representationName('ImageViewer'))]
	/**
	 * [editor.owningViewsRepository().associatedGenModel().generationMark()/]
	 */
	protected void create[editor.name.toJavaClassifier()/]ImageViewer(FormToolkit widgetFactory, Composite parent) {
		FormUtils.createPartLabel(widgetFactory, parent, [editor.owningViewsRepository().messagesProvider()/].[editor.editorKey(editor.owningView())/], propertiesEditionComponent.isRequired([editor.editorID()/], [editor.owningViewsRepository().vrClass()/].FORM_KIND));
		[editor.name.toJavaIdentifier()/] = new EEFImageViewer(parent, SWT.BORDER);
		[if (editor.readOnly)]
		[editor.name.toJavaIdentifier()/].setEnabled(false);
		[editor.name.toJavaIdentifier()/].setToolTipText([editor.owningViewsRepository().messagesProvider()/].[editor.owningViewString()/]_ReadOnly);
		[/if]
		GridData [editor.name.toJavaIdentifier()/]Data = new GridData();
		[if (editor.owningViewsRepository().associatedGenModel().useJMergeForUserCode)]
		[editor.defaultLayoutData()/] 		
		[else]
		// [protected (' for '.concat(editor.name).concat(' layout data customization'))]
		[editor.defaultLayoutData()/] 		
		// [/protected]
 		[/if]
		[editor.name.toJavaIdentifier()/].setLayoutData([editor.name.toJavaIdentifier()/]Data);
		[editor.name.toJavaIdentifier()/].addSelectionChangedListener(new ISelectionChangedListener() {
			
			public void selectionChanged(SelectionChangedEvent event) {
				propertiesEditionComponent.firePropertiesChanged(new PropertiesEditionEvent([editor.editionPart()/].this, [editor.editorID()/], PropertiesEditionEvent.COMMIT, PropertiesEditionEvent.SET, null, [editor.viewCompletePackageGetter()/]));
			}
		});
		FormUtils.createHelpButton(widgetFactory, parent, propertiesEditionComponent.getHelpContent([editor.editorID()/], [editor.owningViewsRepository().vrClass()/].FORM_KIND), null); //$NON-NLS-1$
	}
[/template]

[template private defaultLayoutData (editor : ElementEditor) ]
		[editor.name.toJavaIdentifier()/]Data.widthHint = 200;
		[editor.name.toJavaIdentifier()/]Data.heightHint = 200;
		[editor.name.toJavaIdentifier()/]Data.horizontalAlignment = SWT.CENTER;
		[editor.name.toJavaIdentifier()/]Data.verticalAlignment = SWT.CENTER;

[/template]

