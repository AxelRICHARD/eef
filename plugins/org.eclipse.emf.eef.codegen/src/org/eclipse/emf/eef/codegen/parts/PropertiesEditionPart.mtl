[comment 
 *******************************************************************************
 * Copyright (c) 2008-2009 Obeo.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Obeo - initial API and implementation
 *******************************************************************************
 /]
[module PropertiesEditionPart('http://www.eclipse.org/emf/eef/components/1.0.0','http://www.eclipse.org/emf/eef/mapping/1.0.0', 'http://www.eclipse.org/emf/2002/Ecore', 'http://www.eclipse.org/emf/eef/views/1.0.0')/]

[import naming /]
[import common /]
[import viewCommon /]
[import viewUtils /]
[import viewGettersSetters /]

[template public PropertiesEditionPart(peContext : PropertiesEditionContext, basePackage : String)]
[comment @main /]
[for (inputPEC : PropertiesEditionComponent | peContext.eAllContents(components::PropertiesEditionComponent))]
[for (view : View | inputPEC.involvedViews()) ? (view.oclIsTypeOf(views::View))][let pec : PropertiesEditionComponent = if (inputPEC.views->includes(view))
	then inputPEC
	else inputPEC.referencedBinding.binding->select(views->includes(view))->first().oclAsType(components::PropertiesEditionComponent)
	endif]
[if (view.mustBeGenerated(inputPEC))]
	[file (fullFilePath(view), false)]
[peContext.associatedGenModel().licenceText().trim()/]
package [view.owningViewsRepository().vrPackage()/].parts.impl;

// [protected ('for imports')]

import java.util.ArrayList;
import java.util.List;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.emf.eef.runtime.api.component.IPropertiesEditionComponent;
import org.eclipse.emf.eef.runtime.impl.notify.PropertiesEditionEvent;
import org.eclipse.emf.eef.runtime.impl.parts.CompositePropertiesEditionPart;
[if (view.eAllContents(views::ElementEditor).oclAsType(views::ElementEditor)->notEmpty())]
import org.eclipse.osgi.util.NLS;
[/if]
import org.eclipse.swt.SWT;
import org.eclipse.swt.events.ModifyEvent;
import org.eclipse.swt.events.ModifyListener;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Group;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.Text;

[for (ePackage : EPackage | pec.involvedEditionElements().oclAsType(components::PropertiesEditionElement).model.eContainingClass.ePackage->asSet()->including(pec.model.oclAsType(ecore::EClass).ePackage))]
import [ePackage.qualifiedMetamodelPackage(basePackage)/];
[/for]
[for (viewRepository : ViewsRepository | pec.involvedViews().oclAsType(views::View).owningViewsRepository()->asSet())]
import [viewRepository.qualifiedMessagesProvider()/];
[/for]
import org.eclipse.emf.eef.runtime.api.component.IPropertiesEditionComponent;
import org.eclipse.emf.eef.runtime.api.parts.ISWTPropertiesEditionPart;
import org.eclipse.emf.eef.runtime.impl.parts.CompositePropertiesEditionPart;
[if (view.eAllContents(views::ElementEditor).oclAsType(views::ElementEditor)->select(representation.name = 'ReferencesTable' or representation.name = 'AdvancedReferencesTable' or representation.name = 'TableComposition' or representation.name = 'AdvancedTableComposition')->notEmpty())]
import org.eclipse.emf.eef.runtime.api.policies.IPropertiesEditionPolicy;
import org.eclipse.emf.eef.runtime.api.providers.IPropertiesEditionPolicyProvider;
import org.eclipse.emf.eef.runtime.impl.policies.EObjectPropertiesEditionContext;
import org.eclipse.emf.eef.runtime.impl.services.PropertiesEditionPolicyProviderService;
[/if]

import org.eclipse.emf.eef.runtime.ui.widgets.SWTUtils;
import [view.owningViewsRepository().vrPackage()/].parts.[view.pepInterface()/];
[for (widget : Widget | view.eAllContents(views::ElementEditor).oclAsType(views::ElementEditor).representation->asSet())]
[widget.manageImports(pec, view, basePackage)/]
[/for]
[for (widget : Widget | view.eAllContents(views::Container).oclAsType(views::Container).representation->asSet()) ? (not widget.oclIsUndefined())]
[widget.manageImports(pec, view, basePackage)/]
[/for]
[for (viewsRepository : ViewsRepository | view.eAllContents(views::ViewReference).oclAsType(views::ViewReference).view.oclAsType(views::View).owningViewsRepository()->append(view.owningViewsRepository()))]
import [viewsRepository.vrQualifiedClass()/];
[/for]
[if (view.eAllContents(views::ViewReference)->notEmpty() or view.eAllContents(views::View)->notEmpty())]
import org.eclipse.emf.eef.runtime.api.parts.IPropertiesEditionPart;
import org.eclipse.emf.eef.runtime.api.providers.IPropertiesEditionPartProvider;
import org.eclipse.emf.eef.runtime.impl.services.PropertiesEditionPartProviderService;
[for (viewRef : ViewReference | view.eAllContents(views::ViewReference).oclAsType(views::ViewReference)) ]
import [viewRef.view.owningViewsRepository().vrPackage()/].parts.[viewRef.view.oclAsType(views::View).pepInterface()/];
	[for (widget : Widget | viewRef.view.eAllContents(views::ElementEditor).oclAsType(views::ElementEditor).representation->asSet())]
[widget.manageImports(pec, view, basePackage)/]
	[/for]
[/for]
[for (subView : View | view.elements->select(oclIsKindOf(views::View))) ]
import [subView.owningViewsRepository().vrPackage()/].parts.[subView.pepInterface()/];
[/for]
[/if]

// [/protected]

/**
 * [peContext.associatedGenModel().authorText().trim()/]
 */
public class [view.pepClass()/] extends CompositePropertiesEditionPart implements ISWTPropertiesEditionPart, [view.pepInterface()/] {

[for (element : ViewElement | view.eAllContents()) ? (element.oclIsKindOf(ElementEditor))][let editor : ElementEditor = element.oclAsType(ElementEditor)]
[editor.widgetDeclaration()/]
[/let][/for]
[comment managing ViewReferences/]
[view.widgetDeclarationForViewReference()/]
[comment managing ViewReferences/]
[view.widgetDeclarationForSubViews()/]
	
	public [view.pepClass()/](IPropertiesEditionComponent editionComponent) {
		super(editionComponent);
	}

	public Composite createFigure(final Composite parent) {
		view = new Composite(parent, SWT.NONE);
		GridLayout layout = new GridLayout();
		layout.numColumns = 3;
		view.setLayout(layout);
		[comment createControls(view, new EEFMessageManager(view));/]
		createControls(view);
		return view;
	}

	public void createControls(Composite view) { 
[for (aView : ViewElement | view.elements)]
[aView.implementation()/]
[/for]

		// [protected ('for additional ui definition')]
		
		// [/protected]

	}

[for (aView : ViewElement | view.eAllContents(views::ViewElement).oclAsType(views::ViewElement)->select(owningView() = view)) ]
[aView.additionalImplementation(pec, inputPEC)/]
[/for]

[for (subView : View | view.elements->select(oclIsKindOf(views::View))) ]
[subView.additionalImplementation(pec, inputPEC)/]
[/for]

	public void firePropertiesChanged(PropertiesEditionEvent event) {
		// [protected ('for tab synchronization')]
		
		// [/protected]

	}
[for (elementEditor : ElementEditor | view.eAllContents(views::ElementEditor).oclAsType(views::ElementEditor)->select(owningView() = view))]

[elementEditor.getterImplementation(fullPartInterfacePath(pec.model.eefPackage(basePackage), view.pepInterface()))/]

[elementEditor.setterImplementation(fullPartInterfacePath(pec.model.eefPackage(basePackage), view.pepInterface()))/]

[elementEditor.setMessageSignature()/] {

	}

[elementEditor.unsetMessageSignature()/] {

	}
[/for]

[comment managing viewReference/]
[view.elementEditorGetterSettersForViewReference(pec, basePackage)/]

[comment managing subView/]
[view.elementEditorGetterSettersForSubViews(pec, basePackage)/]

[for (viewElement : ViewElement | view.eAllContents(views::CustomElementEditor).oclAsType(views::CustomElementEditor)->select(owningView() = view))]
	// [protected ('for '.concat(viewElement.name).concat(' specific getters and setters implementation'))]
	
	// [/protected]

[/for]

	// [protected ('additional methods')]
	
	// [/protected]

}[/file]
[/if]
[/let][/for]
[for (view : View | inputPEC.involvedViews()) ? (inputPEC.explicit and view.oclIsTypeOf(views::CustomView))][let pec : PropertiesEditionComponent = if (inputPEC.views->includes(view))
	then inputPEC
	else inputPEC.referencedBinding.binding->select(views->includes(view))->first().oclAsType(components::PropertiesEditionComponent)
	endif]
	[file (fullFilePath(view), false)]
[peContext.associatedGenModel().licenceText().trim()/]
package [pec.model.eefPackage(basePackage)/].parts.impl;

// [protected ('for imports')]
import java.util.ArrayList;
import java.util.List;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.emf.eef.runtime.api.component.IPropertiesEditionComponent;
import org.eclipse.emf.eef.runtime.api.parts.ISWTPropertiesEditionPart;
import org.eclipse.emf.eef.runtime.impl.parts.CompositePropertiesEditionPart;
import org.eclipse.swt.SWT;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Composite;

import [pec.model.qualifiedName(basePackage)/];
import [pec.model.eefPackage(basePackage)/].parts.[view.pepInterface()/];

// [/protected]

/**
 * [peContext.associatedGenModel().authorText().trim()/]
 */
public class [view.pepClass()/] extends CompositePropertiesEditionPart implements ISWTPropertiesEditionPart, [view.pepInterface()/] {

	// [protected ('widgets declaration')]
	
	// [/protected]

	public [view.pepClass()/](IPropertiesEditionComponent editionComponent) {
		super(editionComponent);
	}

	public Composite createFigure(Composite parent) {
		view = new Composite(parent, SWT.NONE);
		GridLayout layout = new GridLayout();
		layout.numColumns = 1;
		view.setLayout(layout);
		// [protected ('view visual definition')]
		
		// [/protected]

		return view;
	}

	public void firePropertiesChanged(PropertiesEditionEvent event) {
		// [protected ('for tab synchronization')]
		
		// [/protected]

	}

	// [protected ('additional methods')]
	
	// [/protected]

}
[/file]
[/let][/for]
[/for]
[/template]

[template public fullFilePath(view : View)]
[view.owningViewsRepository().vrPackage().toPath()/]/parts/impl/[view.pepClass()/].java
[/template]