[comment 
 *******************************************************************************
 * Copyright (c) 2008-2009 Obeo.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Obeo - initial API and implementation
 *******************************************************************************
 /]
[module textGettersSetters('http://www.eclipse.org/emf/eef/views/1.0.0') extends widgetGettersSetters/]

[import common/]
[import naming/]
[import widgetGettersSetters /]

[template public getterSignatureImplementation(elementEditor : ElementEditor) overrides getterSignatureImplementation ? (elementEditor.representationName('Text'))]
[elementEditor.getterSignature()/] {
		return [elementEditor.name.toJavaIdentifier()/].getText();
	}
[/template]

[template public setterSignatureImplementation(elementEditor : ElementEditor) overrides setterSignatureImplementation ? (elementEditor.representationName('Text'))]
[elementEditor.setterSignature()/] {
		if (newValue != null) {
			[elementEditor.name.toJavaIdentifier()/].setText(newValue);
		} else {
			[elementEditor.name.toJavaIdentifier()/].setText("");  //$NON-NLS-1$
		}
	}
[/template]

[template public setMessageDeclaration(elementEditor : ElementEditor) overrides setMessageDeclaration ? (elementEditor.representationName('Text'))]
[elementEditor.setMessageSignature()/];
[/template]

[template public unsetMessageDeclaration(elementEditor : ElementEditor) overrides unsetMessageDeclaration ? (elementEditor.representationName('Text'))]
[elementEditor.unsetMessageSignature()/];
[/template]

[template public setMessageImplementation(elementEditor : ElementEditor, fullInterfacePath : String) overrides setMessageImplementation ? (elementEditor.representationName('Text'))]
[elementEditor.setMessageSignature()/] {
		messageManager.addMessage("[elementEditor.name.toJavaClassifier()/]_key", msg, null, msgLevel, [elementEditor.name.toJavaIdentifier()/]);
	}
[/template]

[comment delegate implementation for ViewReference/]
[template public setMessageImplementationDelegate(elementEditor : ElementEditor, fullInterfacePath : String, referencedView : View) overrides setMessageImplementationDelegate ? (elementEditor.representationName('Text'))]
[elementEditor.setMessageSignature()/] {
		[referencedView.name.toJavaClassifier().toLowerFirst()/]PropertiesEditionPart.setMessageFor[elementEditor.name.toJavaClassifier()/](msg, msgLevel);
	}
[/template]

[template public unsetMessageImplementation(elementEditor : ElementEditor, fullInterfacePath : String) overrides unsetMessageImplementation ? (elementEditor.representationName('Text'))]
[elementEditor.unsetMessageSignature()/] {
		messageManager.removeMessage("[elementEditor.name.toJavaClassifier()/]_key", [elementEditor.name.toJavaIdentifier()/]);
	}
[/template]

[template public unsetMessageImplementationDelegate(elementEditor : ElementEditor, fullInterfacePath : String, referencedView : View) overrides unsetMessageImplementationDelegate ? (elementEditor.representationName('Text'))]
[elementEditor.unsetMessageSignature()/] {
		[referencedView.name.toJavaIdentifier()/]PropertiesEditionPart.unsetMessageFor[elementEditor.name.toJavaClassifier()/]();
	}
[/template]
