[comment 
 *******************************************************************************
 * Copyright (c) 2008-2009 Obeo.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Obeo - initial API and implementation
 *******************************************************************************
 /]
[module referencetableSWTImpl('http://www.eclipse.org/emf/eef/views/1.0.0', 'http://www.eclipse.org/emf/eef/components/1.0.0', 'http://www.eclipse.org/emf/2002/Ecore', 'http://www.eclipse.org/emf/eef/generation/1.0.0') extends widgetSWTImpl/]

[import common /]
[import naming /]
[import viewCommon /]
[comment I don't see a better way to get specific swt services for the moment /]
[import widgetSWTImpl /]

[comment ===== Case Widget = ReferencesTable ===== /]
[template public manageImports(widget : Widget, pec : PropertiesEditionComponent, view : View, basePackage : String) overrides manageImports ? (widget.name = 'ReferencesTable')]
import org.eclipse.jface.viewers.TableViewer;
import org.eclipse.jface.viewers.ViewerFilter;
import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider;
import org.eclipse.swt.widgets.TableColumn;
import org.eclipse.jface.viewers.ArrayContentProvider;
import org.eclipse.jface.viewers.ITableLabelProvider;
import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.jface.viewers.StructuredSelection;
import java.util.Iterator;
import org.eclipse.emf.common.notify.AdapterFactory;
import org.eclipse.jface.viewers.ILabelProviderListener;
import org.eclipse.jface.viewers.IStructuredSelection;
import org.eclipse.jface.viewers.Viewer;
import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.graphics.Image;
import org.eclipse.emf.eef.runtime.ui.widgets.EMFModelViewerDialog;
[for (pee : PropertiesEditionElement | view.eAllContents(views::ElementEditor).oclAsType(views::ElementEditor)->select(representation.name->includes('ReferencesTable')).involvedPropertiesEditionElement())]
import [pee.model.eType.qualifiedName(basePackage)/];
[/for]
[/template]

[template public widgetDeclaration(editor : ElementEditor) overrides widgetDeclaration ? (editor.representation.name = 'ReferencesTable')]
	protected TableViewer [editor.name.toJavaIdentifier()/];
	protected Button add[editor.name.toJavaClassifier()/];
	protected Button remove[editor.name.toJavaClassifier()/];
	protected List<ViewerFilter> [editor.name.toJavaIdentifier()/]BusinessFilters = new ArrayList<ViewerFilter>();
	protected List<ViewerFilter> [editor.name.toJavaIdentifier()/]Filters = new ArrayList<ViewerFilter>();
[/template]

[template public implementation(editor : ElementEditor) overrides implementation ? (editor.representation.name = 'ReferencesTable')]
		create[editor.name.toJavaClassifier()/]ReferencesTable([editor.widgetContainer().trim()/]);
[/template]

[template public additionalImplementation(editor : ElementEditor, pec : PropertiesEditionComponent, inputPEC: PropertiesEditionComponent) overrides additionalImplementation ? (editor.representation.name = 'ReferencesTable')]
	/**
	 * @param parent
	 * [editor.owningViewsRepository().associatedGenModel().generationMark()/]
	 */
	protected void create[editor.name.toJavaClassifier()/]ReferencesTable(Composite parent) {
		Label [editor.name.toJavaIdentifier()/]Label = SWTUtils.createPartLabel(parent, [editor.owningViewsRepository().messagesProvider()/].[editor.editorKey(editor.owningView())/], propertiesEditionComponent.isRequired([editor.editorID()/], [editor.owningViewsRepository().vrClass()/].SWT_KIND));
		GridData [editor.name.toJavaIdentifier()/]LabelData = new GridData();
		[editor.name.toJavaIdentifier()/]LabelData.horizontalSpan = 3;
		[editor.name.toJavaIdentifier()/]Label.setLayoutData([editor.name.toJavaIdentifier()/]LabelData);
		[editor.name.toJavaIdentifier()/] = create[editor.name.toJavaClassifier()/]Viewer(parent, adapterFactory);
		GridData [editor.name.toJavaIdentifier()/]Data = new GridData(GridData.FILL_HORIZONTAL);
		[editor.name.toJavaIdentifier()/]Data.horizontalSpan = 2;
		[editor.name.toJavaIdentifier()/]Data.minimumHeight = 120;
		[editor.name.toJavaIdentifier()/]Data.heightHint = 120;
		[editor.name.toJavaIdentifier()/].getTable().setLayoutData([editor.name.toJavaIdentifier()/]Data);
		EditingUtils.setID([editor.name.toJavaIdentifier()/].getTable(), [editor.editorID()/]);
		EditingUtils.setEEFtype([editor.name.toJavaIdentifier()/].getTable(), "eef::[editor.representation.name/]::field"); //$NON-NLS-1$		
		create[editor.name.toJavaClassifier()/]ControlPanel(parent);
	}

	/**
	 * [editor.owningViewsRepository().associatedGenModel().generationMark()/]
	 */
	protected TableViewer create[editor.name.toJavaClassifier()/]Viewer(Composite container, AdapterFactory adapter) {
		org.eclipse.swt.widgets.Table table = new org.eclipse.swt.widgets.Table(container, SWT.FULL_SELECTION);
		table.setHeaderVisible(true);
		[if (editor.readOnly)]
		table.setEnabled(false);
		table.setToolTipText([editor.owningViewsRepository().messagesProvider()/].[editor.owningViewString()/]_ReadOnly);
		[/if]
		GridData gd = new GridData();
		gd.grabExcessHorizontalSpace = true;
		gd.horizontalAlignment = GridData.FILL;
		gd.grabExcessVerticalSpace = true;
		gd.verticalAlignment = GridData.FILL;
		table.setLayoutData(gd);
		table.setLinesVisible(true);
		[if (editor.owningViewsRepository().associatedGenModel().useJMergeForUserCode)]
		[editor.defaultColumnInitialisation()/]
		[else]
		// [protected ('for table '.concat(editor.name).concat(' s columns definition'))]		
		[editor.defaultColumnInitialisation()/]
		// [/protected]
		[/if]
		
		TableViewer result = new TableViewer(table);
		result.setLabelProvider(new ITableLabelProvider() {
	
		[if (editor.owningViewsRepository().associatedGenModel().useJMergeForUserCode)]
		[editor.defaultLabelProviderInitialisation()/]
		[else]
			// [protected ('for table '.concat(editor.name).concat(' label provider'))]
			[editor.defaultLabelProviderInitialisation()/]			
			// [/protected]
		[/if]

			public void addListener(ILabelProviderListener listener) {
			}

			public void dispose() {
			}

			public boolean isLabelProperty(Object element, String property) {
				return false;
			}

			public void removeListener(ILabelProviderListener listener) {
			}

		});
		return result;
	}

	/**
	 * [editor.owningViewsRepository().associatedGenModel().generationMark()/]
	 */
	protected void create[editor.name.toJavaClassifier()/]ControlPanel(Composite container) {
		Composite result = new Composite(container, SWT.NONE);
		GridLayout layout = new GridLayout();
		layout.numColumns = 1;
		result.setLayout(layout);
		add[editor.name.toJavaClassifier()/] = new Button(result, SWT.NONE);
		add[editor.name.toJavaClassifier()/].setText([editor.owningViewsRepository().messagesProvider()/].PropertiesEditionPart_AddListViewerLabel);
		[if (editor.readOnly)]
		add[editor.name.toJavaClassifier()/].setEnabled(false);
		add[editor.name.toJavaClassifier()/].setToolTipText([editor.owningViewsRepository().messagesProvider()/].[editor.owningViewString()/]_ReadOnly);
		[/if]
		GridData addData = new GridData(GridData.FILL_HORIZONTAL);
		add[editor.name.toJavaClassifier()/].setLayoutData(addData);
		add[editor.name.toJavaClassifier()/].addSelectionListener(new SelectionAdapter() {

			/**
			 * {@inheritDoc}
			 * 
			 * @see org.eclipse.swt.events.SelectionAdapter#widgetSelected(org.eclipse.swt.events.SelectionEvent)
			 * [editor.owningViewsRepository().associatedGenModel().generationMark()/]
			 */
			public void widgetSelected(SelectionEvent e) {
				add[editor.name.toJavaClassifier()/]();
			}

		});
		EditingUtils.setID(add[editor.name.toJavaClassifier()/], [editor.editorID()/]);
		EditingUtils.setEEFtype(add[editor.name.toJavaClassifier()/], "eef::[editor.representation.name/]::addbutton"); //$NON-NLS-1$
		remove[editor.name.toJavaClassifier()/] = new Button(result, SWT.NONE);
		remove[editor.name.toJavaClassifier()/].setText([editor.owningViewsRepository().messagesProvider()/].PropertiesEditionPart_RemoveListViewerLabel);
		[if (editor.readOnly)]
		remove[editor.name.toJavaClassifier()/].setEnabled(false);
		remove[editor.name.toJavaClassifier()/].setToolTipText([editor.owningViewsRepository().messagesProvider()/].[editor.owningViewString()/]_ReadOnly);
		[/if]
		GridData removeData = new GridData(GridData.FILL_HORIZONTAL);
		remove[editor.name.toJavaClassifier()/].setLayoutData(removeData);
		remove[editor.name.toJavaClassifier()/].addSelectionListener(new SelectionAdapter() {

			/**
			 * {@inheritDoc}
			 * 
			 * @see org.eclipse.swt.events.SelectionAdapter#widgetSelected(org.eclipse.swt.events.SelectionEvent)
			 * [editor.owningViewsRepository().associatedGenModel().generationMark()/]
			 */
			public void widgetSelected(SelectionEvent e) {
				if ([editor.name.toJavaIdentifier()/].getSelection() instanceof IStructuredSelection) {
					remove[editor.name.toJavaClassifier()/]((IStructuredSelection) [editor.name.toJavaIdentifier()/].getSelection());
				}
			}

		});
		EditingUtils.setID(remove[editor.name.toJavaClassifier()/], [editor.editorID()/]);
		EditingUtils.setEEFtype(remove[editor.name.toJavaClassifier()/], "eef::[editor.representation.name/]::removebutton"); //$NON-NLS-1$
	}

	/**
	 * [editor.owningViewsRepository().associatedGenModel().generationMark()/]
	 */
	protected void add[editor.name.toJavaClassifier()/]() {
		EMFModelViewerDialog dialog = new EMFModelViewerDialog(new AdapterFactoryLabelProvider(adapterFactory), [editor.name.toJavaIdentifier()/].getInput(), [editor.name.toJavaIdentifier()/]Filters, [editor.name.toJavaIdentifier()/]BusinessFilters, false, true) {
			public void process(IStructuredSelection selection) {
				for (Iterator iter = selection.iterator(); iter.hasNext();) {
					EObject elem = (EObject) iter.next();
					propertiesEditionComponent.firePropertiesChanged(new PropertiesEditionEvent([editor.editionPart()/].this, [editor.editorID()/], PropertiesEditionEvent.COMMIT, PropertiesEditionEvent.ADD, null, elem));
				}
			}

		};
		dialog.open();
		[editor.name.toJavaIdentifier()/].refresh();
	}

	/**
	 * @param selection the [editor.name/] to remove
	 * [editor.owningViewsRepository().associatedGenModel().generationMark()/]
	 */
	protected void remove[editor.name.toJavaClassifier()/](IStructuredSelection selection) {
		for (Iterator iter = selection.iterator(); iter.hasNext();) {
			EObject elem = (EObject) iter.next();
			propertiesEditionComponent.firePropertiesChanged(new PropertiesEditionEvent([editor.editionPart()/].this, [editor.editorID()/], PropertiesEditionEvent.COMMIT, PropertiesEditionEvent.REMOVE, null, elem));
		}
		[editor.name.toJavaIdentifier()/].refresh();
	}
[/template]

[template private defaultLabelProviderInitialisation(editor : ElementEditor) ]
			public String getColumnText(Object object, int columnIndex) {
				AdapterFactoryLabelProvider labelProvider = new AdapterFactoryLabelProvider(adapterFactory);
				if (object instanceof EObject) {
					switch (columnIndex) {
					case 0:
						return labelProvider.getText(object);
					}
				}
				return ""; //$NON-NLS-1$
			}

			public Image getColumnImage(Object element, int columnIndex) {
				return null;
			}

[/template]

[template private defaultColumnInitialisation (editor : ElementEditor) ]
		TableColumn name = new TableColumn(table, SWT.NONE);
		name.setWidth(80);
		name.setText("Label"); //$NON-NLS-1$

[/template]

[comment ===== Case Widget = AdvancedReferencesTable ===== /]
[template public manageImports(widget : Widget, pec : PropertiesEditionComponent, view : View, basePackage : String) overrides manageImports ? (widget.name = 'AdvancedReferencesTable')]
import org.eclipse.jface.viewers.TableViewer;
import org.eclipse.jface.viewers.ViewerFilter;
import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider;
import org.eclipse.swt.widgets.TableColumn;
import org.eclipse.jface.viewers.ArrayContentProvider;
import org.eclipse.jface.viewers.ITableLabelProvider;
import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.jface.viewers.StructuredSelection;
import java.util.Iterator;
import org.eclipse.emf.common.notify.AdapterFactory;
import org.eclipse.jface.viewers.ILabelProviderListener;
import org.eclipse.jface.viewers.IStructuredSelection;
import org.eclipse.jface.viewers.Viewer;
import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.emf.eef.runtime.ui.widgets.EMFModelViewerDialog;
import org.eclipse.emf.eef.runtime.ui.widgets.TabElementTreeSelectionDialog;
[for (ePackage : EPackage | view.eAllContents(views::ElementEditor).oclAsType(views::ElementEditor)->select(representation.name->includes('AdvancedReferencesTable')).involvedPropertiesEditionElement().model.eType.ePackage->asSet() )]
import [ePackage.qualifiedMetamodelPackage(basePackage)/];
[/for]
[for (pee : PropertiesEditionElement | view.eAllContents(views::ElementEditor).oclAsType(views::ElementEditor)->select(representation.name->includes('AdvancedReferencesTable')).involvedPropertiesEditionElement() )]
import [pee.model.eType.qualifiedName(basePackage)/];
[/for]
import org.eclipse.emf.eef.runtime.ui.widgets.ReferencesTable;
import org.eclipse.emf.eef.runtime.ui.widgets.ReferencesTable.ReferencesTableListener;
import org.eclipse.emf.eef.runtime.impl.filters.EObjectFilter;
[/template]

[template public widgetDeclaration(editor : ElementEditor) overrides widgetDeclaration ? (editor.representation.name = 'AdvancedReferencesTable')]
	protected ReferencesTable<? extends EObject[comment editor.involvedPropertiesEditionElement().model.eType.name/]> [editor.name.toJavaIdentifier()/];
	protected List<ViewerFilter> [editor.name.toJavaIdentifier()/]BusinessFilters = new ArrayList<ViewerFilter>();
	protected List<ViewerFilter> [editor.name.toJavaIdentifier()/]Filters = new ArrayList<ViewerFilter>();
[/template]

[template public implementation(editor : ElementEditor) overrides implementation ? (editor.representation.name = 'AdvancedReferencesTable')]
		create[editor.name.toJavaClassifier()/]AdvancedReferencesTable([editor.widgetContainer().trim()/]);
[/template]

[template public additionalImplementation(editor : ElementEditor, pec : PropertiesEditionComponent, inputPEC: PropertiesEditionComponent) overrides additionalImplementation ? (editor.representation.name = 'AdvancedReferencesTable')]
	/**
	 * [editor.owningViewsRepository().associatedGenModel().generationMark()/]
	 */
	protected void create[editor.name.toJavaClassifier()/]AdvancedReferencesTable(Composite parent) {
		this.[editor.name.toJavaIdentifier()/] = new ReferencesTable<[editor.involvedPropertiesEditionElement().model.eType.name/]>([editor.owningViewsRepository().messagesProvider()/].[editor.editorKey(editor.owningView())/], new ReferencesTableListener<[editor.involvedPropertiesEditionElement().model.eType.name/]>() {
			public void handleAdd() {
				TabElementTreeSelectionDialog<[editor.involvedPropertiesEditionElement().model.eType.name/]> dialog = new TabElementTreeSelectionDialog<[editor.involvedPropertiesEditionElement().model.eType.name/]>(resourceSet, [editor.name.toJavaIdentifier()/]Filters, [editor.name.toJavaIdentifier()/]BusinessFilters,
				"[editor.involvedPropertiesEditionElement().model.eType.name/]", [editor.involvedPropertiesEditionElement().editionElementPackage()/].eINSTANCE.get[editor.involvedPropertiesEditionElement().model.eType.name/](), current.eResource()) {

					public void process(IStructuredSelection selection) {
						for (Iterator<?> iter = selection.iterator(); iter.hasNext();) {
							EObject elem = (EObject) iter.next();
							propertiesEditionComponent.firePropertiesChanged(new PropertiesEditionEvent([editor.editionPart()/].this, [editor.editorID()/],
								PropertiesEditionEvent.COMMIT, PropertiesEditionEvent.ADD, null, elem));
						}
						[editor.name.toJavaIdentifier()/].refresh();
					}

				};
				dialog.open();
			}
			public void handleEdit([editor.involvedPropertiesEditionElement().model.eType.name/] element) { edit[editor.name.toJavaClassifier()/](element); }
			public void handleMove([editor.involvedPropertiesEditionElement().model.eType.name/] element, int oldIndex, int newIndex) { move[editor.name.toJavaClassifier()/](element, oldIndex, newIndex); }
			public void handleRemove([editor.involvedPropertiesEditionElement().model.eType.name/] element) { removeFrom[editor.name.toJavaClassifier()/](element); }
			public void navigateTo([editor.involvedPropertiesEditionElement().model.eType.name/] element) { }
		});
		this.[editor.name.toJavaIdentifier()/].setHelpText(propertiesEditionComponent.getHelpContent([editor.editorID()/], [editor.owningViewsRepository().vrClass()/].SWT_KIND));
		this.[editor.name.toJavaIdentifier()/].createControls(parent);
		[if (editor.readOnly)]
		[editor.name.toJavaIdentifier()/].setEnabled(false);
		[editor.name.toJavaIdentifier()/].setToolTipText([editor.owningViewsRepository().messagesProvider()/].[editor.owningViewString()/]_ReadOnly);
		[/if]
		GridData [editor.name.toJavaIdentifier()/]Data = new GridData(GridData.FILL_HORIZONTAL);
		[editor.name.toJavaIdentifier()/]Data.horizontalSpan = 3;
		this.[editor.name.toJavaIdentifier()/].setLayoutData([editor.name.toJavaIdentifier()/]Data);
		this.[editor.name.toJavaIdentifier()/].disableMove();
		[editor.name.toJavaIdentifier()/].setID([editor.editorID()/]);
		[editor.name.toJavaIdentifier()/].setEEFType("eef::[editor.representation.name/]"); //$NON-NLS-1$
	}

	/**
	 * [editor.owningViewsRepository().associatedGenModel().generationMark()/]
	 */
	protected void move[editor.name.toJavaClassifier()/]([editor.involvedPropertiesEditionElement().model.eType.name/] element, int oldIndex, int newIndex) {
		[if (editor.involvedPropertiesEditionElement().model.eType.oclIsTypeOf(ecore::EClass) and not editor.involvedPropertiesEditionElement().model.eType.oclAsType(ecore::EClass).abstract)]
		propertiesEditionComponent.firePropertiesChanged(new PropertiesEditionEvent([editor.editionPart()/].this, [editor.editorID()/], PropertiesEditionEvent.COMMIT, PropertiesEditionEvent.MOVE, element, newIndex));
		[editor.name.toJavaIdentifier()/].refresh();
		[/if]
	}

	/**
	 * [editor.owningViewsRepository().associatedGenModel().generationMark()/]
	 */
	protected void removeFrom[editor.name.toJavaClassifier()/]([editor.involvedPropertiesEditionElement().model.eType.name/] element) {
		[editor.defaultRemoveOperation()/]		
	}

	/**
	 * [editor.owningViewsRepository().associatedGenModel().generationMark()/]
	 */
	protected void edit[editor.name.toJavaClassifier()/]([editor.involvedPropertiesEditionElement().model.eType.name/] element) {
		[editor.defaultEditOperation()/]		
	}
[/template]

[template public defaultEditOperation (editor : ElementEditor) ]
EObjectPropertiesEditionContext context = new EObjectPropertiesEditionContext(null, element,resourceSet);
PropertiesEditingPolicyProvider policyProvider = PropertiesEditionPolicyProviderService.getInstance().getProvider(context);
PropertiesEditingPolicy policy = policyProvider.getPolicy(context);
if (policy != null) {
	policy.execute();
	[editor.name.toJavaIdentifier()/].refresh();
}
[/template]

[template private defaultRemoveOperation(editor : ElementEditor) ]
propertiesEditionComponent.firePropertiesChanged(new PropertiesEditionEvent([editor.editionPart()/].this, [editor.editorID()/], PropertiesEditionEvent.COMMIT, PropertiesEditionEvent.REMOVE, null, element));
[editor.name.toJavaIdentifier()/].refresh();
[/template]

