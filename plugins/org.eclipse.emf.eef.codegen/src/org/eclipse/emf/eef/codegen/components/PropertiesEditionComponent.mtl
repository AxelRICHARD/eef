[comment 
 *******************************************************************************
 * Copyright (c) 2008-2009 Obeo.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Obeo - initial API and implementation
 *******************************************************************************
 /]
[module PropertiesEditionComponent('http://www.eclipse.org/emf/eef/components/1.0.0','http://www.eclipse.org/emf/eef/mapping/1.0.0', 'http://www.eclipse.org/emf/2002/Ecore', 'http://www.eclipse.org/emf/eef/views/1.0.0')/]

[import naming /]
[import common /]

[template public PropertiesEditionComponent(peContext : PropertiesEditionContext, basePackage : String)]
[comment @main /]
[for (pec : PropertiesEditionComponent | peContext.eAllContents(components::PropertiesEditionComponent))]
[if (pec.needComposedEditionComponent())]
[file (pec.fullFilePath(basePackage).trim(), false)]
[peContext.licenceText().trim()/]
package [pec.model.eefPackage(basePackage).trim()/].components;

import org.eclipse.emf.ecore.EObject;
import [pec.model.qualifiedName(basePackage).trim()/];
import org.eclipse.emf.eef.runtime.impl.components.ComposedPropertiesEditionComponent;
[for (subPec : PropertiesEditionComponent | pec.referencedBinding.binding->select(oclIsTypeOf(components::PropertiesEditionComponent)))]
[if (pec.model.eefPackage(basePackage) <> subPec.model.eefPackage(basePackage))]
	[for (view : View | subPec.views) ? (view.explicit)]	
import [subPec.model.eefPackage(basePackage)/].components.[subPec.subPECClass(view).trim()/];
	[/for]	
[/if]
[/for]

/**
 * [peContext.authorText().trim()/]
 */
public class [pec.pecClass().trim()/] extends ComposedPropertiesEditionComponent {

	public static final String SWT_KIND = "SWT";

	public static final String FORM_KIND = "Form";
		
	/**
	 * The EObject to edit
	 */
	private [pec.model.name/] [pec.model.name.toJavaIdentifier().trim()/];
	
	/**
	 * Parameterized constructor
	 * 
	 * @param [pec.model.name.toJavaIdentifier().trim()/]
	 *            the EObject to edit
	 */
	public [pec.pecClass().trim()/](EObject [pec.model.name.toJavaIdentifier().trim()/], String mode) {
		super(mode);
		if ([pec.model.name.toJavaIdentifier().trim()/] instanceof [pec.model.name/]) {
			this.[pec.model.name.toJavaIdentifier().trim()/] = ([pec.model.name/])[pec.model.name.toJavaIdentifier().trim()/];
[for (view : View | pec.views) ? (view.explicit)]	
			addSubComponent(new [pec.subPECClass(view).trim()/]([pec.model.name.toJavaIdentifier().trim()/], mode));
[/for]
[for (subPec : PropertiesEditionComponent | pec.referencedBinding.binding->select(oclIsTypeOf(components::PropertiesEditionComponent)))]
	[for (view : View | subPec.views) ? (view.explicit)]	
			addSubComponent(new [subPec.subPECClass(view).trim()/]([pec.model.name.toJavaIdentifier().trim()/], mode));
	[/for]
[/for]
		}
	}
}

[/file]
[/if]
[/for]
[/template]

[template public fullFilePath(pec : PropertiesEditionComponent, basePackage : String)]
[pec.model.eefPackage(basePackage).toPath().trim()/]/components/[pec.pecClass().trim()/].java
[/template]
