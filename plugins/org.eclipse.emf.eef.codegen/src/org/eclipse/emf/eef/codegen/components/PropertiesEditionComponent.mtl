[comment 
 *******************************************************************************
 * Copyright (c) 2008-2009 Obeo.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Obeo - initial API and implementation
 *******************************************************************************
 /]
[module PropertiesEditionComponent('http://www.eclipse.org/emf/eef/components/1.0.0','http://www.eclipse.org/emf/eef/mapping/1.0.0', 'http://www.eclipse.org/emf/2002/Ecore', 'http://www.eclipse.org/emf/eef/views/1.0.0')/]

[import naming /]
[import common /]

[template public PropertiesEditionComponent(peContext : PropertiesEditionContext, basePackage : String)]
[comment @main /]
[for (pec : PropertiesEditionComponent | peContext.eAllContents(components::PropertiesEditionComponent))]
[if (pec.needComposedEditionComponent())]
[file (pec.fullFilePath(), false)]
[peContext.associatedGenModel().licenceText().trim()/]
package [pec.model.eefPackage(basePackage)/].components;

// [protected ('for imports')]

import org.eclipse.emf.ecore.EObject;
import [pec.model.qualifiedName(basePackage)/];
import org.eclipse.emf.eef.runtime.impl.components.ComposedPropertiesEditionComponent;
[for (subPec : PropertiesEditionComponent | pec.referencedBinding.binding->select(oclIsTypeOf(components::PropertiesEditionComponent)))]
[if (pec.model.eefPackage(basePackage) <> subPec.model.eefPackage(basePackage))]
	[for (view : View | subPec.views) ? (view.explicit)]
import [subPec.subPECQualifiedClass(view)/];
	[/for]
[/if]
[/for]

// [/protected]

/**
 * [peContext.associatedGenModel().authorText().trim()/]
 */
public class [pec.pecClass()/] extends ComposedPropertiesEditionComponent {

	/**
	 * Parameterized constructor
	 * 
	 * @param [pec.model.name.toJavaIdentifier()/]
	 *            the EObject to edit
	 */
	public [pec.pecClass()/](EObject [pec.model.name.toJavaIdentifier()/], String editing_mode) {
		super(editing_mode);
		if ([pec.model.name.toJavaIdentifier()/] instanceof [pec.model.name/]) {
[for (view : View | pec.views) ? (view.explicit)]
			addSubComponent(new [pec.subPECClass(view)/]([pec.model.name.toJavaIdentifier()/], editing_mode));
[/for]
[for (subPec : PropertiesEditionComponent | pec.referencedBinding.binding->select(oclIsTypeOf(components::PropertiesEditionComponent)))]
	[for (view : View | subPec.views) ? (view.explicit and view.ancestors()->select(oclIsKindOf(views::View)).oclAsType(views::View)->excludesAll(pec.views->asSequence()))]
			addSubComponent(new [subPec.subPECClass(view)/]([pec.model.name.toJavaIdentifier()/], editing_mode));
	[/for]
[/for]
		}
	}
}
[/file]
[/if]
[/for]
[/template]

[template public fullFilePath(pec : PropertiesEditionComponent)]
[pec.pecQualifiedClass().toPath()/].java
[/template]
