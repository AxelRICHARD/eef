[comment encoding = UTF-8
 *******************************************************************************
 * Copyright (c) 2008-2009 Obeo.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Obeo - initial API and implementation
 *******************************************************************************
 /]
[module PropertySection('http://www.eclipse.org/emf/eef/components/1.0.0','http://www.eclipse.org/emf/eef/views/1.0.0','http://www.eclipse.org/emf/2002/Ecore', 'http://www.eclipse.org/emf/eef/generation/1.0.0')/]

[import org::eclipse::emf::eef::codegen::services::common /]
[import org::eclipse::emf::eef::codegen::services::naming /]
[import org::eclipse::emf::eef::codegen::services::viewCommon /]
[import org::eclipse::emf::eef::codegen::services::imports/]

[**
 * @deprecated
 */]
[template public PropertySection(peContext : PropertiesEditionContext, basePackage : String)]
[for (pec : PropertiesEditionComponent | peContext.eAllContents(PropertiesEditionComponent))]
[if (pec.explicit and pec.involvedViews()->size() > 0)]
	[for (view : View | pec.views) ? (view.explicit)]
[peContext.initializeImportManager(basePackage, pec.propertySection(view))/]
[file (pec.fullFilePath(view), false)]
[peContext.associatedGenModel().licenceText().trim()/]
package [pec.editionContext().propertiesPackage()/];
[addImports(Sequence{
	'org.eclipse.core.runtime.IAdaptable',
	'org.eclipse.emf.ecore.EObject',
	'org.eclipse.emf.edit.domain.EditingDomain',
	'org.eclipse.emf.edit.domain.IEditingDomainProvider',
	'org.eclipse.emf.eef.runtime.api.adapters.SemanticAdapter',
	'org.eclipse.emf.eef.runtime.api.component.IPropertiesEditionComponent',
	'org.eclipse.emf.eef.runtime.api.parts.IFormPropertiesEditionPart',
	'org.eclipse.emf.eef.runtime.api.parts.IPropertiesEditionPart',
	'org.eclipse.emf.eef.runtime.api.providers.IPropertiesEditionProvider',
	'org.eclipse.emf.eef.runtime.impl.services.PropertiesEditionComponentService',
	'org.eclipse.jface.viewers.IFilter',
	'org.eclipse.jface.viewers.ISelection',
	'org.eclipse.jface.viewers.IStructuredSelection',
	'org.eclipse.swt.widgets.Composite',
	'org.eclipse.ui.IWorkbenchPart',
	'org.eclipse.ui.views.properties.tabbed.AbstractPropertySection',
	'org.eclipse.ui.views.properties.tabbed.TabbedPropertySheetPage'})/]

[let content : String = peContext.fileContent(peContext, pec, view, basePackage)]
[peContext.genSortedImports()/]
[peContext.additionalImports(pec, view)/]

[content/]
[/let]
[/file]
	[/for]
[/if]
[/for]
[/template]

[template private fileContent(peContext : PropertiesEditionContext, pec : PropertiesEditionComponent, view : View, basePackage : String) ]
/**
 * [peContext.associatedGenModel().authorText().trim()/]
 */
public class [pec.propertySection(view)/] extends AbstractPropertySection implements IFilter {

	[peContext.associatedGenModel().generationComment()/]
	private Composite parent;

	[peContext.associatedGenModel().generationComment()/]
	private IPropertiesEditionComponent propertiesEditionComponent;

	/**
	 * The current selected object or the first object in the selection when
	 * multiple objects are selected.
	 * [peContext.associatedGenModel().generationMark()/]
	 */
	protected EObject eObject;

	/**
	 * The view manager
	 * [peContext.associatedGenModel().generationMark()/]
	 */
	private IPropertiesEditionPart editionPart = null;

	/**
	 * @see org.eclipse.ui.views.properties.tabbed.ISection#createControls(org.eclipse.swt.widgets.Composite,
	 *      org.eclipse.ui.views.properties.tabbed.TabbedPropertySheetPage)
	 * [peContext.associatedGenModel().generationMark()/]
	 */
	public void createControls(Composite parent, TabbedPropertySheetPage aTabbedPropertySheetPage) {
		super.createControls(parent, aTabbedPropertySheetPage);
		this.parent = parent;
	}

	/**
	 * @see org.eclipse.ui.views.properties.tabbed.ISection#setInput(org.eclipse.ui.IWorkbenchPart,
	 *      org.eclipse.jface.viewers.ISelection)
	 * [peContext.associatedGenModel().generationMark()/]
	 */
	public void setInput(IWorkbenchPart part, ISelection selection) {
		super.setInput(part, selection);
		if (!(selection instanceof IStructuredSelection) || 
				!((part instanceof IEditingDomainProvider) || part.getAdapter(IEditingDomainProvider.class) != null)) {
			return;
		}

		Object firstElement = ((IStructuredSelection) selection).getFirstElement();
		EObject newEObject = resolveSemanticObject(firstElement);

		EditingDomain editingDomain = null;
		if (part instanceof IEditingDomainProvider)
			editingDomain = ((IEditingDomainProvider) part).getEditingDomain();
		else if (part.getAdapter(IEditingDomainProvider.class) != null)
			editingDomain = ((IEditingDomainProvider)part.getAdapter(IEditingDomainProvider.class)).getEditingDomain();

		if (editingDomain != null && newEObject != null && newEObject != eObject) {
			eObject = newEObject;
			if (eObject != null) {
				IPropertiesEditionProvider provider = PropertiesEditionComponentService.getInstance().getProvider(eObject);
				if (this.propertiesEditionComponent != null)
					this.propertiesEditionComponent.dispose();
				this.propertiesEditionComponent = provider.getPropertiesEditionComponent(eObject, IPropertiesEditionComponent.LIVE_MODE);
				if (this.propertiesEditionComponent != null) {
					this.propertiesEditionComponent.setLiveEditingDomain(editingDomain);
					// FIXME: find a better way to define the Form constant
					this.editionPart = propertiesEditionComponent.getPropertiesEditionPart(1, [pec.subPECClass(view)/].[view.viewPartConstant(pec)/]); //$NON-NLS-1$
					if (editionPart instanceof IFormPropertiesEditionPart) {
						for (int i = 0; i < parent.getChildren().length; i++) {
							Composite child = (Composite) parent.getChildren()['['/]i[']'/];
							child.dispose();
						}
						((IFormPropertiesEditionPart) this.editionPart).createFigure(parent, getWidgetFactory());
						parent.layout();
						propertiesEditionComponent.initPart(propertiesEditionComponent.translatePart([pec.subPECClass(view)/].[view.viewPartConstant(pec)/]), 1, eObject);
					}
				}
			}
		}
	}

	/**
	 * {@inheritDoc}
	 * 
	 * @see org.eclipse.ui.views.properties.tabbed.AbstractPropertySection#dispose()
	 * [peContext.associatedGenModel().generationMark()/]
	 */
	public void dispose() {
		super.dispose();
		if (this.propertiesEditionComponent != null) {
			this.propertiesEditionComponent.dispose();
			this.propertiesEditionComponent = null;
			this.editionPart = null;
		}
	}

	/**
	 * {@inheritDoc}
	 * 
	 * @see org.eclipse.jface.viewers.IFilter#select(java.lang.Object)
	 * [peContext.associatedGenModel().generationMark()/]
	 */
	public boolean select(Object toTest) {
		EObject eObjectToTest = resolveSemanticObject(toTest);
		return eObjectToTest != null && eObjectToTest.eClass() == [pec.metamodelGetter()/];
	}

[pec.resolveSemanticObject()/]

[view.additionalMethods()/]

}
[/template]

[template public resolveSemanticObject(pec : PropertiesEditionComponent)]
	private EObject resolveSemanticObject(Object object) {
		if (object instanceof EObject) {
			return (EObject)object;
		} else if (object instanceof IAdaptable) {
			IAdaptable adaptable = (IAdaptable)object;
			if (adaptable.getAdapter(SemanticAdapter.class) != null) {
				SemanticAdapter semanticAdapter = (SemanticAdapter)adaptable
						.getAdapter(SemanticAdapter.class);
				return semanticAdapter.getEObject();
			} else if (adaptable.getAdapter(EObject.class) != null) {
				return (EObject)adaptable.getAdapter(EObject.class);
			}
		}
		return null;
	}
[/template]

[template public fullFilePath(pec : PropertiesEditionComponent, view : View)]
[pec.qualifiedPropertySection(view).toPath()/].java
[/template]

[comment overrides this template if additional methods are needed/]
[template public additionalMethods(v : View)]
[/template]

[comment overrides this template if additional imports are needed/]
[template public additionalImports (peContext : PropertiesEditionContext, pec : PropertiesEditionComponent, view : View)/]
