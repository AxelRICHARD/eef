[comment 
 *******************************************************************************
 * Copyright (c) 2008-2009 Obeo.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Obeo - initial API and implementation
 *******************************************************************************
 /]
[module SubPropertiesEditionComponent('http://www.eclipse.org/emf/eef/components/1.0.0','http://www.eclipse.org/emf/eef/views/1.0.0','http://www.eclipse.org/emf/eef/mapping/1.0.0','http://www.eclipse.org/emf/2002/Ecore','http://www.eclipse.org/emf/eef/mapping/filters/1.0.0', 'http://www.eclipse.org/emf/eef/generation/1.0.0')/]

[import common /]
[import naming /]
[import viewCommon /]
[import componentUtils /]
[import typeUtils /]
[import filters /]


[template public SubPropertiesEditionComponent(peContext : PropertiesEditionContext, basePackage : String)]
[comment @main /]
[for (pec : PropertiesEditionComponent | peContext.eAllContents(components::PropertiesEditionComponent))]
[if (pec.mustBeGenerated())]
	[for (view : View | pec.views) ? (not view.isDynamicView())]
[file (pec.fullFilePath(view, basePackage), false)]
[peContext.associatedGenModel().licenceText().trim()/]
package [pec.model.eefPackage(basePackage)/].components;

// [protected ('for imports')]

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Collection;

import org.eclipse.emf.common.command.Command;
import org.eclipse.emf.common.command.CompoundCommand;
import org.eclipse.emf.common.command.IdentityCommand;
import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.impl.AdapterImpl;
import org.eclipse.emf.common.util.BasicDiagnostic;
import org.eclipse.emf.common.util.Diagnostic;
import org.eclipse.emf.edit.command.AddCommand;
import org.eclipse.emf.edit.command.DeleteCommand;
import org.eclipse.emf.edit.command.RemoveCommand;
import org.eclipse.emf.edit.command.SetCommand;
import org.eclipse.emf.edit.command.MoveCommand;

import [pec.model.qualifiedName(basePackage)/];
[comment add import for external ViewReference (stored in another resource)/]
[view.manageImportForViewReferences(pec, basePackage)/]
[comment add import for ViewReference/]
import org.eclipse.emf.ecore.EStructuralFeature;
[for (pee : PropertiesEditionElement | pec.involvedEditionElementsInView(view).oclAsType(components::PropertiesEditionElement)) ? ((not model.eType.oclIsKindOf(ecore::EDataType)) or model.eType.oclIsKindOf(ecore::EEnum))]
import [pee.model.eType.qualifiedName(basePackage)/];
[if (not pee.navigation.oclIsUndefined() and pee.navigation.oclIsKindOf(mapping::navigation::SimpleModelNavigation))]
import [pee.navigation.oclAsType(mapping::navigation::SimpleModelNavigation).discriminatorType.qualifiedName(basePackage)/];
[/if]
[/for]
[for (ePackage : EPackage | pec.involvedEditionElementsInView(view).oclAsType(components::PropertiesEditionElement)->select((not model.eType.oclIsKindOf(ecore::EDataType)) or model.eType.oclIsKindOf(ecore::EEnum)).model.eType.ePackage->asSet())]
import [ePackage.qualifiedMetamodelPackage(basePackage)/];
import [ePackage.qualifiedMetamodelFactory(basePackage)/];
[/for]
[for (v : View | view.eAllContents(views::ViewReference).oclAsType(views::ViewReference).view)]
[for (pee : PropertiesEditionElement | pec.involvedEditionElementsInView(v).oclAsType(components::PropertiesEditionElement)) ? ((not model.eType.oclIsKindOf(ecore::EDataType)) or model.eType.oclIsKindOf(ecore::EEnum))]
import [pee.model.eType.qualifiedName(basePackage)/];
[if (model.eType.oclIsTypeOf(ecore::EEnum))]
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.emf.ecore.EEnumLiteral;
[/if]
[/for]
[/for]
[if (pec.involvedEditionElementsInView(view).oclAsType(components::PropertiesEditionElement)->select(model.eType.oclIsKindOf(EEnum))->notEmpty())]
import org.eclipse.emf.ecore.EEnum;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.emf.ecore.EEnumLiteral;
[/if]
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.emf.ecore.util.Diagnostician;
import org.eclipse.emf.ecore.util.EContentAdapter;
import org.eclipse.emf.ecore.util.EcoreUtil;
[if (pec.involvedEditionElementsInView(view).oclAsType(components::PropertiesEditionElement).views->select(representation.name = 'TableComposition' or representation.name = 'AdvancedTableComposition')->notEmpty())]
import org.eclipse.emf.ecore.EStructuralFeature;
import org.eclipse.emf.ecore.util.EContentAdapter;
import org.eclipse.emf.edit.command.AddCommand;
import org.eclipse.emf.edit.command.DeleteCommand;
[/if]
[if (pec.involvedEditionElementsInView(view).oclAsType(components::PropertiesEditionElement).views->select(representation.name = 'ReferencesTable' or representation.name = 'AdvancedReferencesTable')->notEmpty())]
import org.eclipse.emf.edit.command.AddCommand;
import org.eclipse.emf.edit.command.RemoveCommand;
[/if]
[if (pec.involvedEditionElementsInView(view).oclAsType(components::PropertiesEditionElement).views->select(representation.name = 'MultiValuedEditor')->notEmpty())]
import org.eclipse.emf.common.util.EList;
[/if]
import org.eclipse.emf.edit.domain.EditingDomain;
[for (ePackage : EPackage | pec.involvedEditionElementsInView(view).oclAsType(components::PropertiesEditionElement).model.eContainingClass.ePackage->asSet()->including(pec.model.oclAsType(ecore::EClass).ePackage))]
import [ePackage.qualifiedMetamodelPackage(basePackage)/];
[/for]
[let deferredPec : PropertiesEditionComponent = if (pec.views->includes(view))
	then pec
	else pec.referencedBinding.binding->select(views->includes(view))->first().oclAsType(components::PropertiesEditionComponent)
	endif]
import [view.owningViewsRepository().vrPackage()/].parts.[view.pepInterface()/];
[/let]
import org.eclipse.emf.eef.runtime.api.component.IPropertiesEditionComponent;
import org.eclipse.emf.eef.runtime.api.notify.IPropertiesEditionListener;
import org.eclipse.emf.eef.runtime.api.parts.IPropertiesEditionPart;
import org.eclipse.emf.eef.runtime.api.providers.IPropertiesEditionPartProvider;
import org.eclipse.emf.eef.runtime.impl.components.StandardPropertiesEditionComponent;
import org.eclipse.emf.eef.runtime.impl.notify.PropertiesEditionEvent;
import org.eclipse.emf.eef.runtime.impl.services.PropertiesContextService;
import org.eclipse.emf.eef.runtime.impl.services.PropertiesEditionPartProviderService;
[for (element : PropertiesEditionElement | pec.involvedEditionElementsInView(view)) ? (element.views->select(representation.name = 'EMFComboViewer')->notEmpty() or element.views->select(representation.name = 'EObjectFlatComboViewer')->notEmpty() or element.views->select(representation.name = 'AdvancedEObjectFlatComboViewer')->notEmpty())]
import [element.model.eType.qualifiedName(basePackage)/];
[/for]
[for (pee : PropertiesEditionElement | pec.involvedEditionElementsInView(view).oclAsType(components::PropertiesEditionElement)->select(views->select(representation.name = 'TableComposition' or representation.name = 'AdvancedTableComposition')->notEmpty()))]
import [pee.model.eType.qualifiedName(basePackage)/];
[/for]
[for (vr : ViewsRepository | pec.involvedViews().oclAsType(views::View).owningViewsRepository()->asSet())]
import [vr.vrQualifiedClass()/];
[/for]
import org.eclipse.jface.dialogs.IMessageProvider;
import org.eclipse.jface.viewers.ViewerFilter;
import org.eclipse.jface.viewers.Viewer;
[comment for filters /]
[for (element : PropertiesEditionElement | pec.involvedEditionElementsInView(view)) ? (element.bindingFilters->notEmpty())]
import org.eclipse.emf.eef.runtime.impl.filters.EObjectFilter;
import org.eclipse.emf.eef.runtime.impl.utils.EEFUtils;
[for (bindingFilter : BindingFilter | element.bindingFilters) ? (bindingFilter.oclIsTypeOf(mapping::filters::OnlyReferenceTypeFilter))]
import [bindingFilter.oclAsType(mapping::filters::OnlyReferenceTypeFilter).reference.eContainingClass.qualifiedMetamodelPackage(basePackage)/];
[/for]
[/for]

// [/protected]

/**
 * [peContext.associatedGenModel().authorText().trim()/]
 */
public class [pec.subPECClass(view)/] extends StandardPropertiesEditionComponent {

	public static String [view.viewPartConstant(pec)/] = "[view.viewKey(pec).toASCII()/]"; //$NON-NLS-1$

	private String['['/][']'/] parts = {[view.viewPartConstant(pec)/]};

	/**
	 * The EObject to edit
	 */
	private [pec.model.name/] [pec.model.name.toJavaIdentifier()/];

	/**
	 * The [view.viewKey(pec)/] part
	 */
	private [view.pepInterface()/] [view.viewIdentifier(pec)/];

	/**
	 * Default constructor
	 */
	public [pec.subPECClass(view)/](EObject [pec.model.name.toJavaIdentifier()/], String editing_mode) {
		if ([pec.model.name.toJavaIdentifier()/] instanceof [pec.model.name/]) {
			this.[pec.model.name.toJavaIdentifier()/] = ([pec.model.name/])[pec.model.name.toJavaIdentifier()/];
			if (IPropertiesEditionComponent.LIVE_MODE.equals(editing_mode)) {
				semanticAdapter = initializeSemanticAdapter();
				this.[pec.model.name.toJavaIdentifier()/].eAdapters().add(semanticAdapter);
			}
		}
		this.editing_mode = editing_mode;
	}

	/**
	 * Initialize the semantic model listener for live editing mode
	 * 
	 * @return the semantic model listener
	 */
	private AdapterImpl initializeSemanticAdapter() {
		return new EContentAdapter() {

			/**
			 * {@inheritDoc}
			 * 
			 * @see org.eclipse.emf.common.notify.impl.AdapterImpl#notifyChanged(org.eclipse.emf.common.notify.Notification)
			 */
			public void notifyChanged(Notification msg) {
				if ([view.viewIdentifier(pec)/] == null)
					[pec.subPECClass(view)/].this.dispose();
				else {
[if (view.oclIsTypeOf(views::CustomView))]
					// [protected ('for notifyChanged body')]
					
					// [/protected]
[else]
[for (editionElement : PropertiesEditionElement | pec.involvedEditionElementsInView(view))]
[editionElement.liveUpdater(view, pec)/]
[/for]
[comment add ViewReference support/]
[view.liveUpdaterForReferencedViews(pec)/]
[/if]
				}
			}

		};
	}

	/**
	 * {@inheritDoc}
	 * 
	 * @see org.eclipse.emf.eef.runtime.impl.components.StandardPropertiesEditionComponent#translatePart(java.lang.String)
	 */
	public java.lang.Class translatePart(String key) {
		if ([view.viewPartConstant(pec)/].equals(key))
			return [view.editorID()/].class;
		return super.translatePart(key);
	}

	/**
	 * {@inheritDoc}
	 * 
	 * @see org.eclipse.emf.eef.runtime.api.component.IPropertiesEditionComponent#partsList()
	 */
	public String['['/][']'/] partsList() {
		return parts;
	}

	/**
	 * {@inheritDoc}
	 * 
	 * @see org.eclipse.emf.eef.runtime.api.component.IPropertiesEditionComponent#getPropertiesEditionPart
	 * (java.lang.String, java.lang.String)
	 */
	public IPropertiesEditionPart getPropertiesEditionPart(int kind, String key) {
		if ([pec.model.name.toJavaIdentifier()/] != null && [view.viewPartConstant(pec)/].equals(key)) {
			if ([view.viewIdentifier(pec)/] == null) {
				IPropertiesEditionPartProvider provider = PropertiesEditionPartProviderService.getInstance().getProvider([view.owningViewsRepository().vrClass()/].class);
				if (provider != null) {
					[view.viewIdentifier(pec)/] = ([view.pepInterface()/])provider.getPropertiesEditionPart([view.editorID()/].class, kind, this);
					addListener((IPropertiesEditionListener)[view.viewIdentifier(pec)/]);
				}
			}
			return (IPropertiesEditionPart)[view.viewIdentifier(pec)/];
		}
		return null;
	}

	/**
	 * {@inheritDoc}
	 * 
	 * @see org.eclipse.emf.eef.runtime.impl.components.StandardPropertiesEditionComponent#
	 *      setPropertiesEditionPart(java.lang.Class, int, org.eclipse.emf.eef.runtime.api.parts.IPropertiesEditionPart)
	 */
	public void setPropertiesEditionPart(java.lang.Class key, int kind, IPropertiesEditionPart propertiesEditionPart) {
		if (key == [view.editorID()/].class)
			this.[view.viewIdentifier(pec)/] = ([view.pepInterface()/]) propertiesEditionPart;
	}

	/**
	 * {@inheritDoc}
	 * 
	 * @see org.eclipse.emf.eef.runtime.api.component.IPropertiesEditionComponent#initPart(java.lang.Class, int, org.eclipse.emf.ecore.EObject, 
	 *      org.eclipse.emf.ecore.resource.ResourceSet)
	 */
	public void initPart(java.lang.Class key, int kind, EObject elt, ResourceSet allResource) {
		if ([view.viewIdentifier(pec)/] != null && key == [view.editorID()/].class) {
			((IPropertiesEditionPart)[view.viewIdentifier(pec)/]).setContext(elt, allResource);
			[pec.model.name/] [pec.model.name.toJavaIdentifier()/] = ([pec.model.name/])elt;
			// init values
[for (pee : PropertiesEditionElement | pec.involvedEditionElementsInView(view))]
[pee.updater(view, pec)/]
[/for]
			
			// init filters
[for (pee : PropertiesEditionElement | pec.involvedEditionElementsInView(view))]
[pee.filterUpdater(view, pec)/]
[/for]
		}
		// init values for referenced views
[view.updaterForReferencedViews(pec)/]
		// init filters for referenced views
[view.filterUpdaterForReferencedViews(pec)/]
	}

[for (pee : PropertiesEditionElement | pec.involvedEditionElementsInView(view))]
[pee.javaDeclarationFilter()/]
[/for]

[view.javaDeclarationFilterForReferencedViews(pec)/]


	/**
	 * {@inheritDoc}
	 * 
	 * @see org.eclipse.emf.eef.runtime.api.component.IPropertiesEditionComponent#getPropertiesEditionCommand
	 *     (org.eclipse.emf.edit.domain.EditingDomain)
	 */
	public CompoundCommand getPropertiesEditionCommand(EditingDomain editingDomain) {
		CompoundCommand cc = new CompoundCommand();
		if ([pec.model.name.toJavaIdentifier()/] != null) {
[if (view.oclIsTypeOf(views::CustomView))]
			// [protected ('for getPropertiesEditionCommand body')]
			
			// [/protected]
[else]
[for (editionElement : PropertiesEditionElement | pec.involvedEditionElementsInView(view))]
[editionElement.commandUpdater(view, pec, pec.model.name.toJavaIdentifier())/]
[/for]
[comment add ViewReference support/]
[view.commandUpdaterForReferencedViews(pec, pec.model.name.toJavaIdentifier())/]
[/if]
		}
		if (!cc.isEmpty())
			return cc;
		cc.append(IdentityCommand.INSTANCE);
		return cc;
	}

	/**
	 * {@inheritDoc}
	 * 
	 * @see org.eclipse.emf.eef.runtime.api.component.IPropertiesEditionComponent#getPropertiesEditionObject()
	 */
	public EObject getPropertiesEditionObject(EObject source) {
		if (source instanceof [pec.model.name/]) {
			[pec.model.name/] [pec.model.name.toJavaIdentifier()/]ToUpdate = ([pec.model.name/])source;
[if (view.oclIsTypeOf(views::CustomView))]
			// [protected ('for getPropertiesEditionObject body')]
			
			// [/protected]
[else]
[for (editionElement : PropertiesEditionElement | pec.involvedEditionElementsInView(view))]
[editionElement.partUpdater(view, pec, pec.model.name.toJavaIdentifier())/]
[/for]
[comment add ViewReference support/]
[view.partUpdaterForReferencedViews(pec, pec.model.name.toJavaIdentifier())/]
[/if]
			return [pec.model.name.toJavaIdentifier()/]ToUpdate;
		}
		else
			return null;
	}

	/**
	 * {@inheritDoc}
	 * 
	 * @see org.eclipse.emf.eef.runtime.api.notify.IPropertiesEditionListener#firePropertiesChanged(org.eclipse.emf.common.notify.Notification)
	 */
	public void firePropertiesChanged(PropertiesEditionEvent event) {
		super.firePropertiesChanged(event);
		if (PropertiesEditionEvent.COMMIT == event.getState() && IPropertiesEditionComponent.LIVE_MODE.equals(editing_mode)) {
			CompoundCommand command = new CompoundCommand();
[if (view.oclIsTypeOf(views::CustomView))]
			// [protected ('for firePropertiesChanged body')]
			
			// [/protected]

[else]
[for (editionElement : PropertiesEditionElement | pec.involvedEditionElementsInView(view))]
[editionElement.liveCommandUpdater(view, pec.model.name.toJavaIdentifier())/]
[/for]
[comment add ViewReference support/]
[view.liveCommandUpdaterForReferencedViews(pec, pec.model.name.toJavaIdentifier())/]
[/if]
			liveEditingDomain.getCommandStack().execute(command);
		} else if (PropertiesEditionEvent.CHANGE == event.getState()) {
			Diagnostic diag = this.validateValue(event);
			if (diag != null && diag.getSeverity() != Diagnostic.OK) {
[for (editionElement : PropertiesEditionElement | pec.involvedEditionElementsInView(view))]
[editionElement.liveMessageSetter(view, pec)/]
[/for]
[comment add ViewReference support/]
[view.liveMessageSetterForReferencedViews(pec)/]
			} else {
[for (editionElement : PropertiesEditionElement | pec.involvedEditionElementsInView(view))]
[editionElement.liveMessageUnsetter(view, pec)/]
[/for]
[comment add ViewReference support/]
[view.livemessageUnsetterForReferencedViews(pec)/]
			}
		}
	}
[if (pec.properties.oclAsType(components::PropertiesEditionElement)->select(localPee : components::PropertiesEditionElement | localPee.model.required)->notEmpty())]

	/**
	 * {@inheritDoc}
	 * 
	 * @see org.eclipse.emf.eef.runtime.impl.components.StandardPropertiesEditionComponent#isRequired(java.lang.String, int)
	 */
	public boolean isRequired(String key, int kind) {
		return [for (pee : PropertiesEditionElement | pec.properties.oclAsType(components::PropertiesEditionElement)->select(f : components::PropertiesEditionElement | f.model.required)) separator (' || ')]key == [pee.views->first().editorID()/][/for];
	}
[/if]
[if (pec.properties.oclAsType(components::PropertiesEditionElement)->select(localPee : components::PropertiesEditionElement | not localPee.helpText().oclIsUndefined() and not (localPee.helpText() = 'null'))->notEmpty())]

	/**
	 * {@inheritDoc}
	 * 
	 * @see org.eclipse.emf.eef.runtime.impl.components.StandardPropertiesEditionComponent#getHelpContent(java.lang.String, int)
	 */
	public String getHelpContent(String key, int kind) {
		[for (pee : PropertiesEditionElement | pec.properties.oclAsType(components::PropertiesEditionElement)->select(f : components::PropertiesEditionElement | not f.helpText().oclIsUndefined() and not (f.helpText() = 'null')))]
		if (key == [pee.views->first().editorID()/])
			return [pee.helpText()/]; //$NON-NLS-1$
		[/for]
		return super.getHelpContent(key, kind);
	}
[/if]

	/**
	 * {@inheritDoc}
	 * 
	 * @see org.eclipse.emf.eef.runtime.api.component.IPropertiesEditionComponent#validateValue(org.eclipse.emf.common.notify.Notification)
	 */
	public Diagnostic validateValue(PropertiesEditionEvent event) {
		String newStringValue = event.getNewValue().toString();
		Diagnostic ret = null;
		try {
[for (editionElement : PropertiesEditionElement | pec.involvedEditionElementsInView(view)) ? (editionElement.model.oclIsTypeOf(ecore::EAttribute))]
			if ([editionElement.views->first().editorID()/] == event.getAffectedEditor()) {
				Object newValue = EcoreUtil.createFromString([editionElement.metamodelGetter()/].getEAttributeType(), newStringValue);
				ret = Diagnostician.INSTANCE.validate([editionElement.metamodelGetter()/].getEAttributeType(), newValue);
			}
[/for]
[comment add ViewReference support/]
[for ( v : View | view.referencedViews())]
	[for (editionElement : PropertiesEditionElement | pec.involvedEditionElementsInView(v)) ? (editionElement.model.oclIsTypeOf(ecore::EAttribute))]
			if ([editionElement.views->first().editorID()/] == event.getAffectedEditor()) {
				Object newValue = EcoreUtil.createFromString([editionElement.metamodelGetter()/].getEAttributeType(), newStringValue);
				ret = Diagnostician.INSTANCE.validate([editionElement.metamodelGetter()/].getEAttributeType(), newValue);
			}
	[/for]
[/for]
		} catch (IllegalArgumentException iae) {
			ret = BasicDiagnostic.toDiagnostic(iae);
		}
		return ret;
	}

	/**
	 * {@inheritDoc}
	 * 
	 * @see org.eclipse.emf.eef.runtime.api.component.IPropertiesEditionComponent#validate()
	 */
	public Diagnostic validate() {
		if (IPropertiesEditionComponent.BATCH_MODE.equals(editing_mode)) {
			EObject copy = EcoreUtil.copy(PropertiesContextService.getInstance().entryPointElement());
			copy = PropertiesContextService.getInstance().entryPointComponent().getPropertiesEditionObject(copy);
			return Diagnostician.INSTANCE.validate(copy);
		}
		else if (IPropertiesEditionComponent.LIVE_MODE.equals(editing_mode))
			return Diagnostician.INSTANCE.validate([pec.model.name.toJavaIdentifier()/]);
		else
			return null;
	}

[comment] Work on validation
	/**
	 * {@inheritDoc}
	 * 
	 * @see org.eclipse.emf.eef.runtime.api.component.IPropertiesEditionComponent#validateRequiredFeatures()
	 */
	public Diagnostic validateRequiredFeatures() {
		BasicDiagnostic result = new BasicDiagnostic(Diagnostic.OK, "EEF Validation", Status.OK,
				"No problem detected", null);
[for (editionElement : PropertiesEditionElement | pec.involvedEditionElementsInView(view)) ? (editionElement.model.required)]
		if ([view.viewIdentifier(pec)/].[editionElement.views->first().viewCompletePackageGetter()/] == null || [view.viewIdentifier(pec)/].[editionElement.views->first().viewCompletePackageGetter()/].equals("")) //$NON-NLS-1$
			result.add(new BasicDiagnostic(Diagnostic.ERROR, "EEF Validation", Status.ERROR, 
				NLS.bind([editionElement.owningViewsRepository().messagesProvider()/].PropertiesEditionPart_RequiredFeatureMessage, "[editionElement.views->first().name.toJavaIdentifier()/]"), null)); //$NON-NLS-1$ 
[/for]
[if (view.eAllContents(views::CustomElementEditor)->notEmpty())]
		// [protected ('additional requirement checks')]
		
		// [/protected]

[/if]
		return result;
	}[/comment]
	/**
	 * {@inheritDoc}
	 * 
	 * @see org.eclipse.emf.eef.runtime.api.component.IPropertiesEditionComponent#dispose()
	 */
	public void dispose() {
		if (semanticAdapter != null)
			[pec.model.name.toJavaIdentifier()/].eAdapters().remove(semanticAdapter);
	}

}
[/file]
	[/for]
[/if]
[/for]
[/template]

[template public fullFilePath(pec : PropertiesEditionComponent, view : View, basePackage : String)]
[pec.model.eefPackage(basePackage).toPath()/]/components/[pec.subPECClass(view)/].java
[/template]

[template public manageImportForViewReferences(view : View, pec : PropertiesEditionComponent, basePackage : String)]
[for (v : View | view.referencedViews())]
[for (editionElement : PropertiesEditionElement | pec.involvedEditionElementsInView(v)->select(i | i.oclAsType(EObject).eResource() <> pec.oclAsType(EObject).eResource()))]
import [editionElement.model.eContainingClass.qualifiedMetamodelPackage(basePackage)/];
[/for]
[for (viewsRepository : ViewsRepository | v.owningViewsRepository())]
import [viewsRepository.vrQualifiedClass()/];
[/for]
[if (v.referencedViews()->notEmpty())]
[v.manageImportForViewReferences(v.involvedPropertiesEditionComponent(), basePackage)/]
[/if]
[/for]
[/template]