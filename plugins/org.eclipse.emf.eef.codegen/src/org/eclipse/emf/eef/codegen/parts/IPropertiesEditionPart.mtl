[comment 
 *******************************************************************************
 * Copyright (c) 2008-2009 Obeo.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Obeo - initial API and implementation
 *******************************************************************************
 /]
[module IPropertiesEditionPart('http://www.eclipse.org/emf/eef/components/1.0.0', 'http://www.eclipse.org/emf/2002/Ecore', 'http://www.eclipse.org/emf/eef/views/1.0.0', 'http://www.eclipse.org/emf/eef/views/toolkits/1.0.0')/]
[import common /]
[import naming /]
[import viewCommon /]
[import viewGettersSetters /]

[template public IPropertiesEditionPart(peContext : PropertiesEditionContext, basePackage : String)]
[comment @main /]
[for (inputPEC : PropertiesEditionComponent | peContext.eAllContents(components::PropertiesEditionComponent))]
[for (view : View | inputPEC.involvedViews()) ? (inputPEC.explicit and view.oclIsTypeOf(views::View))][let pec : PropertiesEditionComponent = if (inputPEC.views->includes(view))
	then inputPEC
	else inputPEC.referencedBinding.binding->select(views->includes(view))->first().oclAsType(components::PropertiesEditionComponent)
	endif]
	[file (fullFilePath(pec, view, basePackage).trim(), false)]
[peContext.licenceText().trim()/]
package [pec.model.eefPackage(basePackage).trim()/].parts;

// [protected ('for imports')]

import java.util.List;
import java.util.Map;

[view.genImports()/] 
[for (viewReference : ViewReference | view.eAllContents(views::ViewReference))]
[viewReference.view.genImports()/]
[/for]

// [/protected]

/**
 * [peContext.authorText().trim()/]
 */
public interface [view.pepInterface().trim()/] {

[for (elementEditor : ElementEditor | view.eAllContents(views::ElementEditor)->select(oclIsTypeOf(views::ElementEditor)))]
[elementEditor.genDeclaration()/]
[/for]
[for (viewReference : ViewReference | view.eAllContents(views::ViewReference))]
	[for (elementEditor : ElementEditor | viewReference.view.eAllContents(views::ElementEditor)->select(oclIsTypeOf(views::ElementEditor)))]
		[elementEditor.genDeclaration()/]
	[/for]	
[/for]
[for (viewElement : ViewElement | view.eAllContents(views::ElementEditor)->select(oclIsTypeOf(views::SpecificElementEditor)))]
	// [protected ('for '.concat(viewElement.name).concat(' specific getters and setters declaration'))]
	
	// [/protected]

[/for]
	// [protected ('for additional methods')]
 	
	// [/protected]

}
	[/file]
[/let][/for]
[for (view : View | inputPEC.involvedViews()) ? (inputPEC.explicit and view.oclIsTypeOf(views::CustomView))][let pec : PropertiesEditionComponent = if (inputPEC.views->includes(view))
	then inputPEC
	else inputPEC.referencedBinding.binding->select(views->includes(view))->first().oclAsType(components::PropertiesEditionComponent)
	endif]
	[file (fullFilePath(pec, view, basePackage).trim(), false)]
/**
 * Generated with Acceleo
 */
package [pec.model.eefPackage(basePackage).trim()/].parts;

// [protected ('for imports')]

// [/protected]

/**
 * @author Obeo.fr
 */
public interface [view.pepInterface().trim()/] {

	// [protected (' for getters and setters declaration')]
	
	// [/protected]

}

	[/file]
[/let][/for]
[/for]
[/template]

[template public genDeclaration(elementEditor : ElementEditor)]
	[elementEditor.getterDeclaration()/]
	
	[elementEditor.setterDeclaration()/]
	
	[elementEditor.setMessageDeclaration()/]
	
	[elementEditor.unsetMessageDeclaration()/]
	
[/template]

[template public genImports(view : ViewElement)]
[if (view.eAllContents(views::ElementEditor).oclAsType(views::ElementEditor)->select(representation.name = 'ReferencesTable' or representation.name = 'TableComposition')->size() > 0)]
import java.util.List;
[/if]
[if (view.eAllContents(views::ElementEditor).oclAsType(views::ElementEditor)->select(representation.name = 'TableComposition')->size() > 0)]
import java.util.Map;
[/if]
[if (view.eAllContents(views::ElementEditor).oclAsType(views::ElementEditor)->select(representation.name = 'MultiValuedEditor')->size() > 0)]
import org.eclipse.emf.common.util.EList;
[/if]
[if (view.eAllContents(views::ElementEditor).oclAsType(views::ElementEditor)->select(representation.name = 'EENumViewer')->size() > 0)]
import org.eclipse.emf.common.util.Enumerator;
[/if]
[if (view.eAllContents(views::ElementEditor).oclAsType(views::ElementEditor)->select(representation.name = 'EObjectFlatComboViewer' or representation.name = 'AdvancedEObjectFlatComboViewer' or representation.name = 'ReferencesTable' or representation.name = 'TableComposition' or representation.name = 'AdvancedReferencesTable' or representation.name = 'AdvancedTableComposition')->size() > 0)]
import org.eclipse.emf.ecore.EObject;
[/if]
[/template]

[template public fullFilePath(pec : PropertiesEditionComponent, view : View,  basePackage : String)]
[pec.model.eefPackage(basePackage).toPath().trim()/]/parts/[view.pepInterface().trim()/].java
[/template]