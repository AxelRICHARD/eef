[comment 
 *******************************************************************************
 * Copyright (c) 2008-2009 Obeo.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Obeo - initial API and implementation
 *******************************************************************************
 /]
[module IPropertiesEditionPart('http://www.eclipse.org/emf/eef/components/1.0.0', 'http://www.eclipse.org/emf/2002/Ecore', 'http://www.eclipse.org/emf/eef/views/1.0.0', 'http://www.eclipse.org/emf/eef/views/toolkits/1.0.0', 'http://www.eclipse.org/emf/eef/generation/1.0.0', 'http://www.eclipse.org/emf/eef/generation/1.0.0')/]

[import common /]
[import naming /]
[import viewCommon /]
[import viewGettersSetters /]

[template public IPropertiesEditionPart(viewRepository : ViewsRepository)]
[comment @main /]
[for (view : View | viewRepository.eAllContents(views::View).oclAsType(views::View))]
	[file (fullFilePath(view), false)]
[viewRepository.associatedGenModel().licenceText().trim()/]
package [view.pepPackage()/].parts;

// [protected ('for imports')]

import java.util.List;
import java.util.Map;

[view.genImports()/] 
[for (viewReference : ViewReference | view.eAllContents(views::ViewReference))]
[viewReference.view.genImports()/]
[/for]

// [/protected]

/**
 * [viewRepository.associatedGenModel().authorText().trim()/]
 */
public interface [view.pepInterface()/] {

[for (elementEditor : ElementEditor | view.eAllContents(views::ElementEditor).oclAsType(views::ElementEditor)->select(owningView() = view))]
[elementEditor.genDeclaration()/]
[/for]

[for (subView : View | view.eAllContents(views::View))]
[subView.genDeclarationForSubViews()/]
[/for]

[comment viewReference Support/]
[view.genDeclarationForViewReference()/]

[for (viewElement : ViewElement | view.eAllContents(views::ElementEditor)->select(oclIsTypeOf(views::CustomElementEditor)))]
	// [protected ('for '.concat(viewElement.name).concat(' specific getters and setters declaration'))]
	
	// [/protected]

[/for]
	// [protected ('for additional methods')]
	
	// [/protected]

}
	[/file]
[/for]
[for (view : View | viewRepository.eAllContents(views::CustomView).oclAsType(views::CustomView))]
	[file (fullFilePath(view), false)]
[viewRepository.associatedGenModel().licenceText().trim()/]
package [view.pepPackage()/].parts;

// [protected ('for imports')]

// [/protected]

/**
 * [viewRepository.associatedGenModel().authorText().trim()/]
 */
public interface [view.pepInterface()/] {

	// [protected (' for getters and setters declaration')]
	
	// [/protected]

}
	[/file]
[/for]
[/template]

[template public fullFilePath(view : View)]
[view.pepPackage().toPath()/]/parts/[view.pepInterface()/].java
[/template]