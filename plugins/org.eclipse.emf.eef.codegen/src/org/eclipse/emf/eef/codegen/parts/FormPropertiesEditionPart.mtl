[comment 
 *******************************************************************************
 * Copyright (c) 2008-2009 Obeo.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Obeo - initial API and implementation
 *******************************************************************************
 /]
[module FormPropertiesEditionPart('http://www.eclipse.org/emf/eef/components/1.0.0','http://www.eclipse.org/emf/eef/mapping/1.0.0', 'http://www.eclipse.org/emf/2002/Ecore', 'http://www.eclipse.org/emf/eef/views/1.0.0')/]
[import common /]
[import naming /]
[import viewCommon /]
[import viewFormUtils /]
[import viewGettersSetters /]

[template public FormPropertiesEdionPart(peContext : PropertiesEditionContext, basePackage : String)]
[comment @main /]
[for (inputPEC : PropertiesEditionComponent | peContext.eAllContents(components::PropertiesEditionComponent))]
[for (view : View | inputPEC.involvedViews()) ? (inputPEC.explicit and view.oclIsTypeOf(views::View))][let pec : PropertiesEditionComponent = if (inputPEC.views->includes(view))
	then inputPEC
	else inputPEC.referencedBinding.binding->select(views->includes(view))->first().oclAsType(components::PropertiesEditionComponent)
	endif]
	[file (fullFilePath(pec, view, basePackage).trim(), false)]
[peContext.licenceText().trim()/]
package [pec.model.eefPackage(basePackage).trim()/].parts.forms;

// [protected ('for imports')]

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.emf.eef.runtime.api.component.IPropertiesEditionComponent;
import org.eclipse.emf.eef.runtime.impl.notify.PathedPropertiesEditionEvent;
import org.eclipse.emf.eef.runtime.impl.parts.CompositePropertiesEditionPart;
[if (view.eAllContents(views::ElementEditor).oclAsType(views::ElementEditor)->size() > 0)]
import org.eclipse.osgi.util.NLS;
[/if]
import org.eclipse.swt.SWT;
import org.eclipse.swt.events.FocusAdapter;
import org.eclipse.swt.events.FocusEvent;
import org.eclipse.swt.events.KeyAdapter;
import org.eclipse.swt.events.KeyEvent;
import org.eclipse.swt.events.ModifyEvent;
import org.eclipse.swt.events.ModifyListener;
import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.Text;
import org.eclipse.ui.forms.IMessageManager;
import org.eclipse.ui.forms.events.ExpansionEvent;
import org.eclipse.ui.forms.events.IExpansionListener;
import org.eclipse.ui.forms.widgets.Form;
import org.eclipse.ui.forms.widgets.FormToolkit;
import org.eclipse.ui.forms.widgets.ScrolledForm;
import org.eclipse.ui.forms.widgets.Section;
import org.eclipse.ui.forms.events.ExpansionEvent;
import org.eclipse.ui.forms.events.IExpansionListener;

import [pec.model.qualifiedName(basePackage).trim()/];
[for (ePackage : EPackage | pec.involvedEditionElements().oclAsType(components::PropertiesEditionElement).model.eContainingClass.ePackage->asSet()->including(pec.model.oclAsType(ecore::EClass).ePackage))]
import [ePackage.qualifiedMetamodelPackage(basePackage).trim()/];
[/for]
import [peContext.model.ecorePackage.eefPackage(basePackage)/].parts.[view.owningViewsRepository().vrClass()/];
import [pec.editionContext().qualifiedMessagesProvider(basePackage).trim()/];
import org.eclipse.emf.eef.runtime.api.component.IPropertiesEditionComponent;
import org.eclipse.emf.eef.runtime.api.parts.IFormPropertiesEditionPart;
import org.eclipse.emf.eef.runtime.impl.parts.CompositePropertiesEditionPart;
[if (view.eAllContents(views::ElementEditor).oclAsType(views::ElementEditor)->select(representation.name = 'ReferencesTable' or representation.name = 'AdvancedReferencesTable' or representation.name = 'TableComposition' or representation.name = 'AdvancedTableComposition')->size() > 0)]
import org.eclipse.emf.eef.runtime.api.policies.IPropertiesEditionPolicy;
import org.eclipse.emf.eef.runtime.api.providers.IPropertiesEditionPolicyProvider;
import org.eclipse.emf.eef.runtime.impl.policies.EObjectPropertiesEditionContext;
import org.eclipse.emf.eef.runtime.impl.services.PropertiesEditionPolicyProviderService;
[/if]
import org.eclipse.emf.eef.runtime.ui.widgets.FormUtils;
import org.eclipse.emf.eef.runtime.api.parts.EEFMessageManager;
import [pec.model.eefPackage(basePackage).trim()/].parts.[view.pepInterface().trim()/];
[for (widget : Widget | view.eAllContents(views::ElementEditor).oclAsType(views::ElementEditor).representation->asSet())]
[widget.manageImports(pec, view, basePackage)/]
[/for]
[for (widget : Widget | view.eAllContents(views::Container).oclAsType(views::Container).representation->asSet())]
[widget.manageImports(pec, view, basePackage)/]
[/for]
[for (viewRef : ViewReference | view.eAllContents(views::ViewReference).oclAsType(views::ViewReference)) ]
	[for (widget : Widget | viewRef.view.eAllContents(views::ElementEditor).oclAsType(views::ElementEditor).representation->asSet())]
[widget.manageImports(pec, view, basePackage)/]
	[/for]
[/for]


// [/protected]

/**
 * [peContext.authorText().trim()/]
 */
public class [view.pepFormClass().trim()/] extends CompositePropertiesEditionPart implements IFormPropertiesEditionPart, [view.pepInterface().trim()/] {

[if (view.eAllContents(views::ElementEditor).oclAsType(views::ElementEditor)->select(representation.name = 'ReferencesTable' or representation.name = 'AdvancedReferencesTable' or representation.name = 'EObjectFlatComboViewer' or representation.name = 'AdvancedEObjectFlatComboViewer' or representation.name = 'TableComposition' or representation.name = 'AdvancedTableComposition' or representation.name = 'MultiValuedEditor')->size() > 0)]
	protected [pec.model.name/] current;
	protected ResourceSet resourceSet;
[/if]
[for (element : ViewElement | view.eAllContents()) ? (element.oclIsKindOf(ElementEditor))][let editor : ElementEditor = element.oclAsType(ElementEditor)]
	[editor.widgetDeclaration()/]
[/let][/for]
[for (element : ViewElement | view.eAllContents()) ? (element.oclIsKindOf(ViewReference))][let viewReference : ViewReference = element.oclAsType(ViewReference)]
	[viewReference.widgetDeclaration()/]
[/let][/for]
[if (pec.eAllContents(components::PropertiesEditionElement).oclAsType(components::PropertiesEditionElement).views->select(representation.name = 'MultiValuedEditor')->size() > 0)]
	private [pec.model.name/] [pec.model.name.toJavaIdentifier().trim()/];
[/if]
		
	public [view.pepFormClass().trim()/](IPropertiesEditionComponent editionComponent) {
		super(editionComponent);
	}
		
	public Composite createFigure(final Composite parent, final FormToolkit widgetFactory) {
		ScrolledForm scrolledForm = widgetFactory.createScrolledForm(parent);		
		Form form = scrolledForm.getForm();
		view = form.getBody();
		GridLayout layout = new GridLayout();
		layout.numColumns = 3;
		view.setLayout(layout);	
		createControls(widgetFactory, view, new EEFMessageManager(scrolledForm, widgetFactory));		
		
		return scrolledForm;
	}
	
	public void createControls(final FormToolkit widgetFactory, Composite view, IMessageManager messageManager) { 
		this.messageManager = messageManager;
[for (aView : ViewElement | view.elements)]
[aView.implementation(pec)/]
[/for]

		// [protected ('for additional ui definition')]
		
		// [/protected]
		
	}

[for (aView : ViewElement | view.eAllContents(views::ViewElement)) ]
[aView.additionalImplementation(pec, inputPEC)/]

[/for]
	public void initComponent(EObject eObject, ResourceSet allResources) {
		[pec.model.name/] [pec.model.name.toJavaIdentifier().trim()/] = ([pec.model.name/])eObject;
[if (view.eAllContents(views::ElementEditor).oclAsType(views::ElementEditor)->select(representation.name = 'ReferencesTable' or representation.name = 'AdvancedReferencesTable' or representation.name = 'EObjectFlatComboViewer' or representation.name = 'AdvancedEObjectFlatComboViewer')->size() > 0)]
		current = [pec.model.name.toJavaIdentifier().trim()/];
		resourceSet = allResources;
	[/if]
[for (editionElement : PropertiesEditionElement | pec.involvedEditionElementsInView(view))]
		[editionElement.updater(pec)/]	
[/for]
[for (viewRef : ViewReference | view.eAllContents(views::ViewReference).oclAsType(views::ViewReference)) ]
	[viewRef.view.name.toJavaClassifier().trim().toLowerFirst()/]PropertiesEditionPart.initComponent(eObject, allResources);
[/for]
	}
	
	public void firePropertiesChanged(PathedPropertiesEditionEvent event) {
		// [protected ('for tab synchronization')]
		
		// Nothing to do
		// [/protected]
		
	}

[for (elementEditor : ElementEditor | view.eAllContents(views::ElementEditor)->select(oclIsTypeOf(views::ElementEditor)))]
	[elementEditor.getterImplementation(fullPartInterfacePath(pec.model.eefPackage(basePackage),view.pepInterface()))/]

	[elementEditor.setterImplementation(fullPartInterfacePath(pec.model.eefPackage(basePackage),view.pepInterface()))/]
	
	[elementEditor.setMessageImplementation(fullPartInterfacePath(pec.model.eefPackage(basePackage),view.pepInterface()))/]
	
	[elementEditor.unsetMessageImplementation(fullPartInterfacePath(pec.model.eefPackage(basePackage),view.pepInterface()))/]

[/for]
[for (viewReference : ViewReference | view.eAllContents(views::ViewReference)->select(oclIsTypeOf(views::ViewReference)))]
	[for (elementEditor : ElementEditor | viewReference.view.eAllContents(views::ElementEditor)->select(oclIsTypeOf(views::ElementEditor)))]		
		[elementEditor.getterImplementationDelegate(fullPartInterfacePath(pec.model.eefPackage(basePackage),view.pepInterface()),viewReference)/]
	
		[elementEditor.setterImplementationDelegate(fullPartInterfacePath(pec.model.eefPackage(basePackage),view.pepInterface()),viewReference)/]
		
		[elementEditor.setMessageImplementationDelegate(fullPartInterfacePath(pec.model.eefPackage(basePackage),view.pepInterface()),viewReference)/]
		
		[elementEditor.unsetMessageImplementationDelegate(fullPartInterfacePath(pec.model.eefPackage(basePackage),view.pepInterface()), viewReference)/]
	
	[/for]
[/for]


[for (viewElement : ViewElement | view.eAllContents(views::ElementEditor)->select(oclIsTypeOf(views::SpecificElementEditor)))]
	// [protected ('for '.concat(viewElement.name).concat(' specific getters and setters implementation'))]
	
	// [/protected]

[/for]
	
	// [protected ('additional methods')]
 	
	// [/protected]

}	[/file]
[/let][/for]
[for (view : View | inputPEC.involvedViews()) ? (inputPEC.explicit and view.oclIsTypeOf(views::CustomView))][let pec : PropertiesEditionComponent = if (inputPEC.views->includes(view))
	then inputPEC
	else inputPEC.referencedBinding.binding->select(views->includes(view))->first().oclAsType(components::PropertiesEditionComponent)
	endif]
	[file (fullFilePath(pec, view, basePackage).trim(), false)]
/**
 * generated with Acceleo
 */
package [pec.model.eefPackage(basePackage).trim()/].parts.forms;

// [protected ('for imports')]
import java.util.ArrayList;
import java.util.List;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.emf.eef.runtime.api.component.IPropertiesEditionComponent;
import org.eclipse.emf.eef.runtime.api.parts.IFormPropertiesEditionPart;
import org.eclipse.emf.eef.runtime.impl.parts.CompositePropertiesEditionPart;
import org.eclipse.swt.SWT;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.ui.forms.widgets.FormToolkit;

import [pec.model.qualifiedName(basePackage)/];
import [pec.model.eefPackage(basePackage)/].parts.[view.pepInterface()/];

// [/protected]

/**
 * @author Obeo.fr
 */
public class [view.pepFormClass().trim()/] extends CompositePropertiesEditionPart implements IFormPropertiesEditionPart, [view.pepInterface().trim()/] {

	// [protected ('widgets declaration')]
	
	// [/protected]
	
	public [view.pepFormClass().trim()/](IPropertiesEditionComponent editionComponent) {
		super(editionComponent);
	}
		
	public Composite createFigure(Composite parent, FormToolkit widgetFactory) {
		view = widgetFactory.createComposite(parent, SWT.NONE);
		
		GridLayout layout = new GridLayout();
		layout.numColumns = 1;
		view.setLayout(layout);
		// [protected ('view visual definition')]
		
		// [/protected]
		
		return view;
	}
	
	public void initComponent(EObject eObject, ResourceSet allResources) {
		[pec.model.name/] [pec.model.name.toJavaIdentifier()/] = ([pec.model.name/])eObject;
		// [protected ('view initialization')]
		
		// [/protected]
		
	}

	public void firePropertiesChanged(PathedPropertiesEditionEvent event) {
		// [protected ('for tab synchronization')]
		
		// [/protected]
		
	}
	
	// [protected ('additional methods')]
 	
	// [/protected]

}

	[/file]
[/let][/for]
[/for]
[/template]

[template public fullFilePath(pec : PropertiesEditionComponent, view : View,  basePackage : String)]
[pec.model.eefPackage(basePackage).toPath().trim()/]/parts/forms/[view.pepFormClass().trim()/].java
[/template]