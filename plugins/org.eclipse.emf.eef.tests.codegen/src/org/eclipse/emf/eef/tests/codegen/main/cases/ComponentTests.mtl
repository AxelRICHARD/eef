[comment 
 *******************************************************************************
 * Copyright (c) 2008-2009 Obeo.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Obeo - initial API and implementation
 *******************************************************************************
 /]
[module ComponentTests('http://www.eclipse.org/emf/eef/components/1.0.0','http://www.eclipse.org/emf/eef/mapping/1.0.0', 'http://www.eclipse.org/emf/2002/Ecore', 'http://www.eclipse.org/emf/eef/views/1.0.0', 'http://www.eclipse.org/emf/eef/generation/1.0.0')/]

[import common /]
[import naming /]
[import testsNaming /]
[import widgetTest /]

[template public PropertySection(peContext : PropertiesEditionContext)]

	[comment @main /]
[for (pec : PropertiesEditionComponent | peContext.eAllContents(PropertiesEditionComponent)) ? (pec.mustBeGenerated() and pec.testMustBeGenerated())]
	[for (view : View | pec.views) ? (view.explicit)]
[file (pec.fullFilePath(), false)]
[peContext.associatedGenModel().licenceText().trim()/]
package [pec.model.completePackage()/].tests.junit;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IFolder;
import org.eclipse.core.resources.IProject;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.NullProgressMonitor;
import org.eclipse.emf.common.command.BasicCommandStack;
import org.eclipse.emf.common.command.CompoundCommand;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.edit.command.SetCommand;
import org.eclipse.emf.edit.domain.AdapterFactoryEditingDomain;
import [pec.model.qualifiedMetamodelPackage()/];
[for (viewRepository : ViewsRepository | pec.views.owningViewsRepository()->asSet())]
import [viewRepository.qualifiedMessagesProvider()/];
[/for]
import org.eclipse.emf.eef.runtime.EMFPropertiesRuntime;
import org.eclipse.emf.eef.runtime.tests.SWTBotEEFTestCase;
import org.eclipse.emf.eef.runtime.tests.exceptions.InputModelInvalidException;
import org.eclipse.emf.eef.runtime.tests.utils.EEFTestsModelsUtils;
import org.eclipse.emf.eef.runtime.tests.utils.EEFTestsResourceUtils;
import org.eclipse.swtbot.eclipse.finder.widgets.SWTBotEditor;
import org.eclipse.swtbot.swt.finder.widgets.SWTBotShell;
[additionalImports()/]

/**
 * TestCase for [pec.name/]
 * [peContext.associatedGenModel().authorText().trim()/]
 */
public class [pec.testCase()/] extends SWTBotEEFTestCase {
	
	/**
	 *  The project that contains models for tests 
	 */
	protected static final String TESTS_PROJECT_NAME = "[peContext.associatedGenModel().testsGenDirectory.tokenize('/')->at(1)/]";
	
	/**
	 *  The folder that contains the input models for tests 
	 */
	protected static final String INPUT_MODEL_FOLDER = "input";
	
	/**
	 *  The folder that contains the expected models for tests 
	 */	 
	protected static final String EXPECTED_MODEL_FOLDER = "expected";
	
	/**
	 * The input model
	 */
	protected static final String INPUT_MODEL_NAME = "input.conference";
	
	/**
	 * The expected model
	 */	 
	protected static final String EXPECTED_MODEL_NAME = "expected.conference";

	/**
	 * The test project
	 */
	private IProject testProject;
	
	/**
	 * The workspace folder containing the input model 
	 */
	private IFolder modelFolder;
	
	/**
	 * The expectedModel 
	 */
	protected Resource expectedModel;
	
	/**
	 * The ResourceSet where to operate
	 */
	protected AdapterFactoryEditingDomain editingDomain = new AdapterFactoryEditingDomain(EMFPropertiesRuntime.getDefault().getAdapterFactory(), new BasicCommandStack());
	
	/**
	 * The EClass of the type to edit
	 */
	private EClass [pec.model.name.toLowerFirst()/]MetaClass = [pec.model.ePackage.metamodelPackage()/].eINSTANCE.get[pec.model.name/]();
	
	/**
	 * {@inheritDoc}
	 * @see org.eclipse.emf.eef.runtime.tests.SWTBotEEFTestCase#initWorkspaceForTests()
	 */
	protected void initWorkspaceForTests() throws CoreException, IOException {
		List<String> names = new ArrayList<String>();
		names.add(INPUT_MODEL_FOLDER);
		testProject = EEFTestsResourceUtils.createTestProject(TESTS_PROJECT_NAME, names);
		modelFolder = testProject.getFolder(INPUT_MODEL_FOLDER);
	}

	/**
	 * Import the input model
	 * @throws CoreException error during model import
	 * @throws IOException error during model import
	 */
	protected void initializeInputModel() throws CoreException, IOException  {
		EEFTestsResourceUtils.importModel(TESTS_PROJECT_NAME, "models/" + INPUT_MODEL_FOLDER + "/" + INPUT_MODEL_NAME, modelFolder);
		URI fileURI = URI.createPlatformResourceURI(TESTS_PROJECT_NAME + "/" + INPUT_MODEL_FOLDER + "/" + INPUT_MODEL_NAME, true);
		Resource activeResource = editingDomain.getResourceSet().getResource(fileURI, true);
		bot.defineActiveModel(activeResource);
	}
	
	/**
	 * Delete the test models
	 * @throws CoreException error during model deleting
	 */
	protected void deleteModels() throws CoreException {
		IFile inputFile = EEFTestsResourceUtils.workspaceFile(bot.getActiveResource());
		bot.unloadActiveModel();
		NullProgressMonitor monitor = new NullProgressMonitor();
		inputFile.delete(true, true, monitor);
		IFile expectedFile = EEFTestsResourceUtils.workspaceFile(expectedModel);
		expectedModel.unload();
		expectedFile.delete(true, true, monitor);
		testProject.refreshLocal(IResource.DEPTH_INFINITE, monitor);
	}
	
	[for (peElement : PropertiesEditionElement | pec.properties->select(oclIsKindOf(components::PropertiesEditionElement)).oclAsType(components::PropertiesEditionElement)) ? (pec.canGenerateTest(peElement) <> 'false')]
	/**
	 * Create the expected model from the input model
	 * @throws InputModelInvalidException error during expected model initialization
	 * @throws IOException error during expected model serialization
	 */
	protected void initializeExpectedModelFor[pec.model.name.toUpperFirst()/][peElement.name.toUpperFirst()/]() throws InputModelInvalidException, IOException {
		// Create the resource for the expected model
		URI fileURI = URI.createPlatformResourceURI(TESTS_PROJECT_NAME + "/" + EXPECTED_MODEL_FOLDER + "/" + EXPECTED_MODEL_NAME, true);
		expectedModel = editingDomain.getResourceSet().createResource(fileURI);
		
		// Create the expected model content by applying the attempted command on a copy of the input model content
		expectedModel.getContents().addAll(EcoreUtil.copyAll(bot.getActiveResource().getContents()));
		EObject [pec.model.name.toLowerFirst()/] = EEFTestsModelsUtils.getFirstInstanceOf(expectedModel, [pec.model.name.toLowerFirst()/]MetaClass);
		if ([pec.model.name.toLowerFirst()/] == null)
			throw new InputModelInvalidException("The input model doesn't contain enough instance of " + [pec.model.name.toLowerFirst()/]MetaClass.getName() + " EClass");
		[pec.updateExpectedModel(peElement)/]
		editingDomain.getCommandStack().execute(cc);
		expectedModel.save(Collections.EMPTY_MAP);
	}
	
	public void testEdit[pec.name.toUpperFirst()/][peElement.name.toUpperFirst()/]() throws Exception {
		
		// Import the input model
		initializeInputModel();
		
		// Create the expected model
		initializeExpectedModelFor[pec.model.name.toUpperFirst()/][peElement.name.toUpperFirst()/]();
		
		// Open the input model with the treeview editor
		SWTBotEditor modelEditor = bot.openActiveModel();
				
		// Open the EEF wizard (by double click) to edit the [pec.model.name/] element
		EObject firstInstanceOf = EEFTestsModelsUtils.getFirstInstanceOf(bot.getActiveResource(), [pec.model.name.toLowerFirst()/]MetaClass);
		if (firstInstanceOf == null)
			throw new InputModelInvalidException("The input model doesn't contain enough instance of " + [pec.model.name.toLowerFirst()/]MetaClass.getName() + " EClass");
		
		SWTBotShell wizardShell = bot.prepareBatchEditing(modelEditor, [pec.model.name.toLowerFirst()/]MetaClass, firstInstanceOf);
		
		[pec.editFeature(peElement)/]
				
		// Save the changement
		bot.finalizeEdition(modelEditor);
		
		// Compare real model with expected model
		assertExpectedModelReached(expectedModel);
		
		// Delete the input model
		deleteModels();

	}
	
	[/for]
[additionalMethods()/]

}
			[/file]
		[/for]
	[/for]
[/template]

[template public fullFilePath(pec : PropertiesEditionComponent)]
[pec.model.completePackage().toPath()/]/tests/junit/[pec.testCase()/].java
[/template]

[query public testMustBeGenerated(pec : PropertiesEditionComponent) : Boolean = 
	pec.properties->select(pee : mapping::AbstractPropertyBinding | pee.oclIsKindOf(components::PropertiesEditionElement) and pec.canGenerateTest(pee.oclAsType(components::PropertiesEditionElement)) <> 'false')->notEmpty()/]

[comment overrides this template if additional imports is needed/]
[template public additionalImports()]
[/template]

[comment overrides this template if additional methods are needed/]
[template public additionalMethods()]
[/template]
