[comment encoding = UTF-8 /]
[module Plugin('http://www.eclipse.org/emf/2002/GenModel')/]

[import org::eclipse::emf::eef::codegen::ecore::services::header /]
[import org::eclipse::emf::eef::codegen::ecore::services::common /]
[import org::eclipse::emf::eef::codegen::ecore::services::StringUtil /]
[import org::eclipse::emf::eef::codegen::ecore::services::wrappers::GenModel /]
[import org::eclipse::emf::eef::codegen::ecore::services::wrappers::GenClass /]
[import org::eclipse::emf::eef::codegen::ecore::services::wrappers::GenFeature /]
[import org::eclipse::emf::eef::codegen::ecore::services::wrappers::GenEnum /]
[import org::eclipse::emf::eef::codegen::ecore::services::wrappers::GenEnumLiteral /]

[template public Plugin(genModel : GenModel)]
[file (pluginPath(), false, 'UTF-8')]
[includeHeader()/]
package [genModel.getEditorPluginPackageName()/];

import org.eclipse.emf.common.EMFPlugin;
import org.eclipse.emf.common.util.ResourceLocator;

/**
 * This is the central singleton for the [genModel.getModelName()/] editor plugin.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public final class [genModel.getEditorPluginClassName()/] extends EMFPlugin
{
[if (genModel.hasCopyrightField())]
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final java.lang.String copyright = [genModel.getCopyrightFieldLiteral()/];[genModel.getNonNLS()/]
	
[/if]
	/**
	 * Keep track of the singleton.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final [genModel.getEditorPluginClassName()/] INSTANCE = new [genModel.getEditorPluginClassName()/]();
	
[if (genModel.getRuntimePlatform() <> GenRuntimePlatform::GWT)]
	/**
	 * Keep track of the singleton.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private static Implementation plugin;

[/if]
	/**
	 * Create the instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public [genModel.getEditorPluginClassName()/]()
	{
		super
			(new ResourceLocator [genModel.genSquareBrackets('')/] 
			{
[for (pluginClassName : String | genModel.getEditResourceDelegateImportedPluginClassNames())]
				[pluginClassName/].INSTANCE,
[/for]
			});
	}

	/**
	 * Returns the singleton instance of the Eclipse plugin.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @return the singleton instance.
	 * @generated
	 */
[if (genModel.useClassOverrideAnnotation())]
	@Override
[/if]
	public ResourceLocator getPluginResourceLocator()
	{
[if (genModel.getRuntimePlatform() = GenRuntimePlatform::GWT)]
		return null;
[else]
		return plugin;
[/if]
	}
	
[if (genModel.getRuntimePlatform() <> GenRuntimePlatform::GWT)]
	/**
	 * Returns the singleton instance of the Eclipse plugin.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @return the singleton instance.
	 * @generated
	 */
	public static Implementation getPlugin()
	{
		return plugin;
	}
	
	/**
	 * The actual implementation of the Eclipse <b>Plugin</b>.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static class Implementation extends org.eclipse.emf.common.ui.EclipseUIPlugin
	{
		/**
		 * Creates an instance.
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
[if (genModel.needsRuntimeCompatibility())]
		 * @param descriptor the description of the plugin.
[/if]
		 * @generated
		 */
		public Implementation([if (genModel.needsRuntimeCompatibility())]org.eclipse.core.runtime.IPluginDescriptor descriptor[/if])
		{
			super([if (genModel.needsRuntimeCompatibility())]descriptor[/if]);
	
			// Remember the static instance.
			//
			plugin = this;
		}
	}

[/if]
}
[/file]
[/template]

[query public pluginPath (genModel : GenModel) : String = 'src.'.concat(genModel.getEditorPluginPackageName().concat('.').concat(genModel.getEditorPluginClassName())).toPath().concat('.java') /]

