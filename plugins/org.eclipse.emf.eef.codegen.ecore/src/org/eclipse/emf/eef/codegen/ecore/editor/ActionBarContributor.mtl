[comment encoding = UTF-8 /]
[comment
/**
 * <copyright>
 *
 * Copyright (c) 2002-2011 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   IBM - Initial API and implementation
 *   Obeo - Migrate to Acceleo
 *
 * </copyright>
 */
/]
[module ActionBarContributor('http://www.eclipse.org/emf/2002/GenModel')/]

[import org::eclipse::emf::eef::codegen::ecore::services::common /]
[import org::eclipse::emf::eef::codegen::ecore::services::header /]
[import org::eclipse::emf::eef::codegen::ecore::services::wrappers::GenPackage /]
[import org::eclipse::emf::eef::codegen::ecore::services::wrappers::GenModel /]
[import org::eclipse::emf::eef::codegen::ecore::services::StringUtil /]

[template public ActionBarContributor(genPackage : GenPackage) { genModel : GenModel = genPackage.genModel ; packageName : String = genPackage.getPresentationPackageName() ; className : String = genPackage.getActionBarContributorClassName() }]
[genModel.initializeImportManager(packageName, className)/]
[file (genModel.editorPath(packageName, className), false, 'UTF-8')]
[includeHeader()/]

package [packageName/];

[let content : String = genModel.fileContent(genPackage, packageName, className)]
[genModel.genSortedImports(packageName, className)/]

[content/]
[/let]
[/file]
[/template]

[template public fileContent(genModel : GenModel, genPackage : GenPackage, packageName : String, className : String)]
/**
 * This is the action bar contributor for the [genPackage.getPrefix()/] model editor.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class [className/]
	extends [genModel.getImportedName('org.eclipse.emf.edit.ui.action.EditingDomainActionBarContributor', packageName, className)/]
	implements [genModel.getImportedName('org.eclipse.jface.viewers.ISelectionChangedListener', packageName, className)/]
{
[if (genModel.hasCopyrightField())]
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final String copyright = [genModel.getCopyrightFieldLiteral()/];[genModel.getNonNLS()/]

[/if]
[if (genModel.isRichClientPlatform() and genPackage.generateModelWizard)]
	/**
	 * Action to create objects from the [genPackage.getPrefix()/] model.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static class NewAction extends [genModel.getImportedName('org.eclipse.emf.common.ui.action.WorkbenchWindowActionDelegate', packageName, className)/]
	{
		/**
		 * @see org.eclipse.ui.IActionDelegate#run(org.eclipse.jface.action.IAction)
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
		 * @generated
		 */
		public void run([genModel.getImportedName('org.eclipse.jface.action.IAction', packageName, className)/] action)
		{
			[genPackage.getModelWizardClassName()/] wizard = new [genPackage.getModelWizardClassName()/]();
			wizard.init(getWindow().getWorkbench(), [genModel.getImportedName('org.eclipse.jface.viewers.StructuredSelection', packageName, className)/].EMPTY);
			[genModel.getImportedName('org.eclipse.jface.wizard.WizardDialog', packageName, className)/] wizardDialog = new [genModel.getImportedName('org.eclipse.jface.wizard.WizardDialog', packageName, className)/](getWindow().getShell(), wizard);
			wizardDialog.open();
		}
	}

[/if]
	/**
	 * This keeps track of the active editor.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected [genModel.getImportedName('org.eclipse.ui.IEditorPart', packageName, className)/] activeEditorPart;

	/**
	 * This keeps track of the current selection provider.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected [genModel.getImportedName('org.eclipse.jface.viewers.ISelectionProvider', packageName, className)/] selectionProvider;

	/**
	 * This action opens the Properties view.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected [genModel.getImportedName('org.eclipse.jface.action.IAction', packageName, className)/] showPropertiesViewAction =
		new [genModel.getImportedName('org.eclipse.jface.action.Action', packageName, className)/]([genPackage.getImportedEditorPluginClassName()/].INSTANCE.getString("_UI_ShowPropertiesView_menu_item"))[genModel.getNonNLS()/]
		{
[if (genModel.useClassOverrideAnnotation())]
			@Override
[/if]
			public void run()
			{
				try
				{
					getPage().showView("org.eclipse.ui.views.PropertySheet");[genModel.getNonNLS()/]
				}
				catch ([genModel.getImportedName('org.eclipse.ui.PartInitException', packageName, className)/] exception)
				{
					[genPackage.getImportedEditorPluginClassName()/].INSTANCE.log(exception);
				}
			}
		};

	/**
	 * This action refreshes the viewer of the current editor if the editor
	 * implements {@link org.eclipse.emf.common.ui.viewer.IViewerProvider}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected [genModel.getImportedName('org.eclipse.jface.action.IAction', packageName, className)/] refreshViewerAction =
		new [genModel.getImportedName('org.eclipse.jface.action.Action', packageName, className)/]([genPackage.getImportedEditorPluginClassName()/].INSTANCE.getString("_UI_RefreshViewer_menu_item"))[genModel.getNonNLS()/]
		{
[if (genModel.useClassOverrideAnnotation())]
			@Override
[/if]
			public boolean isEnabled()
			{
				return activeEditorPart instanceof [genModel.getImportedName('org.eclipse.emf.common.ui.viewer.IViewerProvider', packageName, className)/];
			}

[if (genModel.useClassOverrideAnnotation())]
			@Override
[/if]
			public void run()
			{
				if (activeEditorPart instanceof [genModel.getImportedName('org.eclipse.emf.common.ui.viewer.IViewerProvider', packageName, className)/])
				{
					[genModel.getImportedName('org.eclipse.jface.viewers.Viewer', packageName, className)/] viewer = (([genModel.getImportedName('org.eclipse.emf.common.ui.viewer.IViewerProvider', packageName, className)/])activeEditorPart).getViewer();
					if (viewer != null)
					{
						viewer.refresh();
					}
				}
			}
		};

[if (genModel.creationCommands)]
	/**
	 * This will contain one {@link org.eclipse.emf.edit.ui.action.CreateChildAction} corresponding to each descriptor
	 * generated for the current selection by the item provider.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected [genModel._CollectionOfIAction(packageName, className)/] createChildActions;

  [if (genModel.creationSubmenus)]
	/**
	 * This will contain a map of {@link org.eclipse.emf.edit.ui.action.CreateChildAction}s, keyed by sub-menu text.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected [genModel._MapOfStringToCollectionOfIAction(packageName, className)/] createChildSubmenuActions;

  [/if]
	/**
	 * This is the menu manager into which menu contribution items should be added for CreateChild actions.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected [genModel.getImportedName('org.eclipse.jface.action.IMenuManager', packageName, className)/] createChildMenuManager;

	/**
	 * This will contain one {@link org.eclipse.emf.edit.ui.action.CreateSiblingAction} corresponding to each descriptor
	 * generated for the current selection by the item provider.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected [genModel._CollectionOfIAction(packageName, className)/] createSiblingActions;

  [if (genModel.creationSubmenus)]
	/**
	 * This will contain a map of {@link org.eclipse.emf.edit.ui.action.CreateSiblingAction}s, keyed by submenu text.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected [genModel._MapOfStringToCollectionOfIAction(packageName, className)/] createSiblingSubmenuActions;

  [/if]
	/**
	 * This is the menu manager into which menu contribution items should be added for CreateSibling actions.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected [genModel.getImportedName('org.eclipse.jface.action.IMenuManager', packageName, className)/] createSiblingMenuManager;

[/if]
	/**
	 * This creates an instance of the contributor.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public [genPackage.getActionBarContributorClassName()/]()
	{
		super(ADDITIONS_LAST_STYLE);
		loadResourceAction = new [genModel.getImportedName('org.eclipse.emf.edit.ui.action.LoadResourceAction', packageName, className)/]();
		validateAction = new [genModel.getImportedName('org.eclipse.emf.edit.ui.action.ValidateAction', packageName, className)/]();
		controlAction = new [genModel.getImportedName('org.eclipse.emf.edit.ui.action.ControlAction', packageName, className)/]();
	}

	/**
	 * This adds Separators for editor additions to the tool bar.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
[if (genModel.useClassOverrideAnnotation())]
	@Override
[/if]
	public void contributeToToolBar([genModel.getImportedName('org.eclipse.jface.action.IToolBarManager', packageName, className)/] toolBarManager)
	{
		toolBarManager.add(new [genModel.getImportedName('org.eclipse.jface.action.Separator', packageName, className)/]("[genModel.toLowerCase(genPackage.getPrefix(), genModel.getLocale())/]-settings"));[genModel.getNonNLS()/]
		toolBarManager.add(new [genModel.getImportedName('org.eclipse.jface.action.Separator', packageName, className)/]("[genModel.toLowerCase(genPackage.getPrefix(), genModel.getLocale())/]-additions"));[genModel.getNonNLS()/]
	}

	/**
	 * This adds to the menu bar a menu and some separators for editor additions,
	 * as well as the sub-menus for object creation items.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
[if (genModel.useClassOverrideAnnotation())]
	@Override
[/if]
	public void contributeToMenu([genModel.getImportedName('org.eclipse.jface.action.IMenuManager', packageName, className)/] menuManager)
	{
		super.contributeToMenu(menuManager);

		[genModel.getImportedName('org.eclipse.jface.action.IMenuManager', packageName, className)/] submenuManager = new [genModel.getImportedName('org.eclipse.jface.action.MenuManager', packageName, className)/]([genPackage.getImportedEditorPluginClassName()/].INSTANCE.getString("_UI_[genPackage.getEditorClassName()/]_menu"), "[genPackage.getInterfacePackageName()/]MenuID");[genModel.getNonNLS()/][genModel.getNonNLS(2)/]
		menuManager.insertAfter("additions", submenuManager);[genModel.getNonNLS()/]
		submenuManager.add(new [genModel.getImportedName('org.eclipse.jface.action.Separator', packageName, className)/]("settings"));[genModel.getNonNLS()/]
		submenuManager.add(new [genModel.getImportedName('org.eclipse.jface.action.Separator', packageName, className)/]("actions"));[genModel.getNonNLS()/]
		submenuManager.add(new [genModel.getImportedName('org.eclipse.jface.action.Separator', packageName, className)/]("additions"));[genModel.getNonNLS()/]
		submenuManager.add(new [genModel.getImportedName('org.eclipse.jface.action.Separator', packageName, className)/]("additions-end"));[genModel.getNonNLS()/]

[if (genModel.creationCommands)]
		// Prepare for CreateChild item addition or removal.
		//
		createChildMenuManager = new [genModel.getImportedName('org.eclipse.jface.action.MenuManager', packageName, className)/]([genPackage.getImportedEditorPluginClassName()/].INSTANCE.getString("_UI_CreateChild_menu_item"));[genModel.getNonNLS()/]
		submenuManager.insertBefore("additions", createChildMenuManager);[genModel.getNonNLS()/]

		// Prepare for CreateSibling item addition or removal.
		//
		createSiblingMenuManager = new [genModel.getImportedName('org.eclipse.jface.action.MenuManager', packageName, className)/]([genPackage.getImportedEditorPluginClassName()/].INSTANCE.getString("_UI_CreateSibling_menu_item"));[genModel.getNonNLS()/]
		submenuManager.insertBefore("additions", createSiblingMenuManager);[genModel.getNonNLS()/]

		// Force an update because Eclipse hides empty menus now.
		//
		submenuManager.addMenuListener
			(new [genModel.getImportedName('org.eclipse.jface.action.IMenuListener', packageName, className)/]()
			 {
				 public void menuAboutToShow([genModel.getImportedName('org.eclipse.jface.action.IMenuManager', packageName, className)/] menuManager)
				 {
					 menuManager.updateAll(true);
				 }
			 });

[else]
		// Add your contributions.
		// Ensure that you remove @generated or mark it @generated NOT

[/if]
		addGlobalActions(submenuManager);
	}

	/**
	 * When the active editor changes, this remembers the change and registers with it as a selection provider.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
[if (genModel.useClassOverrideAnnotation())]
	@Override
[/if]
	public void setActiveEditor([genModel.getImportedName('org.eclipse.ui.IEditorPart', packageName, className)/] part)
	{
		super.setActiveEditor(part);
		activeEditorPart = part;

		// Switch to the new selection provider.
		//
		if (selectionProvider != null)
		{
			selectionProvider.removeSelectionChangedListener(this);
		}
		if (part == null)
		{
			selectionProvider = null;
		}
		else
		{
			selectionProvider = part.getSite().getSelectionProvider();
			selectionProvider.addSelectionChangedListener(this);

			// Fake a selection changed event to update the menus.
			//
			if (selectionProvider.getSelection() != null)
			{
				selectionChanged(new [genModel.getImportedName('org.eclipse.jface.viewers.SelectionChangedEvent', packageName, className)/](selectionProvider, selectionProvider.getSelection()));
			}
		}
	}

	/**
	 * This implements {@link org.eclipse.jface.viewers.ISelectionChangedListener},
	 * handling {@link org.eclipse.jface.viewers.SelectionChangedEvent}s by querying for the children and siblings
	 * that can be added to the selected object and updating the menus accordingly.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void selectionChanged([genModel.getImportedName('org.eclipse.jface.viewers.SelectionChangedEvent', packageName, className)/] event)
	{
[if (genModel.creationCommands)]
		// Remove any menu items for old selection.
		//
		if (createChildMenuManager != null)
		{
  [if (genModel.creationSubmenus)]
			depopulateManager(createChildMenuManager, createChildSubmenuActions);
  [/if]
			depopulateManager(createChildMenuManager, createChildActions);
		}
		if (createSiblingMenuManager != null)
		{
  [if (genModel.creationSubmenus)]
			depopulateManager(createSiblingMenuManager, createSiblingSubmenuActions);
  [/if]
			depopulateManager(createSiblingMenuManager, createSiblingActions);
		}

		// Query the new selection for appropriate new child/sibling descriptors
		//
		[genModel._CollectionOfAnything(packageName, className)/] newChildDescriptors = null;
		[genModel._CollectionOfAnything(packageName, className)/] newSiblingDescriptors = null;

		[genModel.getImportedName('org.eclipse.jface.viewers.ISelection', packageName, className)/] selection = event.getSelection();
		if (selection instanceof [genModel.getImportedName('org.eclipse.jface.viewers.IStructuredSelection', packageName, className)/] && ((IStructuredSelection)selection).size() == 1)
		{
			Object object = (([genModel.getImportedName('org.eclipse.jface.viewers.IStructuredSelection', packageName, className)/])selection).getFirstElement();

			[genModel.getImportedName('org.eclipse.emf.edit.domain.EditingDomain', packageName, className)/] domain = (([genModel.getImportedName('org.eclipse.emf.edit.domain.IEditingDomainProvider', packageName, className)/])activeEditorPart).getEditingDomain();

			newChildDescriptors = domain.getNewChildDescriptors(object, null);
			newSiblingDescriptors = domain.getNewChildDescriptors(null, object);
		}

		// Generate actions for selection; populate and redraw the menus.
		//
		createChildActions = generateCreateChildActions(newChildDescriptors, selection);
  [if (genModel.creationSubmenus)]
		createChildSubmenuActions = extractSubmenuActions(createChildActions);
  [/if]
		createSiblingActions = generateCreateSiblingActions(newSiblingDescriptors, selection);
  [if (genModel.creationSubmenus)]
		createSiblingSubmenuActions = extractSubmenuActions(createSiblingActions);
  [/if]

		if (createChildMenuManager != null)
		{
  [if (genModel.creationSubmenus)]
			populateManager(createChildMenuManager, createChildSubmenuActions, null);
  [/if]
			populateManager(createChildMenuManager, createChildActions, null);
			createChildMenuManager.update(true);
		}
		if (createSiblingMenuManager != null)
		{
  [if (genModel.creationSubmenus)]
			populateManager(createSiblingMenuManager, createSiblingSubmenuActions, null);
  [/if]
			populateManager(createSiblingMenuManager, createSiblingActions, null);
			createSiblingMenuManager.update(true);
		}
[else]
		// Add your contributions.
		// Ensure that you remove @generated or mark it @generated NOT
[/if]
	}

[if (genModel.creationCommands)]
	/**
	 * This generates a {@link org.eclipse.emf.edit.ui.action.CreateChildAction} for each object in <code>descriptors</code>,
	 * and returns the collection of these actions.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected [genModel._CollectionOfIAction(packageName, className)/] generateCreateChildActions([genModel._CollectionOfAnything(packageName, className)/] descriptors, [genModel.getImportedName('org.eclipse.jface.viewers.ISelection', packageName, className)/] selection)
	{
		[genModel._CollectionOfIAction(packageName, className)/] actions = new [genModel._ArrayListOfIAction(packageName, className)/]();
		if (descriptors != null)
		{
[if (genModel.useGenerics())]
			for ([genModel.getImportedName('java.lang.Object', packageName, className)/] descriptor : descriptors)
[else]
			for ([genModel.getImportedName('java.util.Iterator', packageName, className)/] i = descriptors.iterator(); i.hasNext(); )
[/if]
			{
				actions.add(new [genModel.getImportedName('org.eclipse.emf.edit.ui.action.CreateChildAction', packageName, className)/](activeEditorPart, selection, [if (genModel.useGenerics())]descriptor[else]i.next()[/if]));
			}
		}
		return actions;
	}

	/**
	 * This generates a {@link org.eclipse.emf.edit.ui.action.CreateSiblingAction} for each object in <code>descriptors</code>,
	 * and returns the collection of these actions.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected [genModel._CollectionOfIAction(packageName, className)/] generateCreateSiblingActions([genModel._CollectionOfAnything(packageName, className)/] descriptors, [genModel.getImportedName('org.eclipse.jface.viewers.ISelection', packageName, className)/] selection)
	{
		[genModel._CollectionOfIAction(packageName, className)/] actions = new [genModel._ArrayListOfIAction(packageName, className)/]();
		if (descriptors != null)
		{
[if (genModel.useGenerics())]
			for ([genModel.getImportedName('java.lang.Object', packageName, className)/] descriptor : descriptors)
[else]
			for ([genModel.getImportedName('java.util.Iterator', packageName, className)/] i = descriptors.iterator(); i.hasNext(); )
[/if]
			{
				actions.add(new [genModel.getImportedName('org.eclipse.emf.edit.ui.action.CreateSiblingAction', packageName, className)/](activeEditorPart, selection, [if (genModel.useGenerics())]descriptor[else]i.next()[/if]));
			}
		}
		return actions;
	}

	/**
	 * This populates the specified <code>manager</code> with {@link org.eclipse.jface.action.ActionContributionItem}s
	 * based on the {@link org.eclipse.jface.action.IAction}s contained in the <code>actions</code> collection,
	 * by inserting them before the specified contribution item <code>contributionID</code>.
	 * If <code>contributionID</code> is <code>null</code>, they are simply added.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected void populateManager([genModel.getImportedName('org.eclipse.jface.action.IContributionManager', packageName, className)/] manager, [genModel._CollectionOfExtendsIAction(packageName, className)/] actions, String contributionID)
	{
		if (actions != null)
		{
[if (genModel.useGenerics())]
			for ([genModel.getImportedName('org.eclipse.jface.action.IAction', packageName, className)/] action : actions)
[else]
			for ([genModel.getImportedName('java.util.Iterator', packageName, className)/] i = actions.iterator(); i.hasNext(); )
[/if]
			{
[if (not genModel.useGenerics())]
				[genModel.getImportedName('org.eclipse.jface.action.IAction', packageName, className)/] action = (IAction)i.next();
[/if]
				if (contributionID != null)
				{
					manager.insertBefore(contributionID, action);
				}
				else
				{
					manager.add(action);
				}
			}
		}
	}
		
	/**
	 * This removes from the specified <code>manager</code> all {@link org.eclipse.jface.action.ActionContributionItem}s
	 * based on the {@link org.eclipse.jface.action.IAction}s contained in the <code>actions</code> collection.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected void depopulateManager([genModel.getImportedName('org.eclipse.jface.action.IContributionManager', packageName, className)/] manager, [genModel._CollectionOfExtendsIAction(packageName, className)/] actions)
	{
		if (actions != null)
		{
			[genModel.getImportedName('org.eclipse.jface.action.IContributionItem', packageName, className)/][genModel.genSquareBrackets('')/] items = manager.getItems();
			for (int i = 0; i < items.length; i++)
			{
				// Look into SubContributionItems
				//
				[genModel.getImportedName('org.eclipse.jface.action.IContributionItem', packageName, className)/] contributionItem = items[genModel.genSquareBrackets('i')/];
				while (contributionItem instanceof [genModel.getImportedName('org.eclipse.jface.action.SubContributionItem', packageName, className)/])
				{
					contributionItem = (([genModel.getImportedName('org.eclipse.jface.action.SubContributionItem', packageName, className)/])contributionItem).getInnerItem();
				}

				// Delete the ActionContributionItems with matching action.
				//
				if (contributionItem instanceof [genModel.getImportedName('org.eclipse.jface.action.ActionContributionItem', packageName, className)/])
				{
					[genModel.getImportedName('org.eclipse.jface.action.IAction', packageName, className)/] action = (([genModel.getImportedName('org.eclipse.jface.action.ActionContributionItem', packageName, className)/])contributionItem).getAction();
					if (actions.contains(action))
					{
						manager.remove(contributionItem);
					}
				}
			}
		}
	}

  [if (genModel.creationSubmenus)]
	/**
	 * This extracts those actions in the <code>submenuActions</code> collection whose text is qualified and returns
	 * a map of these actions, keyed by submenu text.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected [genModel._MapOfStringToCollectionOfIAction(packageName, className)/] extractSubmenuActions([genModel._CollectionOfIAction(packageName, className)/] createActions)
	{
		[genModel._MapOfStringToCollectionOfIAction(packageName, className)/] createSubmenuActions = new [genModel._LinkedHashMapOfStringToCollectionOfIAction(packageName, className)/]();
		if (createActions != null)
		{
			for ([genModel._IteratorOfIAction(packageName, className)/] actions = createActions.iterator(); actions.hasNext(); )
			{
				[genModel.getImportedName('org.eclipse.jface.action.IAction', packageName, className)/] action = [if (not genModel.useGenerics())]([genModel.getImportedName('org.eclipse.jface.action.IAction', packageName, className)/])[/if]actions.next();
				[genModel.getImportedName('java.util.StringTokenizer', packageName, className)/] st = new [genModel.getImportedName('java.util.StringTokenizer', packageName, className)/](action.getText(), "|");[genModel.getNonNLS()/]
				if (st.countTokens() == 2)
				{
					String text = st.nextToken().trim();
					[genModel._CollectionOfIAction(packageName, className)/] submenuActions = [if ( not genModel.useGenerics())]([genModel._CollectionOfIAction(packageName, className)/])[/if]createSubmenuActions.get(text);
					if (submenuActions == null)
					{
						createSubmenuActions.put(text, submenuActions = new [genModel._ArrayListOfIAction(packageName, className)/]());
					}
					action.setText(st.nextToken().trim());
					submenuActions.add(action);
					actions.remove();
				}
			}
		}
		return createSubmenuActions;
	}

	/**
	 * This populates the specified <code>manager</code> with {@link org.eclipse.jface.action.MenuManager}s containing
	 * {@link org.eclipse.jface.action.ActionContributionItem}s based on the {@link org.eclipse.jface.action.IAction}s
	 * contained in the <code>submenuActions</code> collection, by inserting them before the specified contribution
	 * item <code>contributionID</code>.
	 * If <code>contributionID</code> is <code>null</code>, they are simply added.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected void populateManager([genModel.getImportedName('org.eclipse.jface.action.IContributionManager', packageName, className)/] manager, [genModel._MapOfStringToCollectionOfIAction(packageName, className)/] submenuActions, String contributionID)
	{
		if (submenuActions != null)
		{
    [if (genModel.getComplianceLevel() = GenJDKLevel::JDK14)]
			for ([genModel.getImportedName('java.util.Iterator', packageName, className)/] entries = submenuActions.entrySet().iterator(); entries.hasNext();)
			{
				[genModel._MapEntryOfStringToCollectionOfIAction(packageName, className)/] entry = ([genModel._MapEntryOfStringToCollectionOfIAction(packageName, className)/])entries.next();
    [else]
			for ([genModel._MapEntryOfStringToCollectionOfIAction(packageName, className)/] entry : submenuActions.entrySet())
			{
    [/if]
				[genModel.getImportedName('org.eclipse.jface.action.MenuManager', packageName, className)/] submenuManager = new [genModel.getImportedName('org.eclipse.jface.action.MenuManager', packageName, className)/]([if (not genModel.useGenerics())](String)[/if]entry.getKey());
				if (contributionID != null)
				{
					manager.insertBefore(contributionID, submenuManager);
				}
				else
				{
					manager.add(submenuManager);
				}
				populateManager(submenuManager, [if (not genModel.useGenerics())]([genModel._CollectionOfIAction(packageName, className)/])[/if]entry.getValue(), null);
			}
		}
	}

	/**
	 * This removes from the specified <code>manager</code> all {@link org.eclipse.jface.action.MenuManager}s and their
	 * {@link org.eclipse.jface.action.ActionContributionItem}s based on the {@link org.eclipse.jface.action.IAction}s
	 * contained in the <code>submenuActions</code> map.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected void depopulateManager([genModel.getImportedName('org.eclipse.jface.action.IContributionManager', packageName, className)/] manager, [genModel._MapOfStringToCollectionOfIAction(packageName, className)/] submenuActions)
	{
		if (submenuActions != null)
		{
			[genModel.getImportedName('org.eclipse.jface.action.IContributionItem', packageName, className)/][genModel.genSquareBrackets('')/] items = manager.getItems();
			for (int i = 0; i < items.length; i++)
			{
				[genModel.getImportedName('org.eclipse.jface.action.IContributionItem', packageName, className)/] contributionItem = items[genModel.genSquareBrackets('i')/];
				if (contributionItem instanceof [genModel.getImportedName('org.eclipse.jface.action.MenuManager', packageName, className)/])
				{
					[genModel.getImportedName('org.eclipse.jface.action.MenuManager', packageName, className)/] submenuManager = ([genModel.getImportedName('org.eclipse.jface.action.MenuManager', packageName, className)/])contributionItem;
					if (submenuActions.containsKey(submenuManager.getMenuText()))
					{
						depopulateManager(submenuManager, [if (not genModel.useGenerics())]([genModel._CollectionOfIAction(packageName, className)/])[/if]submenuActions.get(contributionItem));
						manager.remove(contributionItem);
					}
				}
			}
		}
	}

  [/if]
[/if]
	/**
	 * This populates the pop-up menu before it appears.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
[if (genModel.useClassOverrideAnnotation())]
	@Override
[/if]
	public void menuAboutToShow([genModel.getImportedName('org.eclipse.jface.action.IMenuManager', packageName, className)/] menuManager)
	{
		super.menuAboutToShow(menuManager);
[if (genModel.creationCommands)]
		[genModel.getImportedName('org.eclipse.jface.action.MenuManager', packageName, className)/] submenuManager = null;

		submenuManager = new [genModel.getImportedName('org.eclipse.jface.action.MenuManager', packageName, className)/]([genPackage.getImportedEditorPluginClassName()/].INSTANCE.getString("_UI_CreateChild_menu_item"));[genModel.getNonNLS()/]
  [if (genModel.creationSubmenus)]
		populateManager(submenuManager, createChildSubmenuActions, null);
  [/if]
		populateManager(submenuManager, createChildActions, null);
		menuManager.insertBefore("edit", submenuManager);[genModel.getNonNLS()/]

		submenuManager = new [genModel.getImportedName('org.eclipse.jface.action.MenuManager', packageName, className)/]([genPackage.getImportedEditorPluginClassName()/].INSTANCE.getString("_UI_CreateSibling_menu_item"));[genModel.getNonNLS()/]
  [if (genModel.creationSubmenus)]
		populateManager(submenuManager, createSiblingSubmenuActions, null);
  [/if]
		populateManager(submenuManager, createSiblingActions, null);
		menuManager.insertBefore("edit", submenuManager);[genModel.getNonNLS()/]
[/if]
	}

	/**
	 * This inserts global actions before the "additions-end" separator.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
[if (genModel.useClassOverrideAnnotation())]
	@Override
[/if]
	protected void addGlobalActions([genModel.getImportedName('org.eclipse.jface.action.IMenuManager', packageName, className)/] menuManager)
	{
		menuManager.insertAfter("additions-end", new [genModel.getImportedName('org.eclipse.jface.action.Separator', packageName, className)/]("ui-actions"));[genModel.getNonNLS()/][genModel.getNonNLS(2)/]
		menuManager.insertAfter("ui-actions", showPropertiesViewAction);[genModel.getNonNLS()/]

		refreshViewerAction.setEnabled(refreshViewerAction.isEnabled());
		menuManager.insertAfter("ui-actions", refreshViewerAction);[genModel.getNonNLS()/]

		super.addGlobalActions(menuManager);
	}

	/**
	 * This ensures that a delete action will clean up all references to deleted objects.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
[if (genModel.useClassOverrideAnnotation())]
	@Override
[/if]
	protected boolean removeAllReferencesOnDelete()
	{
		return true;
	}

}
[/template]

[template public _CollectionOfAnything (genModel : GenModel, packageName : String, className : String)]
[if genModel.useGenerics()]Collection<?>[else]Collection[/if]
[/template]

[template public _CollectionOfIAction (genModel : GenModel, packageName : String, className : String)]
[if genModel.useGenerics()][genModel.getImportedName('java.util.Collection', packageName, className)/]<[genModel.getImportedName('org.eclipse.jface.action.IAction', packageName, className)/]>[else][genModel.getImportedName('java.util.Collection', packageName, className)/][/if]
[/template]

[template public _ArrayListOfIAction (genModel : GenModel, packageName : String, className : String)]
[if genModel.useGenerics()][genModel.getImportedName('java.util.ArrayList', packageName, className)/]<[genModel.getImportedName('org.eclipse.jface.action.IAction', packageName, className)/]>[else][genModel.getImportedName('java.util.ArrayList', packageName, className)/][/if]
[/template]

[template public _CollectionOfExtendsIAction (genModel : GenModel, packageName : String, className : String)]
[if genModel.useGenerics()][genModel.getImportedName('java.util.Collection', packageName, className)/]<? extends [genModel.getImportedName('org.eclipse.jface.action.IAction', packageName, className)/]>[else][genModel.getImportedName('java.util.Collection', packageName, className)/][/if]
[/template]

[template public _IteratorOfIAction (genModel : GenModel, packageName : String, className : String)]
[if genModel.useGenerics()][genModel.getImportedName('java.util.Iterator', packageName, className)/]<[genModel.getImportedName('org.eclipse.jface.action.IAction', packageName, className)/]>[else][genModel.getImportedName('java.util.Iterator', packageName, className)/][/if]
[/template]

[template public _MapOfStringToCollectionOfIAction (genModel : GenModel, packageName : String, className : String)]
[if genModel.useGenerics()][genModel.getImportedName('java.util.Map', packageName, className)/]<String, [genModel._CollectionOfIAction(packageName, className)/]>[else][genModel.getImportedName('java.util.Map', packageName, className)/][/if]
[/template]

[template public _MapEntryOfStringToCollectionOfIAction (genModel : GenModel, packageName : String, className : String)]
[if genModel.useGenerics()][genModel.getImportedName('java.util.Map', packageName, className)/].Entry<String, [genModel._CollectionOfIAction(packageName, className)/]>[else][genModel.getImportedName('java.util.Map', packageName, className)/].Entry[/if]
[/template]

[template public _LinkedHashMapOfStringToCollectionOfIAction (genModel : GenModel, packageName : String, className : String)]
[if genModel.useGenerics()][genModel.getImportedName('java.util.LinkedHashMap', packageName, className)/]<String, [genModel._CollectionOfIAction(packageName, className)/]>[else][genModel.getImportedName('java.util.LinkedHashMap', packageName, className)/][/if]
[/template]

