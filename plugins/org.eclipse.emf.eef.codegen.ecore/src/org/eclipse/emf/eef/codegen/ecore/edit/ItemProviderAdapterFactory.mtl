[comment encoding = UTF-8 /]
[comment
/**
 * <copyright>
 *
 * Copyright (c) 2002-2011 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   IBM - Initial API and implementation
 *   Obeo - Migrate to Acceleo
 *
 * </copyright>
 */
[/comment]
[module ItemProviderAdapterFactory('http://www.eclipse.org/emf/2002/GenModel','http://www.eclipse.org/emf/2002/Ecore')/]

[import org::eclipse::emf::eef::codegen::ecore::services::common /]
[import org::eclipse::emf::eef::codegen::ecore::services::header /]
[import org::eclipse::emf::eef::codegen::ecore::services::StringUtil /]
[import org::eclipse::emf::eef::codegen::ecore::services::wrappers::GenClass /]
[import org::eclipse::emf::eef::codegen::ecore::services::wrappers::GenPackage /]
[import org::eclipse::emf::eef::codegen::ecore::services::wrappers::GenModel /]
[import org::eclipse::emf::eef::codegen::ecore::services::wrappers::GenFeature /]
[import org::eclipse::emf::eef::codegen::ecore::services::wrappers::GenEnum /]
[import org::eclipse::emf::eef::codegen::ecore::services::wrappers::GenDataType /]
[import org::eclipse::emf::eef::codegen::ecore::services::wrappers::GenTypedElement /]

[template public ItemProviderAdapterFactory(genPackage : GenPackage) { genModel : GenModel = genPackage.genModel ; packageName : String = genPackage.getProviderPackageName() ; className : String = genPackage.getItemProviderAdapterFactoryClassName() }]
[genModel.initializeImportManager(packageName, className)/]
[file (genModel.editPath(packageName, className), false, 'UTF-8')]
[includeHeader()/]
package [packageName/];

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

[let content : String = genModel.fileContent(genPackage, packageName, className)]
[genModel.genSortedImports(packageName, className)/]

[content/]
[/let]
[/file]
[/template]

[template public fileContent(genModel : GenModel, genPackage : GenPackage, packageName : String, className : String)]
/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class [genPackage.getItemProviderAdapterFactoryClassName()/] extends [genPackage.getImportedAdapterFactoryClassName()/] implements ComposeableAdapterFactory, IChangeNotifier[if (genPackage.isDisposableProviderFactory())], org.eclipse.emf.edit.provider.IDisposable[/if][if (genPackage.isExtensibleProviderFactory())], org.eclipse.emf.edit.provider.IChildCreationExtender[/if]
{
[if (genModel.hasCopyrightField())]
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final java.lang.String copyright = [genModel.getCopyrightFieldLiteral()/];[genModel.getNonNLS()/]

[/if]
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

[if (genPackage.isDisposableProviderFactory() and genPackage.hasStatefulProvider())]
	/**
	 * This keeps track of all the item providers created, so that they can be {@link #dispose disposed}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected org.eclipse.emf.edit.provider.Disposable disposable = new Disposable();

[/if]
[if (genPackage.isExtensibleProviderFactory())]
	/**
	 * This helps manage the child creation extenders.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected org.eclipse.emf.edit.provider.ChildCreationExtenderManager childCreationExtenderManager = new org.eclipse.emf.edit.provider.ChildCreationExtenderManager([genPackage.getImportedEditPluginClassName()/].INSTANCE, [genPackage.getImportedPackageInterfaceName()/]eNS_URI);

[/if]
	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected [_Collection(genPackage)/] supportedTypes = new [_ArrayList(genPackage)/]();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public [genPackage.getItemProviderAdapterFactoryClassName()/]()
	{
[for (name : String | genPackage.getProviderSupportedTypes())]
		supportedTypes.add([genModel.getImportedName(name, packageName, className)/].class);
[/for]
	}

[for (genDelegate : GenPackage | genPackage.getAdapterDelegatePackages())]
	/**
	 * This keeps track of the factory to which to delegate adapter creation for objects from that package.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected [genDelegate.getImportedAdapterFactoryClassName()/] [genPackage.getUncapAdapterFactoryDelegateName(genDelegate)/] = null;

	/**
	 * This determines the delegate factory for the package.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected [genDelegate.getImportedAdapterFactoryClassName()/] get[genPackage.getAdapterFactoryDelegateName(genDelegate)/]()
	{
		if ([genPackage.getUncapAdapterFactoryDelegateName(genDelegate)/] == null)
		{
			org.eclipse.emf.common.notify.AdapterFactory rootAdapterFactory = getRootAdapterFactory();
			if (rootAdapterFactory instanceof ComposedAdapterFactory)
			{
				org.eclipse.emf.common.notify.AdapterFactory delegateAdapterFactory =
					((ComposedAdapterFactory)rootAdapterFactory).getFactoryForType([genDelegate.getImportedAdapterFactoryClassName()/].getPackage());
				if (delegateAdapterFactory instanceof [genDelegate.getImportedAdapterFactoryClassName()/])
				{
					[genPackage.getUncapAdapterFactoryDelegateName(genDelegate)/] = ([genDelegate.getImportedAdapterFactoryClassName()/])delegateAdapterFactory;
				}
			}
		}
		return [genPackage.getUncapAdapterFactoryDelegateName(genDelegate)/];
	}

[/for]
[for (genClass : GenClass | genPackage.getGenClasses())]
[if (not genClass.isAbstract() and (genClass.provider <> GenProviderKind::None))]
[if (genClass.isProviderSingleton())]
	/**
	 * This keeps track of the one adapter used for all {@link [genClass.getQualifiedInterfaceName()/]} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected [genClass.getProviderClassName()/] [genClass.getUncapName()/]ItemProvider;

	/**
	 * This creates an adapter for a {@link [genClass.getQualifiedInterfaceName()/]}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
[if (genModel.useClassOverrideAnnotation())]
	@Override
[/if]
	public Adapter create[genClass.getName()/]Adapter()
	{
		if ([genClass.getUncapName()/]ItemProvider == null)
		{
			[genClass.getUncapName()/]ItemProvider = new [genClass.getProviderClassName()/](this);
		}

		return [genClass.getUncapName()/]ItemProvider;
	}

[else]
	/**
	 * This creates an adapter for a {@link [genClass.getQualifiedInterfaceName()/]}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
[if (genModel.useClassOverrideAnnotation())]
	@Override
[/if]
	public Adapter create[genClass.getName()/]Adapter()
	{
		return new [genClass.getProviderClassName()/](this);
	}

[/if]
[/if]
[/for]
[for (genClass : GenClass | genPackage.getAdapterDelegateSuperClasses())]
	/**
	 * <[genClass.getName()/]%> of [genClass.getItemProviderAdapterFactoryClassName()/]
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter create[genClass.getName()/]Adapter()
	{
		return
			get[genClass.getItemProviderAdapterFactoryClassName()/]() == null ?
				null :
				get[genClass.getItemProviderAdapterFactoryClassName()/]().create[genClass.getName()/]Adapter();
	}

[/for]
	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory()
	{
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory)
	{
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
[if (genModel.useClassOverrideAnnotation())]
	@Override
[/if]
	public boolean isFactoryForType(Object type)
	{
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
[if (genModel.useClassOverrideAnnotation())]
	@Override
[/if]
	public Adapter adapt(Notifier notifier, Object type)
	{
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
[if (genModel.useClassOverrideAnnotation())]
	@Override
[/if]
	public Object adapt(Object object, Object type)
	{
		if (isFactoryForType(type))
		{
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class[if (genModel.useGenerics())]<?>[/if]) || [if (genModel.runtimePlatform = GenRuntimePlatform::GWT)]org.eclipse.emf.common.util.Reflect.isInstance((Class[if (genModel.useGenerics())]<?>[/if])type, adapter)[else](((Class[if (genModel.useGenerics())]<?>[/if])type).isInstance(adapter))[/if])
			{
				return adapter;
			}
		}

		return null;
	}

[if (genPackage.isDisposableProviderFactory() and genPackage.hasStatefulProvider())]
	/**
	 * Associates an adapter with a notifier via the base implementation, then records it to ensure it will be disposed.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
[if (genModel.useClassOverrideAnnotation())]
	@Override
[/if]
	protected void associate(Adapter adapter, Notifier target)
	{
		super.associate(adapter, target);
		if (adapter != null)
		{
			disposable.add(adapter);
		}
	}

[/if]
[if (genPackage.isExtensibleProviderFactory())]
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public [if useGenerics(genPackage)]java.util.List<org.eclipse.emf.edit.provider.IChildCreationExtender>[else]java.util.List[/if] getChildCreationExtenders()
	{
		return childCreationExtenderManager.getChildCreationExtenders();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public [if useGenerics(genPackage)]java.util.Collection<?>[else]java.util.Collection[/if] getNewChildDescriptors(Object object, org.eclipse.emf.edit.domain.EditingDomain editingDomain)
	{
		return childCreationExtenderManager.getNewChildDescriptors(object, editingDomain);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public org.eclipse.emf.common.util.ResourceLocator getResourceLocator()
	{
		return childCreationExtenderManager;
	}

[/if]
	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener)
	{
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener)
	{
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification)
	{
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null)
		{
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

[if (genPackage.isDisposableProviderFactory())]
	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose()
	{
[if (genPackage.hasStatefulProvider())]
		disposable.dispose();
[else]
[for (genClass : GenClass | genPackage.getGenClasses())]
[if (not genClass.isAbstract() and genClass.isProviderSingleton())]
		if ([genClass.getUncapName()/]ItemProvider != null) [genClass.getUncapName()/]ItemProvider.dispose();
[/if]
[/for]
[/if]
	}

[/if]
[if (genPackage.isChildCreationExtenders())]
[comment <%for (Map.Entry<GenPackage, Map<GenClass, List<GenClass.ChildCreationData>>> packageEntry : genPackage.getExtendedChildCreationData().entrySet()) {%> /]
  [for (genPackage.getExtendedChildCreationDataEntrySet())]
[comment packageEntry.getKey() = GenPackage/] 
  [let key : GenPackage = getPackageEntryKey()]
	/**
	 * A child creation extender for the {@link [key.getImportedPackageInterfaceName()/]}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static class [genPackage.getChildCreationExtenderName(key)/] implements org.eclipse.emf.edit.provider.IChildCreationExtender
	{
		/**
		 * The switch for creating child descriptors specific to each extended class.
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
		 * @generated
		 */
		protected static class CreationSwitch extends packageEntry.getKey().getQualifiedSwitchClassName())[if useGenerics(genPackage)]<Object>[/if]
		{
			/**
			 * The child descriptors being populated.
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			protected java.util.List[if useGenerics(genPackage)]<Object>[/if] newChildDescriptors;

			/**
			 * The domain in which to create the children.
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			protected org.eclipse.emf.edit.domain.EditingDomain editingDomain;

			/**
			 * Creates the a switch for populating child descriptors in the given domain.
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			CreationSwitch(java.util.List[if useGenerics(genPackage)]<Object>[/if] newChildDescriptors, org.eclipse.emf.edit.domain.EditingDomain editingDomain) 
			{
				this.newChildDescriptors = newChildDescriptors;
				this.editingDomain = editingDomain;
			}
[comment <%for (Map.Entry<GenClass, List<GenClass.ChildCreationData>> classEntry : packageEntry.getValue().entrySet()) { GenClass genClass = classEntry.getKey();%>/]
    [for (getPackageEntryValueEntrySet())]
    [let genClass : GenClass = getClassEntryKey()]
			/**
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
[if (genModel.useClassOverrideAnnotation())]
			@Override
[/if]
			public [genClass.getTypeParameters()/]Object case[genPackage.getClassUniqueName(genClass)/]([genClass.getImportedInterfaceName()/][genClass.getInterfaceTypeArguments()/] object)
			{
[comment <%for (GenClass.ChildCreationData childCreationData : classEntry.getValue()) { GenFeature createFeature = childCreationData.createFeature; GenFeature delegatedFeature = childCreationData.delegatedFeature; GenClassifier createClassifier = childCreationData.createClassifier;%>/]
     [for (getChildCreationData())]
      [if (getChildCreationDataCreateFeature().isFeatureMapType())]
        [if (getChildCreationDataDelegatedFeature().isReferenceType())]
[comment]<%@ include file="ItemProvider/newChildDescriptorsReferenceDelegatedFeature.override.javajetinc" fail="alternative"%>
<%@ start %>[/comment]
				newChildDescriptors.add
					(createChildParameter
						([getChildCreationDataCreateFeature().getQualifiedFeatureAccessor()/],
						 org.eclipse.emf.ecore.util.FeatureMapUtil.createEntry
							([getChildCreationDataDelegatedFeature().getQualifiedFeatureAccessor()/],
          [if (getChildCreationDataCreateClassifier().oclAsType(GenClass).isMapEntry())]
							 [getChildCreationDataCreateClassifier().oclAsType(GenClass).getGenPackage().getQualifiedEFactoryInstanceAccessor()/].create([getChildCreationDataCreateClassifier().oclAsType(GenClass).getQualifiedClassifierAccessor()/]))));
          [else]
							 [getChildCreationDataCreateClassifier().oclAsType(GenClass).getGenPackage().getQualifiedFactoryInstanceAccessor()/].create[getChildCreationDataCreateClassifier().oclAsType(GenClass).getName()/]())));
          [/if]
[comment]<%@ include file="ItemProvider/newChildDescriptorsReferenceDelegatedFeature.insert.javajetinc" fail="silent"%>
<%@ end %><%//ItemProvider/newChildDescriptorsReferenceDelegatedFeature.override.javajetinc%>[/comment]
        [else]
[comment]<%@ include file="ItemProvider/newChildDescriptorsAttributeDelegatedFeature.override.javajetinc" fail="alternative"%>
<%@ start %>[/comment]
				newChildDescriptors.add
					(createChildParameter
						([getChildCreationDataCreateFeature().getQualifiedFeatureAccessor()/],
						 org.eclipse.emf.ecore.util.FeatureMapUtil.createEntry
							([getChildCreationDataDelegatedFeature().getQualifiedFeatureAccessor()/],
          [if (getChildCreationDataDelegatedFeature().isEnumBasedType())]
							 [getChildCreationDataDelegatedFeature().getTypeGenEnum().getStaticValue(getChildCreationDataDelegatedFeature().getEcoreFeature().defaultValueLiteral)/])));
          [elseif (getChildCreationDataDelegatedFeature().isStringBasedType())]
							 [getChildCreationDataDelegatedFeature().getCreateChildValueLiteral()/])));[genModel.getNonNLS()/]
          [else]
							 [getChildCreationDataCreateClassifier().oclAsType(GenDataType).genPackage.getQualifiedEFactoryInstanceAccessor()/].createFromString([getChildCreationDataCreateClassifier().oclAsType(GenDataType).getQualifiedClassifierAccessor()/], [getChildCreationDataDelegatedFeature().getCreateChildValueLiteral()/]))));[if (not getChildCreationDataDelegatedFeature().getCreateChildValueLiteral().oclIsUndefined())][genModel.getNonNLS()/][else] // TODO: ensure this is a valid literal value[/if]
          [/if]
[comment]<%@ include file="ItemProvider/newChildDescriptorsAttributeDelegatedFeature.insert.javajetinc" fail="silent"%>
<%@ end %><%//ItemProvider/newChildDescriptorsAttributeDelegatedFeature.override.javajetinc%>[/comment]
        [/if]
      [elseif (getChildCreationDataCreateFeature().isReferenceType())]
[comment]<%@ include file="ItemProvider/newChildDescriptorsReferenceFeature.override.javajetinc" fail="alternative"%>
<%@ start %>[/comment]
				newChildDescriptors.add
					(createChildParameter
						([getChildCreationDataCreateFeature().getQualifiedFeatureAccessor()/],
        [if (getChildCreationDataCreateClassifier().oclAsType(GenClass).isMapEntry())]
						 [getChildCreationDataCreateClassifier().oclAsType(GenClass).getGenPackage().getQualifiedEFactoryInstanceAccessor()/].create([getChildCreationDataCreateClassifier().oclAsType(GenClass).getQualifiedClassifierAccessor()/])));
        [else]
						 [getChildCreationDataCreateClassifier().oclAsType(GenClass).getGenPackage().getQualifiedFactoryInstanceAccessor()/].create[getChildCreationDataCreateClassifier().oclAsType(GenClass).getName()/]()));
        [/if]
[comment]<%@ include file="ItemProvider/newChildDescriptorsReferenceFeature.insert.javajetinc" fail="silent"%>
<%@ end %><%//ItemProvider/newChildDescriptorsReferenceFeature.override.javajetinc %>[/comment]
      [else]
[comment]<%@ include file="ItemProvider/newChildDescriptorsAttributeFeature.override.javajetinc" fail="alternative"%>
<%@ start %>[/comment]
				newChildDescriptors.add
					(createChildParameter
						([getChildCreationDataCreateFeature().getQualifiedFeatureAccessor()/],
        [if (getChildCreationDataCreateFeature().isEnumBasedType())]
						 [getChildCreationDataCreateFeature().getTypeGenEnum().getStaticValue(getChildCreationDataCreateFeature().getEcoreFeature().defaultValueLiteral)/]));
        [elseif (getChildCreationDataCreateFeature().isStringBasedType())]
						 [getChildCreationDataCreateFeature().getCreateChildValueLiteral()/]));[genModel.getNonNLS()/]
        [else]
						 [getChildCreationDataCreateClassifier().oclAsType(GenDataType).genPackage.getQualifiedEFactoryInstanceAccessor()/].createFromString([getChildCreationDataCreateClassifier().oclAsType(GenDataType).getQualifiedClassifierAccessor()/], [getChildCreationDataCreateFeature().getCreateChildValueLiteral()/])));[if (not getChildCreationDataCreateFeature().getCreateChildValueLiteral().oclIsUndefined())][genModel.getNonNLS()/][else] // TODO: ensure this is a valid literal value[/if]
        [/if]
[comment]<%@ include file="ItemProvider/newChildDescriptorsAttributeFeature.insert.javajetinc" fail="silent"%>
<%@ end %><%//ItemProvider/newChildDescriptorsAttributeFeature.override.javajetinc%>[/comment]
      [/if]

     [/for]
				return null;
			}

     [/let]
     [/for]
			/**
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			protected org.eclipse.emf.edit.command.CommandParameter createChildParameter(Object feature, Object child)
			{
				return new org.eclipse.emf.edit.command.CommandParameter(null, feature, child);
			}

		}

		/**
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
		 * @generated
		 */
		public [_Collection(genPackage)/] getNewChildDescriptors(Object object, org.eclipse.emf.edit.domain.EditingDomain editingDomain)
		{
			[_ArrayList(genPackage)/] result = new [_ArrayList(genPackage)/]();
		   new CreationSwitch(result, editingDomain).doSwitch((org.eclipse.emf.ecore.EObject)object);
		   return result;
		}

		/**
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
		 * @generated
		 */
		public org.eclipse.emf.common.util.ResourceLocator getResourceLocator()
		{
			return [genPackage.getImportedEditPluginClassName()/].INSTANCE;
		}
	}

  [/let]
  [/for]
[/if]
}
[/template]

[query public useGenerics(genPackage : GenPackage) : Boolean = genModel.useGenerics()/]

[query public _ArrayList(genPackage : GenPackage) : String = if genPackage.useGenerics() then 'java.util.ArrayList<java.lang.Object>' else 'java.util.ArrayList' endif/]

[query public _Collection(genPackage : GenPackage) : String = if genPackage.useGenerics() then 'java.util.Collection<java.lang.Object>' else 'java.util.Collection' endif/]
