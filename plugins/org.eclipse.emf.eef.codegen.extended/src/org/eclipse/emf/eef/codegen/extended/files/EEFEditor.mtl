[comment encoding = UTF-8 /]
[module EEFEditor('http://www.eclipse.org/emf/eef/components/1.0.0', 'http://www.eclipse.org/emf/eef/extended/editor/1.0.0', 'http://www.eclipse.org/emf/eef/extended/query/1.0.0', 'http://www.eclipse.org/emf/2002/Ecore')/]

[import org::eclipse::emf::eef::codegen::services::common /]
[import org::eclipse::emf::eef::codegen::services::naming /]
[import org::eclipse::emf::eef::codegen::extended::query::oclquery /]
[import org::eclipse::emf::eef::codegen::extended::services::editor-common /]
[import org::eclipse::emf::eef::codegen::extended::editor::api::EditorContribution /]

[template public generateEditor(peContext : PropertiesEditionContext)]
	[file (peContext.fullFilePath(), false, 'UTF-8')]
/**
 * <copyright>
 * </copyright>
 *
 */
package [peContext.model.presentationPackage()/];

[if (peContext.categories.bindings.bindingFilters->size() > 0)]
import java.util.ArrayList;
import java.util.List;
import org.eclipse.jface.viewers.ViewerFilter;
[/if]
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import [model.ecorePackage.qualifiedMetamodelPackage()/];
import org.eclipse.emf.eef.runtime.ui.EEFExtendedRuntime;
import org.eclipse.emf.eef.runtime.ui.editor.InteractiveEEFEditor;
[for (pageType : EClass | peContext.categories.bindings.views.eClass()->asOrderedSet())]
[pageType.pageImports()/]
[/for]
[for (filterType : EClass | peContext.categories.bindings.bindingFilters.eClass()->asOrderedSet())]
[filterType.filterImports()/]
[/for]
[for (queryType : EClass | peContext.eAllContents(EEFUnderstandableQuery).eClass()->asOrderedSet())]
[queryType.queryImports()/]
[/for]
import org.eclipse.ui.PartInitException;

/**
 * This is an example of a [model.ecorePackage.name/] model editor.
 * 
 */
public class [model.editorClassName()/] extends InteractiveEEFEditor {

	/**
	 * {@inheritDoc}
	 * @see org.eclipse.emf.eef.runtime.ui.editor.InteractiveEEFEditor#contributePages()
	 */
	protected void contributePages() {
		try {
	[for (contribution : StaticEEFEditorContribution | peContext.categories.bindings->filter(StaticEEFEditorContribution))]
			{
				[contribution.input.editorInput()/]
					[if (contribution.bindingFilters->size() > 0)]
				List<ViewerFilter> filters = new ArrayList<ViewerFilter>([contribution.bindingFilters->size()/]);
				[contribution.bindingFilters.filterDeclaration()/]
					[/if]
			[for (page : EEFPage | contribution.views->filter(EEFPage))]
				{
					[page.editorPage(peContext.model.editorClassName())/]
					[if (contribution.bindingFilters->size() > 0)]
					for (ViewerFilter viewerFilter : filters) {
						page.addFilter(viewerFilter);
					}
					[/if]
					page.setInput(input);
					addPage(page);
				}
			[/for]
			}
	[/for]
		} catch (PartInitException e) {
			EEFExtendedRuntime.getPlugin().log(e);
		}
	}
	
	[additionalMethods()/]

}
	[/file]
	
[/template]

[template public additionalMethods (peContext : PropertiesEditionContext) /]

[template public fullFilePath(peContext : PropertiesEditionContext)]
[peContext.model.qualifiedEditorClassName().toPath()/].java
[/template]